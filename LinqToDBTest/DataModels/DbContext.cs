//---------------------------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by peppapig from database table definition.
//	Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

#pragma warning disable 1591

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.Serialization;

using LinqToDB;
using LinqToDB.Mapping;

using peppa.util;

namespace peppa.Domain
{
	/// <summary>
	/// テーブル基本クラス
	/// </summary>
	/// <typeparam name="TEntity"></typeparam>
	[Serializable]
	[DataContract()]
	public class TableBase<TEntity> where TEntity : TableBase<TEntity>
	{

	}

	/// <summary>
	/// 条件指定基本クラス
	/// </summary>
	/// <typeparam name="T"></typeparam>
	[Serializable]
	public abstract class ConditionBase<TEntity> where TEntity : class
	{
		virtual public Expression<Func<TEntity, bool>> CreatePredicate()
		{
			return PredicateBuilder.True<TEntity>();
		}
	}

	/// <summary>
	/// Database       : peppa
	/// </summary>
	public partial class peppaDB : LinqToDB.Data.DataConnection
	{
		#region Tables
		/// <summary>
		/// テスト
		/// </summary>
		public ITable<Test> Test => this.GetTable<Test>();
		/// <summary>
		/// エラーログ
		/// </summary>
		public ITable<ErrorLog> ErrorLog => this.GetTable<ErrorLog>();
		/// <summary>
		/// アカウント
		/// </summary>
		public ITable<Account> Account => this.GetTable<Account>();
		/// <summary>
		/// 職員
		/// </summary>
		public ITable<Staff> Staff => this.GetTable<Staff>();
		/// <summary>
		/// 住所
		/// </summary>
		public ITable<Address> Address => this.GetTable<Address>();
		/// <summary>
		/// 住所種別
		/// </summary>
		public ITable<AddressType> AddressType => this.GetTable<AddressType>();
		/// <summary>
		/// 連絡先
		/// </summary>
		public ITable<Contact> Contact => this.GetTable<Contact>();
		/// <summary>
		/// 連絡先種別
		/// </summary>
		public ITable<ContactType> ContactType => this.GetTable<ContactType>();
		#endregion

		public peppaDB()
		{
			InitDataContext();
			InitMappingSchema();
		}

		public peppaDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
			InitMappingSchema();
		}

		partial void InitDataContext();
		partial void InitMappingSchema();
	}

	#region enum
	/// <summary>
	/// 有効フラグ
	/// <summary>
	public enum ValidityFlag
	{
		/// <summary>
		/// 名称 : 無効
		/// 説明 : 無効
		/// </summary>
		[MapValue(Value = 0)]
		無効 = 0,
		/// <summary>
		/// 名称 : 有効
		/// 説明 : 有効
		/// </summary>
		[MapValue(Value = 1)]
		有効 = 1,
	}
	/// <summary>
	/// 認証方式
	/// <summary>
	public enum AuthMethod
	{
		/// <summary>
		/// 名称 : 無認証
		/// 説明 : 無認証
		/// </summary>
		[MapValue(Value = "None")]
		無認証,
		/// <summary>
		/// 名称 : パスワード
		/// 説明 : パスワード
		/// </summary>
		[MapValue(Value = "Password")]
		パスワード,
		/// <summary>
		/// 名称 : LDAP
		/// 説明 : LDAP
		/// </summary>
		[MapValue(Value = "LDAP")]
		LDAP,
		/// <summary>
		/// 名称 : OAuth2
		/// 説明 : OAuth2
		/// </summary>
		[MapValue(Value = "OAuth2")]
		OAuth2,
	}
	/// <summary>
	/// 性別
	/// <summary>
	public enum Gender
	{
		/// <summary>
		/// 名称 : 男性
		/// 説明 : 男性
		/// </summary>
		[MapValue(Value = 1)]
		男性 = 1,
		/// <summary>
		/// 名称 : 女性
		/// 説明 : 女性
		/// </summary>
		[MapValue(Value = 2)]
		女性 = 2,
	}
	/// <summary>
	/// ユーザ種別
	/// <summary>
	public enum UserType
	{
		/// <summary>
		/// 名称 : 職員
		/// 説明 : 職員
		/// </summary>
		[MapValue(Value = 1)]
		職員 = 1,
		/// <summary>
		/// 名称 : 教員
		/// 説明 : 教員
		/// </summary>
		[MapValue(Value = 2)]
		教員 = 2,
		/// <summary>
		/// 名称 : 在学生
		/// 説明 : 在学生
		/// </summary>
		[MapValue(Value = 3)]
		在学生 = 3,
		/// <summary>
		/// 名称 : 除籍生
		/// 説明 : 除籍生
		/// </summary>
		[MapValue(Value = 4)]
		除籍生 = 4,
		/// <summary>
		/// 名称 : 保護者
		/// 説明 : 保護者
		/// </summary>
		[MapValue(Value = 5)]
		保護者 = 5,
		/// <summary>
		/// 名称 : 他ユーザ
		/// 説明 : SEなどその他のシステムアカウント用ユーザ
		/// </summary>
		[MapValue(Value = 99)]
		他ユーザ = 99,
	}
	#endregion
	#region enum拡張
	/// <summary>
	/// enum拡張
	/// </summary>
	public static partial class EnumExtend
	{
		#region ValidityFlag拡張メソッド
		/// <summary>
		/// ValidityFlagを列挙する
		/// </summary>
		/// <returns></returns>
		public static IEnumerable<ValidityFlag> ValidityFlagEnumerator()
		{
			foreach (ValidityFlag v in Enum.GetValues(typeof(ValidityFlag)))
				yield return v;
		}

		/// <summary>
		/// 整数値からValidityFlagへの変換
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing"></param>
		/// <returns></returns>
		public static ValidityFlag? ToValidityFlag(this int self, ValidityFlag? missing = null)
		{
			switch (self)
			{
				case 0:
					return ValidityFlag.無効;
				case 1:
					return ValidityFlag.有効;
				default:
					return (ValidityFlag?)missing;
			}
		}

		/// <summary>
		/// ValidityFlagの値取得
		/// </summary>
		/// <param name="self"></param>
		/// <returns></returns>
		public static int Val(this ValidityFlag self)
		{
			switch (self)
			{
				case ValidityFlag.無効:
					return 0;
				case ValidityFlag.有効:
					return 1;
				default:
					throw new Exception("Unknown ValidityFlag");
			}
		}

		/// <summary>
		/// ValidityFlag名称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string Name(this ValidityFlag self, string missing = null)
		{
			switch (self)
			{
				case ValidityFlag.無効:
					return "無効";
				case ValidityFlag.有効:
					return "有効";
				default:
					return missing;
			}
		}

		/// <summary>
		/// ValidityFlag表示名
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string DisplayName(this ValidityFlag self, string missing = null)
		{
			switch (self)
			{
				case ValidityFlag.無効:
					return "無効";
				case ValidityFlag.有効:
					return "有効";
				default:
					return missing;
			}
		}

		/// <summary>
		/// ValidityFlag略称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string Abbrev(this ValidityFlag self, string missing = null)
		{
			switch (self)
			{
				case ValidityFlag.無効:
					return "無";
				case ValidityFlag.有効:
					return "有";
				default:
					return missing;
			}
		}

		/// <summary>
		/// ValidityFlag英字名称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string NameEn(this ValidityFlag self, string missing = null)
		{
			switch (self)
			{
				case ValidityFlag.無効:
					return "Invalid";
				case ValidityFlag.有効:
					return "Valid";
				default:
					return missing;
			}
		}

		/// <summary>
		/// ValidityFlag英字表示名
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string DisplayNameEn(this ValidityFlag self, string missing = null)
		{
			switch (self)
			{
				case ValidityFlag.無効:
					return "Invalid";
				case ValidityFlag.有効:
					return "Valid";
				default:
					return missing;
			}
		}

		/// <summary>
		/// ValidityFlag英字略称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string AbbrevEn(this ValidityFlag self, string missing = null)
		{
			switch (self)
			{
				case ValidityFlag.無効:
					return "X";
				case ValidityFlag.有効:
					return "O";
				default:
					return missing;
			}
		}
		#endregion
		#region AuthMethod拡張メソッド
		/// <summary>
		/// AuthMethodを列挙する
		/// </summary>
		/// <returns></returns>
		public static IEnumerable<AuthMethod> AuthMethodEnumerator()
		{
			foreach (AuthMethod v in Enum.GetValues(typeof(AuthMethod)))
				yield return v;
		}

		/// <summary>
		/// 文字列値からAuthMethodへの変換
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing"></param>
		/// <returns></returns>
		public static AuthMethod? ToAuthMethod(this string self, AuthMethod? missing = null)
		{
			switch (self)
			{
				case "None":
					return AuthMethod.無認証;
				case "Password":
					return AuthMethod.パスワード;
				case "LDAP":
					return AuthMethod.LDAP;
				case "OAuth2":
					return AuthMethod.OAuth2;
				default:
					return (AuthMethod?)missing;
			}
		}

		/// <summary>
		/// AuthMethodの値取得
		/// </summary>
		/// <param name="self"></param>
		/// <returns></returns>
		public static string Val(this AuthMethod self)
		{
			switch (self)
			{
				case AuthMethod.無認証:
					return "None";
				case AuthMethod.パスワード:
					return "Password";
				case AuthMethod.LDAP:
					return "LDAP";
				case AuthMethod.OAuth2:
					return "OAuth2";
				default:
					throw new Exception("Unknown AuthMethod");
			}
		}

		/// <summary>
		/// AuthMethod名称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string Name(this AuthMethod self, string missing = null)
		{
			switch (self)
			{
				case AuthMethod.無認証:
					return "無認証";
				case AuthMethod.パスワード:
					return "パスワード";
				case AuthMethod.LDAP:
					return "LDAP";
				case AuthMethod.OAuth2:
					return "OAuth2";
				default:
					return missing;
			}
		}

		/// <summary>
		/// AuthMethod表示名
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string DisplayName(this AuthMethod self, string missing = null)
		{
			switch (self)
			{
				case AuthMethod.無認証:
					return "無認証";
				case AuthMethod.パスワード:
					return "パスワード";
				case AuthMethod.LDAP:
					return "LDAP";
				case AuthMethod.OAuth2:
					return "OAuth2";
				default:
					return missing;
			}
		}

		/// <summary>
		/// AuthMethod略称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string Abbrev(this AuthMethod self, string missing = null)
		{
			switch (self)
			{
				case AuthMethod.無認証:
					return "無";
				case AuthMethod.パスワード:
					return "パ";
				case AuthMethod.LDAP:
					return "L";
				case AuthMethod.OAuth2:
					return "O";
				default:
					return missing;
			}
		}

		/// <summary>
		/// AuthMethod英字名称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string NameEn(this AuthMethod self, string missing = null)
		{
			switch (self)
			{
				case AuthMethod.無認証:
					return "None";
				case AuthMethod.パスワード:
					return "Password";
				case AuthMethod.LDAP:
					return "LDAP";
				case AuthMethod.OAuth2:
					return "OAuth2";
				default:
					return missing;
			}
		}

		/// <summary>
		/// AuthMethod英字表示名
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string DisplayNameEn(this AuthMethod self, string missing = null)
		{
			switch (self)
			{
				case AuthMethod.無認証:
					return "None";
				case AuthMethod.パスワード:
					return "Password";
				case AuthMethod.LDAP:
					return "LDAP";
				case AuthMethod.OAuth2:
					return "OAuth2";
				default:
					return missing;
			}
		}

		/// <summary>
		/// AuthMethod英字略称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string AbbrevEn(this AuthMethod self, string missing = null)
		{
			switch (self)
			{
				case AuthMethod.無認証:
					return "N";
				case AuthMethod.パスワード:
					return "P";
				case AuthMethod.LDAP:
					return "L";
				case AuthMethod.OAuth2:
					return "O";
				default:
					return missing;
			}
		}
		#endregion
		#region Gender拡張メソッド
		/// <summary>
		/// Genderを列挙する
		/// </summary>
		/// <returns></returns>
		public static IEnumerable<Gender> GenderEnumerator()
		{
			foreach (Gender v in Enum.GetValues(typeof(Gender)))
				yield return v;
		}

		/// <summary>
		/// 整数値からGenderへの変換
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing"></param>
		/// <returns></returns>
		public static Gender? ToGender(this int self, Gender? missing = null)
		{
			switch (self)
			{
				case 1:
					return Gender.男性;
				case 2:
					return Gender.女性;
				default:
					return (Gender?)missing;
			}
		}

		/// <summary>
		/// Genderの値取得
		/// </summary>
		/// <param name="self"></param>
		/// <returns></returns>
		public static int Val(this Gender self)
		{
			switch (self)
			{
				case Gender.男性:
					return 1;
				case Gender.女性:
					return 2;
				default:
					throw new Exception("Unknown Gender");
			}
		}

		/// <summary>
		/// Gender名称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string Name(this Gender self, string missing = null)
		{
			switch (self)
			{
				case Gender.男性:
					return "男性";
				case Gender.女性:
					return "女性";
				default:
					return missing;
			}
		}

		/// <summary>
		/// Gender表示名
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string DisplayName(this Gender self, string missing = null)
		{
			switch (self)
			{
				case Gender.男性:
					return "男性";
				case Gender.女性:
					return "女性";
				default:
					return missing;
			}
		}

		/// <summary>
		/// Gender略称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string Abbrev(this Gender self, string missing = null)
		{
			switch (self)
			{
				case Gender.男性:
					return "男";
				case Gender.女性:
					return "女";
				default:
					return missing;
			}
		}

		/// <summary>
		/// Gender英字名称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string NameEn(this Gender self, string missing = null)
		{
			switch (self)
			{
				case Gender.男性:
					return "Male";
				case Gender.女性:
					return "Female";
				default:
					return missing;
			}
		}

		/// <summary>
		/// Gender英字表示名
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string DisplayNameEn(this Gender self, string missing = null)
		{
			switch (self)
			{
				case Gender.男性:
					return "Male";
				case Gender.女性:
					return "Female";
				default:
					return missing;
			}
		}

		/// <summary>
		/// Gender英字略称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string AbbrevEn(this Gender self, string missing = null)
		{
			switch (self)
			{
				case Gender.男性:
					return "M";
				case Gender.女性:
					return "F";
				default:
					return missing;
			}
		}
		#endregion
		#region UserType拡張メソッド
		/// <summary>
		/// UserTypeを列挙する
		/// </summary>
		/// <returns></returns>
		public static IEnumerable<UserType> UserTypeEnumerator()
		{
			foreach (UserType v in Enum.GetValues(typeof(UserType)))
				yield return v;
		}

		/// <summary>
		/// 整数値からUserTypeへの変換
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing"></param>
		/// <returns></returns>
		public static UserType? ToUserType(this int self, UserType? missing = null)
		{
			switch (self)
			{
				case 1:
					return UserType.職員;
				case 2:
					return UserType.教員;
				case 3:
					return UserType.在学生;
				case 4:
					return UserType.除籍生;
				case 5:
					return UserType.保護者;
				case 99:
					return UserType.他ユーザ;
				default:
					return (UserType?)missing;
			}
		}

		/// <summary>
		/// UserTypeの値取得
		/// </summary>
		/// <param name="self"></param>
		/// <returns></returns>
		public static int Val(this UserType self)
		{
			switch (self)
			{
				case UserType.職員:
					return 1;
				case UserType.教員:
					return 2;
				case UserType.在学生:
					return 3;
				case UserType.除籍生:
					return 4;
				case UserType.保護者:
					return 5;
				case UserType.他ユーザ:
					return 99;
				default:
					throw new Exception("Unknown UserType");
			}
		}

		/// <summary>
		/// UserType名称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string Name(this UserType self, string missing = null)
		{
			switch (self)
			{
				case UserType.職員:
					return "職員";
				case UserType.教員:
					return "教員";
				case UserType.在学生:
					return "在学生";
				case UserType.除籍生:
					return "除籍生";
				case UserType.保護者:
					return "保護者";
				case UserType.他ユーザ:
					return "他ユーザ";
				default:
					return missing;
			}
		}

		/// <summary>
		/// UserType表示名
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string DisplayName(this UserType self, string missing = null)
		{
			switch (self)
			{
				case UserType.職員:
					return "職員";
				case UserType.教員:
					return "教員";
				case UserType.在学生:
					return "在学生";
				case UserType.除籍生:
					return "除籍生";
				case UserType.保護者:
					return "保護者";
				case UserType.他ユーザ:
					return "他ユーザ";
				default:
					return missing;
			}
		}

		/// <summary>
		/// UserType略称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string Abbrev(this UserType self, string missing = null)
		{
			switch (self)
			{
				case UserType.職員:
					return "職";
				case UserType.教員:
					return "教";
				case UserType.在学生:
					return "学";
				case UserType.除籍生:
					return "除";
				case UserType.保護者:
					return "親";
				case UserType.他ユーザ:
					return "他";
				default:
					return missing;
			}
		}

		/// <summary>
		/// UserType英字名称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string NameEn(this UserType self, string missing = null)
		{
			switch (self)
			{
				case UserType.職員:
					return "Cast";
				case UserType.教員:
					return "Teacher";
				case UserType.在学生:
					return "Student";
				case UserType.除籍生:
					return "OutStudent";
				case UserType.保護者:
					return "Parent";
				case UserType.他ユーザ:
					return "User";
				default:
					return missing;
			}
		}

		/// <summary>
		/// UserType英字表示名
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string DisplayNameEn(this UserType self, string missing = null)
		{
			switch (self)
			{
				case UserType.職員:
					return "Cast";
				case UserType.教員:
					return "Teacher";
				case UserType.在学生:
					return "Student";
				case UserType.除籍生:
					return "OutStudent";
				case UserType.保護者:
					return "Parent";
				case UserType.他ユーザ:
					return "User";
				default:
					return missing;
			}
		}

		/// <summary>
		/// UserType英字略称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string AbbrevEn(this UserType self, string missing = null)
		{
			switch (self)
			{
				case UserType.職員:
					return "C";
				case UserType.教員:
					return "T";
				case UserType.在学生:
					return "S";
				case UserType.除籍生:
					return "O";
				case UserType.保護者:
					return "P";
				case UserType.他ユーザ:
					return "U";
				default:
					return missing;
			}
		}
		#endregion
	}
	#endregion

	#region テスト
	/// <summary>
	/// テスト
	/// </summary>
	[DataContract()]
	[Table(Schema="dbo", Name="Test")]
	public partial class Test : TableBase<Test>, INotifyPropertyChanged
	{
		#region uid : int

		private int _uid;
		/// <summary>
		/// ユニークID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), NotNull, PrimaryKey, Identity]
		public  int  uid
		{
			get { return _uid; }
			set
			{
				if (_uid != value)
				{
					BeforeuidChanged(value);
					_uid = value;
					AfteruidChanged();

					OnuidChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeuidChanged(int newValue);
		partial void AfteruidChanged();

		public const string NameOfuid = "uid";

		private static readonly PropertyChangedEventArgs _uidChangedEventArgs = new PropertyChangedEventArgs(NameOfuid);

		private void OnuidChanged()
		{
			OnPropertyChanged(_uidChangedEventArgs);
		}

		#endregion

		#endregion
		#region col01 : char

		private char _col01;
		/// <summary>
		/// col01
		/// </summary>
		[Column(DbType="char(1)", DataType=DataType.Char, Length=1), NotNull]
		public  char  col01
		{
			get { return _col01; }
			set
			{
				if (_col01 != value)
				{
					Beforecol01Changed(value);
					_col01 = value;
					Aftercol01Changed();

					Oncol01Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol01Changed(char newValue);
		partial void Aftercol01Changed();

		public const string NameOfcol01 = "col01";

		private static readonly PropertyChangedEventArgs _col01ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol01);

		private void Oncol01Changed()
		{
			OnPropertyChanged(_col01ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col01_ : char?

		private char? _col01_;
		/// <summary>
		/// col01_
		/// </summary>
		[Column(DbType="char(1)", DataType=DataType.Char, Length=1), Nullable]
		public  char?  col01_
		{
			get { return _col01_; }
			set
			{
				if (_col01_ != value)
				{
					Beforecol01_Changed(value);
					_col01_ = value;
					Aftercol01_Changed();

					Oncol01_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol01_Changed(char? newValue);
		partial void Aftercol01_Changed();

		public const string NameOfcol01_ = "col01_";

		private static readonly PropertyChangedEventArgs _col01_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol01_);

		private void Oncol01_Changed()
		{
			OnPropertyChanged(_col01_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col02 : string

		private string _col02;
		/// <summary>
		/// col02
		/// </summary>
		[Column(DbType="char(10)", DataType=DataType.Char, Length=10), NotNull]
		public  string  col02
		{
			get { return _col02; }
			set
			{
				if (_col02 != value)
				{
					Beforecol02Changed(value);
					_col02 = value;
					Aftercol02Changed();

					Oncol02Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol02Changed(string newValue);
		partial void Aftercol02Changed();

		public const string NameOfcol02 = "col02";

		private static readonly PropertyChangedEventArgs _col02ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol02);

		private void Oncol02Changed()
		{
			OnPropertyChanged(_col02ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col02_ : string

		private string _col02_;
		/// <summary>
		/// col02_
		/// </summary>
		[Column(DbType="char(10)", DataType=DataType.Char, Length=10), Nullable]
		public  string  col02_
		{
			get { return _col02_; }
			set
			{
				if (_col02_ != value)
				{
					Beforecol02_Changed(value);
					_col02_ = value;
					Aftercol02_Changed();

					Oncol02_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol02_Changed(string newValue);
		partial void Aftercol02_Changed();

		public const string NameOfcol02_ = "col02_";

		private static readonly PropertyChangedEventArgs _col02_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol02_);

		private void Oncol02_Changed()
		{
			OnPropertyChanged(_col02_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col03 : string

		private string _col03;
		/// <summary>
		/// col03
		/// </summary>
		[Column(DbType="varchar(20)", DataType=DataType.VarChar, Length=20), NotNull]
		public  string  col03
		{
			get { return _col03; }
			set
			{
				if (_col03 != value)
				{
					Beforecol03Changed(value);
					_col03 = value;
					Aftercol03Changed();

					Oncol03Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol03Changed(string newValue);
		partial void Aftercol03Changed();

		public const string NameOfcol03 = "col03";

		private static readonly PropertyChangedEventArgs _col03ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol03);

		private void Oncol03Changed()
		{
			OnPropertyChanged(_col03ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col03_ : string

		private string _col03_;
		/// <summary>
		/// col03_
		/// </summary>
		[Column(DbType="varchar(20)", DataType=DataType.VarChar, Length=20), Nullable]
		public  string  col03_
		{
			get { return _col03_; }
			set
			{
				if (_col03_ != value)
				{
					Beforecol03_Changed(value);
					_col03_ = value;
					Aftercol03_Changed();

					Oncol03_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol03_Changed(string newValue);
		partial void Aftercol03_Changed();

		public const string NameOfcol03_ = "col03_";

		private static readonly PropertyChangedEventArgs _col03_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol03_);

		private void Oncol03_Changed()
		{
			OnPropertyChanged(_col03_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col04 : string

		private string _col04;
		/// <summary>
		/// col04
		/// </summary>
		[Column(DbType="text", DataType=DataType.Text), NotNull]
		public  string  col04
		{
			get { return _col04; }
			set
			{
				if (_col04 != value)
				{
					Beforecol04Changed(value);
					_col04 = value;
					Aftercol04Changed();

					Oncol04Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol04Changed(string newValue);
		partial void Aftercol04Changed();

		public const string NameOfcol04 = "col04";

		private static readonly PropertyChangedEventArgs _col04ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol04);

		private void Oncol04Changed()
		{
			OnPropertyChanged(_col04ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col04_ : string

		private string _col04_;
		/// <summary>
		/// col04_
		/// </summary>
		[Column(DbType="text", DataType=DataType.Text), Nullable]
		public  string  col04_
		{
			get { return _col04_; }
			set
			{
				if (_col04_ != value)
				{
					Beforecol04_Changed(value);
					_col04_ = value;
					Aftercol04_Changed();

					Oncol04_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol04_Changed(string newValue);
		partial void Aftercol04_Changed();

		public const string NameOfcol04_ = "col04_";

		private static readonly PropertyChangedEventArgs _col04_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol04_);

		private void Oncol04_Changed()
		{
			OnPropertyChanged(_col04_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col05 : char

		private char _col05;
		/// <summary>
		/// col05
		/// </summary>
		[Column(DbType="nchar(1)", DataType=DataType.NChar, Length=1), NotNull]
		public  char  col05
		{
			get { return _col05; }
			set
			{
				if (_col05 != value)
				{
					Beforecol05Changed(value);
					_col05 = value;
					Aftercol05Changed();

					Oncol05Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol05Changed(char newValue);
		partial void Aftercol05Changed();

		public const string NameOfcol05 = "col05";

		private static readonly PropertyChangedEventArgs _col05ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol05);

		private void Oncol05Changed()
		{
			OnPropertyChanged(_col05ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col05_ : char?

		private char? _col05_;
		/// <summary>
		/// col05_
		/// </summary>
		[Column(DbType="nchar(1)", DataType=DataType.NChar, Length=1), Nullable]
		public  char?  col05_
		{
			get { return _col05_; }
			set
			{
				if (_col05_ != value)
				{
					Beforecol05_Changed(value);
					_col05_ = value;
					Aftercol05_Changed();

					Oncol05_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol05_Changed(char? newValue);
		partial void Aftercol05_Changed();

		public const string NameOfcol05_ = "col05_";

		private static readonly PropertyChangedEventArgs _col05_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol05_);

		private void Oncol05_Changed()
		{
			OnPropertyChanged(_col05_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col06 : string

		private string _col06;
		/// <summary>
		/// col06
		/// </summary>
		[Column(DbType="nchar(10)", DataType=DataType.NChar, Length=10), NotNull]
		public  string  col06
		{
			get { return _col06; }
			set
			{
				if (_col06 != value)
				{
					Beforecol06Changed(value);
					_col06 = value;
					Aftercol06Changed();

					Oncol06Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol06Changed(string newValue);
		partial void Aftercol06Changed();

		public const string NameOfcol06 = "col06";

		private static readonly PropertyChangedEventArgs _col06ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol06);

		private void Oncol06Changed()
		{
			OnPropertyChanged(_col06ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col06_ : string

		private string _col06_;
		/// <summary>
		/// col06_
		/// </summary>
		[Column(DbType="nchar(10)", DataType=DataType.NChar, Length=10), Nullable]
		public  string  col06_
		{
			get { return _col06_; }
			set
			{
				if (_col06_ != value)
				{
					Beforecol06_Changed(value);
					_col06_ = value;
					Aftercol06_Changed();

					Oncol06_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol06_Changed(string newValue);
		partial void Aftercol06_Changed();

		public const string NameOfcol06_ = "col06_";

		private static readonly PropertyChangedEventArgs _col06_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol06_);

		private void Oncol06_Changed()
		{
			OnPropertyChanged(_col06_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col07 : string

		private string _col07;
		/// <summary>
		/// col07
		/// </summary>
		[Column(DbType="nvarchar(20)", DataType=DataType.NVarChar, Length=20), NotNull]
		public  string  col07
		{
			get { return _col07; }
			set
			{
				if (_col07 != value)
				{
					Beforecol07Changed(value);
					_col07 = value;
					Aftercol07Changed();

					Oncol07Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol07Changed(string newValue);
		partial void Aftercol07Changed();

		public const string NameOfcol07 = "col07";

		private static readonly PropertyChangedEventArgs _col07ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol07);

		private void Oncol07Changed()
		{
			OnPropertyChanged(_col07ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col07_ : string

		private string _col07_;
		/// <summary>
		/// col07_
		/// </summary>
		[Column(DbType="nvarchar(20)", DataType=DataType.NVarChar, Length=20), Nullable]
		public  string  col07_
		{
			get { return _col07_; }
			set
			{
				if (_col07_ != value)
				{
					Beforecol07_Changed(value);
					_col07_ = value;
					Aftercol07_Changed();

					Oncol07_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol07_Changed(string newValue);
		partial void Aftercol07_Changed();

		public const string NameOfcol07_ = "col07_";

		private static readonly PropertyChangedEventArgs _col07_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol07_);

		private void Oncol07_Changed()
		{
			OnPropertyChanged(_col07_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col08 : string

		private string _col08;
		/// <summary>
		/// col08
		/// </summary>
		[Column(DbType="ntext", DataType=DataType.NText), NotNull]
		public  string  col08
		{
			get { return _col08; }
			set
			{
				if (_col08 != value)
				{
					Beforecol08Changed(value);
					_col08 = value;
					Aftercol08Changed();

					Oncol08Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol08Changed(string newValue);
		partial void Aftercol08Changed();

		public const string NameOfcol08 = "col08";

		private static readonly PropertyChangedEventArgs _col08ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol08);

		private void Oncol08Changed()
		{
			OnPropertyChanged(_col08ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col08_ : string

		private string _col08_;
		/// <summary>
		/// col08_
		/// </summary>
		[Column(DbType="ntext", DataType=DataType.NText), Nullable]
		public  string  col08_
		{
			get { return _col08_; }
			set
			{
				if (_col08_ != value)
				{
					Beforecol08_Changed(value);
					_col08_ = value;
					Aftercol08_Changed();

					Oncol08_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol08_Changed(string newValue);
		partial void Aftercol08_Changed();

		public const string NameOfcol08_ = "col08_";

		private static readonly PropertyChangedEventArgs _col08_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol08_);

		private void Oncol08_Changed()
		{
			OnPropertyChanged(_col08_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col09 : byte[]

		private byte[] _col09;
		/// <summary>
		/// col09
		/// </summary>
		[Column(DbType="binary(50)", DataType=DataType.Binary), NotNull]
		public  byte[]  col09
		{
			get { return _col09; }
			set
			{
				if (_col09 != value)
				{
					Beforecol09Changed(value);
					_col09 = value;
					Aftercol09Changed();

					Oncol09Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol09Changed(byte[] newValue);
		partial void Aftercol09Changed();

		public const string NameOfcol09 = "col09";

		private static readonly PropertyChangedEventArgs _col09ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol09);

		private void Oncol09Changed()
		{
			OnPropertyChanged(_col09ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col09_ : byte[]

		private byte[] _col09_;
		/// <summary>
		/// col09_
		/// </summary>
		[Column(DbType="binary(50)", DataType=DataType.Binary), Nullable]
		public  byte[]  col09_
		{
			get { return _col09_; }
			set
			{
				if (_col09_ != value)
				{
					Beforecol09_Changed(value);
					_col09_ = value;
					Aftercol09_Changed();

					Oncol09_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol09_Changed(byte[] newValue);
		partial void Aftercol09_Changed();

		public const string NameOfcol09_ = "col09_";

		private static readonly PropertyChangedEventArgs _col09_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol09_);

		private void Oncol09_Changed()
		{
			OnPropertyChanged(_col09_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col10 : byte[]

		private byte[] _col10;
		/// <summary>
		/// col10
		/// </summary>
		[Column(DbType="varbinary(50)", DataType=DataType.VarBinary), NotNull]
		public  byte[]  col10
		{
			get { return _col10; }
			set
			{
				if (_col10 != value)
				{
					Beforecol10Changed(value);
					_col10 = value;
					Aftercol10Changed();

					Oncol10Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol10Changed(byte[] newValue);
		partial void Aftercol10Changed();

		public const string NameOfcol10 = "col10";

		private static readonly PropertyChangedEventArgs _col10ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol10);

		private void Oncol10Changed()
		{
			OnPropertyChanged(_col10ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col10_ : byte[]

		private byte[] _col10_;
		/// <summary>
		/// col10_
		/// </summary>
		[Column(DbType="varbinary(50)", DataType=DataType.VarBinary), Nullable]
		public  byte[]  col10_
		{
			get { return _col10_; }
			set
			{
				if (_col10_ != value)
				{
					Beforecol10_Changed(value);
					_col10_ = value;
					Aftercol10_Changed();

					Oncol10_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol10_Changed(byte[] newValue);
		partial void Aftercol10_Changed();

		public const string NameOfcol10_ = "col10_";

		private static readonly PropertyChangedEventArgs _col10_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol10_);

		private void Oncol10_Changed()
		{
			OnPropertyChanged(_col10_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col11 : byte[]

		private byte[] _col11;
		/// <summary>
		/// col11
		/// </summary>
		[Column(DbType="image", DataType=DataType.Image), NotNull]
		public  byte[]  col11
		{
			get { return _col11; }
			set
			{
				if (_col11 != value)
				{
					Beforecol11Changed(value);
					_col11 = value;
					Aftercol11Changed();

					Oncol11Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol11Changed(byte[] newValue);
		partial void Aftercol11Changed();

		public const string NameOfcol11 = "col11";

		private static readonly PropertyChangedEventArgs _col11ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol11);

		private void Oncol11Changed()
		{
			OnPropertyChanged(_col11ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col11_ : byte[]

		private byte[] _col11_;
		/// <summary>
		/// col11_
		/// </summary>
		[Column(DbType="image", DataType=DataType.Image), Nullable]
		public  byte[]  col11_
		{
			get { return _col11_; }
			set
			{
				if (_col11_ != value)
				{
					Beforecol11_Changed(value);
					_col11_ = value;
					Aftercol11_Changed();

					Oncol11_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol11_Changed(byte[] newValue);
		partial void Aftercol11_Changed();

		public const string NameOfcol11_ = "col11_";

		private static readonly PropertyChangedEventArgs _col11_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol11_);

		private void Oncol11_Changed()
		{
			OnPropertyChanged(_col11_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col12 : bool

		private bool _col12;
		/// <summary>
		/// col12
		/// </summary>
		[Column(DbType="bit", DataType=DataType.Boolean), NotNull]
		public  bool  col12
		{
			get { return _col12; }
			set
			{
				if (_col12 != value)
				{
					Beforecol12Changed(value);
					_col12 = value;
					Aftercol12Changed();

					Oncol12Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol12Changed(bool newValue);
		partial void Aftercol12Changed();

		public const string NameOfcol12 = "col12";

		private static readonly PropertyChangedEventArgs _col12ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol12);

		private void Oncol12Changed()
		{
			OnPropertyChanged(_col12ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col12_ : bool?

		private bool? _col12_;
		/// <summary>
		/// col12_
		/// </summary>
		[Column(DbType="bit", DataType=DataType.Boolean), Nullable]
		public  bool?  col12_
		{
			get { return _col12_; }
			set
			{
				if (_col12_ != value)
				{
					Beforecol12_Changed(value);
					_col12_ = value;
					Aftercol12_Changed();

					Oncol12_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol12_Changed(bool? newValue);
		partial void Aftercol12_Changed();

		public const string NameOfcol12_ = "col12_";

		private static readonly PropertyChangedEventArgs _col12_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol12_);

		private void Oncol12_Changed()
		{
			OnPropertyChanged(_col12_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col13 : Guid

		private Guid _col13;
		/// <summary>
		/// col13
		/// </summary>
		[Column(DbType="uniqueidentifier", DataType=DataType.Guid), NotNull]
		public  Guid  col13
		{
			get { return _col13; }
			set
			{
				if (_col13 != value)
				{
					Beforecol13Changed(value);
					_col13 = value;
					Aftercol13Changed();

					Oncol13Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol13Changed(Guid newValue);
		partial void Aftercol13Changed();

		public const string NameOfcol13 = "col13";

		private static readonly PropertyChangedEventArgs _col13ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol13);

		private void Oncol13Changed()
		{
			OnPropertyChanged(_col13ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col13_ : Guid?

		private Guid? _col13_;
		/// <summary>
		/// col13_
		/// </summary>
		[Column(DbType="uniqueidentifier", DataType=DataType.Guid), Nullable]
		public  Guid?  col13_
		{
			get { return _col13_; }
			set
			{
				if (_col13_ != value)
				{
					Beforecol13_Changed(value);
					_col13_ = value;
					Aftercol13_Changed();

					Oncol13_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol13_Changed(Guid? newValue);
		partial void Aftercol13_Changed();

		public const string NameOfcol13_ = "col13_";

		private static readonly PropertyChangedEventArgs _col13_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol13_);

		private void Oncol13_Changed()
		{
			OnPropertyChanged(_col13_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col14 : Int16

		private Int16 _col14;
		/// <summary>
		/// col14
		/// </summary>
		[Column(DbType="smallint", DataType=DataType.Int16), NotNull]
		public  Int16  col14
		{
			get { return _col14; }
			set
			{
				if (_col14 != value)
				{
					Beforecol14Changed(value);
					_col14 = value;
					Aftercol14Changed();

					Oncol14Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol14Changed(Int16 newValue);
		partial void Aftercol14Changed();

		public const string NameOfcol14 = "col14";

		private static readonly PropertyChangedEventArgs _col14ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol14);

		private void Oncol14Changed()
		{
			OnPropertyChanged(_col14ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col14_ : Int16?

		private Int16? _col14_;
		/// <summary>
		/// col14_
		/// </summary>
		[Column(DbType="smallint", DataType=DataType.Int16), Nullable]
		public  Int16?  col14_
		{
			get { return _col14_; }
			set
			{
				if (_col14_ != value)
				{
					Beforecol14_Changed(value);
					_col14_ = value;
					Aftercol14_Changed();

					Oncol14_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol14_Changed(Int16? newValue);
		partial void Aftercol14_Changed();

		public const string NameOfcol14_ = "col14_";

		private static readonly PropertyChangedEventArgs _col14_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol14_);

		private void Oncol14_Changed()
		{
			OnPropertyChanged(_col14_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col15 : int

		private int _col15;
		/// <summary>
		/// col15
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), NotNull]
		public  int  col15
		{
			get { return _col15; }
			set
			{
				if (_col15 != value)
				{
					Beforecol15Changed(value);
					_col15 = value;
					Aftercol15Changed();

					Oncol15Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol15Changed(int newValue);
		partial void Aftercol15Changed();

		public const string NameOfcol15 = "col15";

		private static readonly PropertyChangedEventArgs _col15ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol15);

		private void Oncol15Changed()
		{
			OnPropertyChanged(_col15ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col15_ : int?

		private int? _col15_;
		/// <summary>
		/// col15_
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), Nullable]
		public  int?  col15_
		{
			get { return _col15_; }
			set
			{
				if (_col15_ != value)
				{
					Beforecol15_Changed(value);
					_col15_ = value;
					Aftercol15_Changed();

					Oncol15_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol15_Changed(int? newValue);
		partial void Aftercol15_Changed();

		public const string NameOfcol15_ = "col15_";

		private static readonly PropertyChangedEventArgs _col15_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol15_);

		private void Oncol15_Changed()
		{
			OnPropertyChanged(_col15_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col16 : Int64

		private Int64 _col16;
		/// <summary>
		/// col16
		/// </summary>
		[Column(DbType="bigint", DataType=DataType.Int64), NotNull]
		public  Int64  col16
		{
			get { return _col16; }
			set
			{
				if (_col16 != value)
				{
					Beforecol16Changed(value);
					_col16 = value;
					Aftercol16Changed();

					Oncol16Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol16Changed(Int64 newValue);
		partial void Aftercol16Changed();

		public const string NameOfcol16 = "col16";

		private static readonly PropertyChangedEventArgs _col16ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol16);

		private void Oncol16Changed()
		{
			OnPropertyChanged(_col16ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col16_ : Int64?

		private Int64? _col16_;
		/// <summary>
		/// col16_
		/// </summary>
		[Column(DbType="bigint", DataType=DataType.Int64), Nullable]
		public  Int64?  col16_
		{
			get { return _col16_; }
			set
			{
				if (_col16_ != value)
				{
					Beforecol16_Changed(value);
					_col16_ = value;
					Aftercol16_Changed();

					Oncol16_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol16_Changed(Int64? newValue);
		partial void Aftercol16_Changed();

		public const string NameOfcol16_ = "col16_";

		private static readonly PropertyChangedEventArgs _col16_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol16_);

		private void Oncol16_Changed()
		{
			OnPropertyChanged(_col16_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col17 : byte

		private byte _col17;
		/// <summary>
		/// col17
		/// </summary>
		[Column(DbType="tinyint", DataType=DataType.Byte), NotNull]
		public  byte  col17
		{
			get { return _col17; }
			set
			{
				if (_col17 != value)
				{
					Beforecol17Changed(value);
					_col17 = value;
					Aftercol17Changed();

					Oncol17Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol17Changed(byte newValue);
		partial void Aftercol17Changed();

		public const string NameOfcol17 = "col17";

		private static readonly PropertyChangedEventArgs _col17ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol17);

		private void Oncol17Changed()
		{
			OnPropertyChanged(_col17ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col17_ : byte?

		private byte? _col17_;
		/// <summary>
		/// col17_
		/// </summary>
		[Column(DbType="tinyint", DataType=DataType.Byte), Nullable]
		public  byte?  col17_
		{
			get { return _col17_; }
			set
			{
				if (_col17_ != value)
				{
					Beforecol17_Changed(value);
					_col17_ = value;
					Aftercol17_Changed();

					Oncol17_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol17_Changed(byte? newValue);
		partial void Aftercol17_Changed();

		public const string NameOfcol17_ = "col17_";

		private static readonly PropertyChangedEventArgs _col17_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol17_);

		private void Oncol17_Changed()
		{
			OnPropertyChanged(_col17_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col18 : float

		private float _col18;
		/// <summary>
		/// col18
		/// </summary>
		[Column(DbType="float", DataType=DataType.Single), NotNull]
		public  float  col18
		{
			get { return _col18; }
			set
			{
				if (_col18 != value)
				{
					Beforecol18Changed(value);
					_col18 = value;
					Aftercol18Changed();

					Oncol18Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol18Changed(float newValue);
		partial void Aftercol18Changed();

		public const string NameOfcol18 = "col18";

		private static readonly PropertyChangedEventArgs _col18ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol18);

		private void Oncol18Changed()
		{
			OnPropertyChanged(_col18ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col18_ : float?

		private float? _col18_;
		/// <summary>
		/// col18_
		/// </summary>
		[Column(DbType="float", DataType=DataType.Single), Nullable]
		public  float?  col18_
		{
			get { return _col18_; }
			set
			{
				if (_col18_ != value)
				{
					Beforecol18_Changed(value);
					_col18_ = value;
					Aftercol18_Changed();

					Oncol18_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol18_Changed(float? newValue);
		partial void Aftercol18_Changed();

		public const string NameOfcol18_ = "col18_";

		private static readonly PropertyChangedEventArgs _col18_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol18_);

		private void Oncol18_Changed()
		{
			OnPropertyChanged(_col18_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col19 : decimal

		private decimal _col19;
		/// <summary>
		/// col19
		/// </summary>
		[Column(DbType="decimal(11,8)", DataType=DataType.Decimal, Precision=11, Scale=8), NotNull]
		public  decimal  col19
		{
			get { return _col19; }
			set
			{
				if (_col19 != value)
				{
					Beforecol19Changed(value);
					_col19 = value;
					Aftercol19Changed();

					Oncol19Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol19Changed(decimal newValue);
		partial void Aftercol19Changed();

		public const string NameOfcol19 = "col19";

		private static readonly PropertyChangedEventArgs _col19ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol19);

		private void Oncol19Changed()
		{
			OnPropertyChanged(_col19ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col19_ : decimal?

		private decimal? _col19_;
		/// <summary>
		/// col19_
		/// </summary>
		[Column(DbType="decimal(11,8)", DataType=DataType.Decimal, Precision=11, Scale=8), Nullable]
		public  decimal?  col19_
		{
			get { return _col19_; }
			set
			{
				if (_col19_ != value)
				{
					Beforecol19_Changed(value);
					_col19_ = value;
					Aftercol19_Changed();

					Oncol19_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol19_Changed(decimal? newValue);
		partial void Aftercol19_Changed();

		public const string NameOfcol19_ = "col19_";

		private static readonly PropertyChangedEventArgs _col19_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol19_);

		private void Oncol19_Changed()
		{
			OnPropertyChanged(_col19_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col20 : decimal

		private decimal _col20;
		/// <summary>
		/// col20
		/// </summary>
		[Column(DbType="decimal(11,8)", DataType=DataType.Decimal, Precision=11, Scale=8), NotNull]
		public  decimal  col20
		{
			get { return _col20; }
			set
			{
				if (_col20 != value)
				{
					Beforecol20Changed(value);
					_col20 = value;
					Aftercol20Changed();

					Oncol20Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol20Changed(decimal newValue);
		partial void Aftercol20Changed();

		public const string NameOfcol20 = "col20";

		private static readonly PropertyChangedEventArgs _col20ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol20);

		private void Oncol20Changed()
		{
			OnPropertyChanged(_col20ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col20_ : decimal?

		private decimal? _col20_;
		/// <summary>
		/// col20_
		/// </summary>
		[Column(DbType="decimal(11,8)", DataType=DataType.Decimal, Precision=11, Scale=8), Nullable]
		public  decimal?  col20_
		{
			get { return _col20_; }
			set
			{
				if (_col20_ != value)
				{
					Beforecol20_Changed(value);
					_col20_ = value;
					Aftercol20_Changed();

					Oncol20_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol20_Changed(decimal? newValue);
		partial void Aftercol20_Changed();

		public const string NameOfcol20_ = "col20_";

		private static readonly PropertyChangedEventArgs _col20_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol20_);

		private void Oncol20_Changed()
		{
			OnPropertyChanged(_col20_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col21 : decimal

		private decimal _col21;
		/// <summary>
		/// col21
		/// </summary>
		[Column(DbType="money", DataType=DataType.Money), NotNull]
		public  decimal  col21
		{
			get { return _col21; }
			set
			{
				if (_col21 != value)
				{
					Beforecol21Changed(value);
					_col21 = value;
					Aftercol21Changed();

					Oncol21Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol21Changed(decimal newValue);
		partial void Aftercol21Changed();

		public const string NameOfcol21 = "col21";

		private static readonly PropertyChangedEventArgs _col21ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol21);

		private void Oncol21Changed()
		{
			OnPropertyChanged(_col21ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col21_ : decimal?

		private decimal? _col21_;
		/// <summary>
		/// col21_
		/// </summary>
		[Column(DbType="money", DataType=DataType.Money), Nullable]
		public  decimal?  col21_
		{
			get { return _col21_; }
			set
			{
				if (_col21_ != value)
				{
					Beforecol21_Changed(value);
					_col21_ = value;
					Aftercol21_Changed();

					Oncol21_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol21_Changed(decimal? newValue);
		partial void Aftercol21_Changed();

		public const string NameOfcol21_ = "col21_";

		private static readonly PropertyChangedEventArgs _col21_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol21_);

		private void Oncol21_Changed()
		{
			OnPropertyChanged(_col21_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col22 : decimal

		private decimal _col22;
		/// <summary>
		/// col22
		/// </summary>
		[Column(DbType="smallmoney", DataType=DataType.SmallMoney), NotNull]
		public  decimal  col22
		{
			get { return _col22; }
			set
			{
				if (_col22 != value)
				{
					Beforecol22Changed(value);
					_col22 = value;
					Aftercol22Changed();

					Oncol22Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol22Changed(decimal newValue);
		partial void Aftercol22Changed();

		public const string NameOfcol22 = "col22";

		private static readonly PropertyChangedEventArgs _col22ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol22);

		private void Oncol22Changed()
		{
			OnPropertyChanged(_col22ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col22_ : decimal?

		private decimal? _col22_;
		/// <summary>
		/// col22_
		/// </summary>
		[Column(DbType="smallmoney", DataType=DataType.SmallMoney), Nullable]
		public  decimal?  col22_
		{
			get { return _col22_; }
			set
			{
				if (_col22_ != value)
				{
					Beforecol22_Changed(value);
					_col22_ = value;
					Aftercol22_Changed();

					Oncol22_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol22_Changed(decimal? newValue);
		partial void Aftercol22_Changed();

		public const string NameOfcol22_ = "col22_";

		private static readonly PropertyChangedEventArgs _col22_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol22_);

		private void Oncol22_Changed()
		{
			OnPropertyChanged(_col22_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col23 : DateTime

		private DateTime _col23;
		/// <summary>
		/// col23
		/// </summary>
		[Column(DbType="date", DataType=DataType.Date), NotNull]
		public  DateTime  col23
		{
			get { return _col23; }
			set
			{
				if (_col23 != value)
				{
					Beforecol23Changed(value);
					_col23 = value;
					Aftercol23Changed();

					Oncol23Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol23Changed(DateTime newValue);
		partial void Aftercol23Changed();

		public const string NameOfcol23 = "col23";

		private static readonly PropertyChangedEventArgs _col23ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol23);

		private void Oncol23Changed()
		{
			OnPropertyChanged(_col23ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col23_ : DateTime?

		private DateTime? _col23_;
		/// <summary>
		/// col23_
		/// </summary>
		[Column(DbType="date", DataType=DataType.Date), Nullable]
		public  DateTime?  col23_
		{
			get { return _col23_; }
			set
			{
				if (_col23_ != value)
				{
					Beforecol23_Changed(value);
					_col23_ = value;
					Aftercol23_Changed();

					Oncol23_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol23_Changed(DateTime? newValue);
		partial void Aftercol23_Changed();

		public const string NameOfcol23_ = "col23_";

		private static readonly PropertyChangedEventArgs _col23_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol23_);

		private void Oncol23_Changed()
		{
			OnPropertyChanged(_col23_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col24 : TimeSpan

		private TimeSpan _col24;
		/// <summary>
		/// col24
		/// </summary>
		[Column(DbType="time(7)", DataType=DataType.Time, Precision=7), NotNull]
		public  TimeSpan  col24
		{
			get { return _col24; }
			set
			{
				if (_col24 != value)
				{
					Beforecol24Changed(value);
					_col24 = value;
					Aftercol24Changed();

					Oncol24Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol24Changed(TimeSpan newValue);
		partial void Aftercol24Changed();

		public const string NameOfcol24 = "col24";

		private static readonly PropertyChangedEventArgs _col24ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol24);

		private void Oncol24Changed()
		{
			OnPropertyChanged(_col24ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col24_ : TimeSpan?

		private TimeSpan? _col24_;
		/// <summary>
		/// col24_
		/// </summary>
		[Column(DbType="time(7)", DataType=DataType.Time, Precision=7), Nullable]
		public  TimeSpan?  col24_
		{
			get { return _col24_; }
			set
			{
				if (_col24_ != value)
				{
					Beforecol24_Changed(value);
					_col24_ = value;
					Aftercol24_Changed();

					Oncol24_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol24_Changed(TimeSpan? newValue);
		partial void Aftercol24_Changed();

		public const string NameOfcol24_ = "col24_";

		private static readonly PropertyChangedEventArgs _col24_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol24_);

		private void Oncol24_Changed()
		{
			OnPropertyChanged(_col24_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col25 : DateTime

		private DateTime _col25;
		/// <summary>
		/// col25
		/// </summary>
		[Column(DbType="datetime", DataType=DataType.DateTime), NotNull]
		public  DateTime  col25
		{
			get { return _col25; }
			set
			{
				if (_col25 != value)
				{
					Beforecol25Changed(value);
					_col25 = value;
					Aftercol25Changed();

					Oncol25Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol25Changed(DateTime newValue);
		partial void Aftercol25Changed();

		public const string NameOfcol25 = "col25";

		private static readonly PropertyChangedEventArgs _col25ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol25);

		private void Oncol25Changed()
		{
			OnPropertyChanged(_col25ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col25_ : DateTime?

		private DateTime? _col25_;
		/// <summary>
		/// col25_
		/// </summary>
		[Column(DbType="datetime", DataType=DataType.DateTime), Nullable]
		public  DateTime?  col25_
		{
			get { return _col25_; }
			set
			{
				if (_col25_ != value)
				{
					Beforecol25_Changed(value);
					_col25_ = value;
					Aftercol25_Changed();

					Oncol25_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol25_Changed(DateTime? newValue);
		partial void Aftercol25_Changed();

		public const string NameOfcol25_ = "col25_";

		private static readonly PropertyChangedEventArgs _col25_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol25_);

		private void Oncol25_Changed()
		{
			OnPropertyChanged(_col25_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col26 : DateTime

		private DateTime _col26;
		/// <summary>
		/// col26
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), NotNull]
		public  DateTime  col26
		{
			get { return _col26; }
			set
			{
				if (_col26 != value)
				{
					Beforecol26Changed(value);
					_col26 = value;
					Aftercol26Changed();

					Oncol26Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol26Changed(DateTime newValue);
		partial void Aftercol26Changed();

		public const string NameOfcol26 = "col26";

		private static readonly PropertyChangedEventArgs _col26ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol26);

		private void Oncol26Changed()
		{
			OnPropertyChanged(_col26ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col26_ : DateTime?

		private DateTime? _col26_;
		/// <summary>
		/// col26_
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), Nullable]
		public  DateTime?  col26_
		{
			get { return _col26_; }
			set
			{
				if (_col26_ != value)
				{
					Beforecol26_Changed(value);
					_col26_ = value;
					Aftercol26_Changed();

					Oncol26_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol26_Changed(DateTime? newValue);
		partial void Aftercol26_Changed();

		public const string NameOfcol26_ = "col26_";

		private static readonly PropertyChangedEventArgs _col26_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol26_);

		private void Oncol26_Changed()
		{
			OnPropertyChanged(_col26_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col27 : DateTime

		private DateTime _col27;
		/// <summary>
		/// col27
		/// </summary>
		[Column(DbType="smalldatetime", DataType=DataType.SmallDateTime), NotNull]
		public  DateTime  col27
		{
			get { return _col27; }
			set
			{
				if (_col27 != value)
				{
					Beforecol27Changed(value);
					_col27 = value;
					Aftercol27Changed();

					Oncol27Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol27Changed(DateTime newValue);
		partial void Aftercol27Changed();

		public const string NameOfcol27 = "col27";

		private static readonly PropertyChangedEventArgs _col27ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol27);

		private void Oncol27Changed()
		{
			OnPropertyChanged(_col27ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col27_ : DateTime?

		private DateTime? _col27_;
		/// <summary>
		/// col27_
		/// </summary>
		[Column(DbType="smalldatetime", DataType=DataType.SmallDateTime), Nullable]
		public  DateTime?  col27_
		{
			get { return _col27_; }
			set
			{
				if (_col27_ != value)
				{
					Beforecol27_Changed(value);
					_col27_ = value;
					Aftercol27_Changed();

					Oncol27_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol27_Changed(DateTime? newValue);
		partial void Aftercol27_Changed();

		public const string NameOfcol27_ = "col27_";

		private static readonly PropertyChangedEventArgs _col27_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol27_);

		private void Oncol27_Changed()
		{
			OnPropertyChanged(_col27_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col28 : DateTimeOffset

		private DateTimeOffset _col28;
		/// <summary>
		/// col28
		/// </summary>
		[Column(DbType="datetimeoffset(7)", DataType=DataType.DateTimeOffset, Precision=7), NotNull]
		public  DateTimeOffset  col28
		{
			get { return _col28; }
			set
			{
				if (_col28 != value)
				{
					Beforecol28Changed(value);
					_col28 = value;
					Aftercol28Changed();

					Oncol28Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol28Changed(DateTimeOffset newValue);
		partial void Aftercol28Changed();

		public const string NameOfcol28 = "col28";

		private static readonly PropertyChangedEventArgs _col28ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol28);

		private void Oncol28Changed()
		{
			OnPropertyChanged(_col28ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col28_ : DateTimeOffset?

		private DateTimeOffset? _col28_;
		/// <summary>
		/// col28_
		/// </summary>
		[Column(DbType="datetimeoffset(7)", DataType=DataType.DateTimeOffset, Precision=7), Nullable]
		public  DateTimeOffset?  col28_
		{
			get { return _col28_; }
			set
			{
				if (_col28_ != value)
				{
					Beforecol28_Changed(value);
					_col28_ = value;
					Aftercol28_Changed();

					Oncol28_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol28_Changed(DateTimeOffset? newValue);
		partial void Aftercol28_Changed();

		public const string NameOfcol28_ = "col28_";

		private static readonly PropertyChangedEventArgs _col28_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol28_);

		private void Oncol28_Changed()
		{
			OnPropertyChanged(_col28_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col29 : byte[]

		private byte[] _col29;
		/// <summary>
		/// col29
		/// </summary>
		[Column(DbType="timestamp", DataType=DataType.Timestamp, SkipOnInsert=true, SkipOnUpdate=true), NotNull]
		public  byte[]  col29
		{
			get { return _col29; }
			set
			{
				if (_col29 != value)
				{
					Beforecol29Changed(value);
					_col29 = value;
					Aftercol29Changed();

					Oncol29Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol29Changed(byte[] newValue);
		partial void Aftercol29Changed();

		public const string NameOfcol29 = "col29";

		private static readonly PropertyChangedEventArgs _col29ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol29);

		private void Oncol29Changed()
		{
			OnPropertyChanged(_col29ChangedEventArgs);
		}

		#endregion

		#endregion

		#region enum用アクセスラッパー
		#endregion

		#region Association


		#endregion

		#region INotifyPropertyChanged support

		[field : NonSerialized]
		public virtual event PropertyChangedEventHandler PropertyChanged;

		protected void OnPropertyChanged(string propertyName)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected void OnPropertyChanged(PropertyChangedEventArgs arg)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, arg);
			}
		}

		#endregion

	}
	#region テスト条件
	/// <summary>
	/// テスト条件
	/// </summary>
	public partial class TestCondition : ConditionBase<Test>
	{
		#region properties
		#region uid
		public int? uid_eq { get; set; }
		public int? uid_ne { get; set; }
		public int? uid_lt { get; set; }
		public int? uid_gt { get; set; }
		public int? uid_le { get; set; }
		public int? uid_ge { get; set; }
		public IEnumerable<int> uid_in { get; set; }
		public IEnumerable<int> uid_ni { get; set; }
		#endregion
		#region col01
		public char? col01_eq { get; set; }
		public char? col01_ne { get; set; }
		public char? col01_lt { get; set; }
		public char? col01_gt { get; set; }
		public char? col01_le { get; set; }
		public char? col01_ge { get; set; }
		public IEnumerable<char> col01_in { get; set; }
		public IEnumerable<char> col01_ni { get; set; }
		#endregion
		#region col01_
		public char? col01__eq { get; set; }
		public char? col01__ne { get; set; }
		public char? col01__lt { get; set; }
		public char? col01__gt { get; set; }
		public char? col01__le { get; set; }
		public char? col01__ge { get; set; }
		public IEnumerable<char> col01__in { get; set; }
		public IEnumerable<char> col01__ni { get; set; }
		#endregion
		#region col02
		public string col02_eq { get; set; }
		public string col02_ne { get; set; }
		public string col02_lt { get; set; }
		public string col02_gt { get; set; }
		public string col02_le { get; set; }
		public string col02_ge { get; set; }
		public IEnumerable<string> col02_in { get; set; }
		public IEnumerable<string> col02_ni { get; set; }
		#endregion
		#region col02_
		public string col02__eq { get; set; }
		public string col02__ne { get; set; }
		public string col02__lt { get; set; }
		public string col02__gt { get; set; }
		public string col02__le { get; set; }
		public string col02__ge { get; set; }
		public IEnumerable<string> col02__in { get; set; }
		public IEnumerable<string> col02__ni { get; set; }
		#endregion
		#region col03
		public string col03_eq { get; set; }
		public string col03_ne { get; set; }
		public string col03_lt { get; set; }
		public string col03_gt { get; set; }
		public string col03_le { get; set; }
		public string col03_ge { get; set; }
		public IEnumerable<string> col03_in { get; set; }
		public IEnumerable<string> col03_ni { get; set; }
		#endregion
		#region col03_
		public string col03__eq { get; set; }
		public string col03__ne { get; set; }
		public string col03__lt { get; set; }
		public string col03__gt { get; set; }
		public string col03__le { get; set; }
		public string col03__ge { get; set; }
		public IEnumerable<string> col03__in { get; set; }
		public IEnumerable<string> col03__ni { get; set; }
		#endregion
		#region col04
		public string col04_eq { get; set; }
		public string col04_ne { get; set; }
		public string col04_lt { get; set; }
		public string col04_gt { get; set; }
		public string col04_le { get; set; }
		public string col04_ge { get; set; }
		public IEnumerable<string> col04_in { get; set; }
		public IEnumerable<string> col04_ni { get; set; }
		#endregion
		#region col04_
		public string col04__eq { get; set; }
		public string col04__ne { get; set; }
		public string col04__lt { get; set; }
		public string col04__gt { get; set; }
		public string col04__le { get; set; }
		public string col04__ge { get; set; }
		public IEnumerable<string> col04__in { get; set; }
		public IEnumerable<string> col04__ni { get; set; }
		#endregion
		#region col05
		public char? col05_eq { get; set; }
		public char? col05_ne { get; set; }
		public char? col05_lt { get; set; }
		public char? col05_gt { get; set; }
		public char? col05_le { get; set; }
		public char? col05_ge { get; set; }
		public IEnumerable<char> col05_in { get; set; }
		public IEnumerable<char> col05_ni { get; set; }
		#endregion
		#region col05_
		public char? col05__eq { get; set; }
		public char? col05__ne { get; set; }
		public char? col05__lt { get; set; }
		public char? col05__gt { get; set; }
		public char? col05__le { get; set; }
		public char? col05__ge { get; set; }
		public IEnumerable<char> col05__in { get; set; }
		public IEnumerable<char> col05__ni { get; set; }
		#endregion
		#region col06
		public string col06_eq { get; set; }
		public string col06_ne { get; set; }
		public string col06_lt { get; set; }
		public string col06_gt { get; set; }
		public string col06_le { get; set; }
		public string col06_ge { get; set; }
		public IEnumerable<string> col06_in { get; set; }
		public IEnumerable<string> col06_ni { get; set; }
		#endregion
		#region col06_
		public string col06__eq { get; set; }
		public string col06__ne { get; set; }
		public string col06__lt { get; set; }
		public string col06__gt { get; set; }
		public string col06__le { get; set; }
		public string col06__ge { get; set; }
		public IEnumerable<string> col06__in { get; set; }
		public IEnumerable<string> col06__ni { get; set; }
		#endregion
		#region col07
		public string col07_eq { get; set; }
		public string col07_ne { get; set; }
		public string col07_lt { get; set; }
		public string col07_gt { get; set; }
		public string col07_le { get; set; }
		public string col07_ge { get; set; }
		public IEnumerable<string> col07_in { get; set; }
		public IEnumerable<string> col07_ni { get; set; }
		#endregion
		#region col07_
		public string col07__eq { get; set; }
		public string col07__ne { get; set; }
		public string col07__lt { get; set; }
		public string col07__gt { get; set; }
		public string col07__le { get; set; }
		public string col07__ge { get; set; }
		public IEnumerable<string> col07__in { get; set; }
		public IEnumerable<string> col07__ni { get; set; }
		#endregion
		#region col08
		public string col08_eq { get; set; }
		public string col08_ne { get; set; }
		public string col08_lt { get; set; }
		public string col08_gt { get; set; }
		public string col08_le { get; set; }
		public string col08_ge { get; set; }
		public IEnumerable<string> col08_in { get; set; }
		public IEnumerable<string> col08_ni { get; set; }
		#endregion
		#region col08_
		public string col08__eq { get; set; }
		public string col08__ne { get; set; }
		public string col08__lt { get; set; }
		public string col08__gt { get; set; }
		public string col08__le { get; set; }
		public string col08__ge { get; set; }
		public IEnumerable<string> col08__in { get; set; }
		public IEnumerable<string> col08__ni { get; set; }
		#endregion
		#region col09
		public byte[] col09_eq { get; set; }
		public byte[] col09_ne { get; set; }
		public byte[] col09_lt { get; set; }
		public byte[] col09_gt { get; set; }
		public byte[] col09_le { get; set; }
		public byte[] col09_ge { get; set; }
		public IEnumerable<byte[]> col09_in { get; set; }
		public IEnumerable<byte[]> col09_ni { get; set; }
		#endregion
		#region col09_
		public byte[] col09__eq { get; set; }
		public byte[] col09__ne { get; set; }
		public byte[] col09__lt { get; set; }
		public byte[] col09__gt { get; set; }
		public byte[] col09__le { get; set; }
		public byte[] col09__ge { get; set; }
		public IEnumerable<byte[]> col09__in { get; set; }
		public IEnumerable<byte[]> col09__ni { get; set; }
		#endregion
		#region col10
		public byte[] col10_eq { get; set; }
		public byte[] col10_ne { get; set; }
		public byte[] col10_lt { get; set; }
		public byte[] col10_gt { get; set; }
		public byte[] col10_le { get; set; }
		public byte[] col10_ge { get; set; }
		public IEnumerable<byte[]> col10_in { get; set; }
		public IEnumerable<byte[]> col10_ni { get; set; }
		#endregion
		#region col10_
		public byte[] col10__eq { get; set; }
		public byte[] col10__ne { get; set; }
		public byte[] col10__lt { get; set; }
		public byte[] col10__gt { get; set; }
		public byte[] col10__le { get; set; }
		public byte[] col10__ge { get; set; }
		public IEnumerable<byte[]> col10__in { get; set; }
		public IEnumerable<byte[]> col10__ni { get; set; }
		#endregion
		#region col11
		public byte[] col11_eq { get; set; }
		public byte[] col11_ne { get; set; }
		public byte[] col11_lt { get; set; }
		public byte[] col11_gt { get; set; }
		public byte[] col11_le { get; set; }
		public byte[] col11_ge { get; set; }
		public IEnumerable<byte[]> col11_in { get; set; }
		public IEnumerable<byte[]> col11_ni { get; set; }
		#endregion
		#region col11_
		public byte[] col11__eq { get; set; }
		public byte[] col11__ne { get; set; }
		public byte[] col11__lt { get; set; }
		public byte[] col11__gt { get; set; }
		public byte[] col11__le { get; set; }
		public byte[] col11__ge { get; set; }
		public IEnumerable<byte[]> col11__in { get; set; }
		public IEnumerable<byte[]> col11__ni { get; set; }
		#endregion
		#region col12
		public bool? col12_eq { get; set; }
		public bool? col12_ne { get; set; }
		public bool? col12_lt { get; set; }
		public bool? col12_gt { get; set; }
		public bool? col12_le { get; set; }
		public bool? col12_ge { get; set; }
		public IEnumerable<bool> col12_in { get; set; }
		public IEnumerable<bool> col12_ni { get; set; }
		#endregion
		#region col12_
		public bool? col12__eq { get; set; }
		public bool? col12__ne { get; set; }
		public bool? col12__lt { get; set; }
		public bool? col12__gt { get; set; }
		public bool? col12__le { get; set; }
		public bool? col12__ge { get; set; }
		public IEnumerable<bool> col12__in { get; set; }
		public IEnumerable<bool> col12__ni { get; set; }
		#endregion
		#region col13
		public Guid? col13_eq { get; set; }
		public Guid? col13_ne { get; set; }
		public Guid? col13_lt { get; set; }
		public Guid? col13_gt { get; set; }
		public Guid? col13_le { get; set; }
		public Guid? col13_ge { get; set; }
		public IEnumerable<Guid> col13_in { get; set; }
		public IEnumerable<Guid> col13_ni { get; set; }
		#endregion
		#region col13_
		public Guid? col13__eq { get; set; }
		public Guid? col13__ne { get; set; }
		public Guid? col13__lt { get; set; }
		public Guid? col13__gt { get; set; }
		public Guid? col13__le { get; set; }
		public Guid? col13__ge { get; set; }
		public IEnumerable<Guid> col13__in { get; set; }
		public IEnumerable<Guid> col13__ni { get; set; }
		#endregion
		#region col14
		public Int16? col14_eq { get; set; }
		public Int16? col14_ne { get; set; }
		public Int16? col14_lt { get; set; }
		public Int16? col14_gt { get; set; }
		public Int16? col14_le { get; set; }
		public Int16? col14_ge { get; set; }
		public IEnumerable<Int16> col14_in { get; set; }
		public IEnumerable<Int16> col14_ni { get; set; }
		#endregion
		#region col14_
		public Int16? col14__eq { get; set; }
		public Int16? col14__ne { get; set; }
		public Int16? col14__lt { get; set; }
		public Int16? col14__gt { get; set; }
		public Int16? col14__le { get; set; }
		public Int16? col14__ge { get; set; }
		public IEnumerable<Int16> col14__in { get; set; }
		public IEnumerable<Int16> col14__ni { get; set; }
		#endregion
		#region col15
		public int? col15_eq { get; set; }
		public int? col15_ne { get; set; }
		public int? col15_lt { get; set; }
		public int? col15_gt { get; set; }
		public int? col15_le { get; set; }
		public int? col15_ge { get; set; }
		public IEnumerable<int> col15_in { get; set; }
		public IEnumerable<int> col15_ni { get; set; }
		#endregion
		#region col15_
		public int? col15__eq { get; set; }
		public int? col15__ne { get; set; }
		public int? col15__lt { get; set; }
		public int? col15__gt { get; set; }
		public int? col15__le { get; set; }
		public int? col15__ge { get; set; }
		public IEnumerable<int> col15__in { get; set; }
		public IEnumerable<int> col15__ni { get; set; }
		#endregion
		#region col16
		public Int64? col16_eq { get; set; }
		public Int64? col16_ne { get; set; }
		public Int64? col16_lt { get; set; }
		public Int64? col16_gt { get; set; }
		public Int64? col16_le { get; set; }
		public Int64? col16_ge { get; set; }
		public IEnumerable<Int64> col16_in { get; set; }
		public IEnumerable<Int64> col16_ni { get; set; }
		#endregion
		#region col16_
		public Int64? col16__eq { get; set; }
		public Int64? col16__ne { get; set; }
		public Int64? col16__lt { get; set; }
		public Int64? col16__gt { get; set; }
		public Int64? col16__le { get; set; }
		public Int64? col16__ge { get; set; }
		public IEnumerable<Int64> col16__in { get; set; }
		public IEnumerable<Int64> col16__ni { get; set; }
		#endregion
		#region col17
		public byte? col17_eq { get; set; }
		public byte? col17_ne { get; set; }
		public byte? col17_lt { get; set; }
		public byte? col17_gt { get; set; }
		public byte? col17_le { get; set; }
		public byte? col17_ge { get; set; }
		public IEnumerable<byte> col17_in { get; set; }
		public IEnumerable<byte> col17_ni { get; set; }
		#endregion
		#region col17_
		public byte? col17__eq { get; set; }
		public byte? col17__ne { get; set; }
		public byte? col17__lt { get; set; }
		public byte? col17__gt { get; set; }
		public byte? col17__le { get; set; }
		public byte? col17__ge { get; set; }
		public IEnumerable<byte> col17__in { get; set; }
		public IEnumerable<byte> col17__ni { get; set; }
		#endregion
		#region col18
		public float? col18_eq { get; set; }
		public float? col18_ne { get; set; }
		public float? col18_lt { get; set; }
		public float? col18_gt { get; set; }
		public float? col18_le { get; set; }
		public float? col18_ge { get; set; }
		public IEnumerable<float> col18_in { get; set; }
		public IEnumerable<float> col18_ni { get; set; }
		#endregion
		#region col18_
		public float? col18__eq { get; set; }
		public float? col18__ne { get; set; }
		public float? col18__lt { get; set; }
		public float? col18__gt { get; set; }
		public float? col18__le { get; set; }
		public float? col18__ge { get; set; }
		public IEnumerable<float> col18__in { get; set; }
		public IEnumerable<float> col18__ni { get; set; }
		#endregion
		#region col19
		public decimal? col19_eq { get; set; }
		public decimal? col19_ne { get; set; }
		public decimal? col19_lt { get; set; }
		public decimal? col19_gt { get; set; }
		public decimal? col19_le { get; set; }
		public decimal? col19_ge { get; set; }
		public IEnumerable<decimal> col19_in { get; set; }
		public IEnumerable<decimal> col19_ni { get; set; }
		#endregion
		#region col19_
		public decimal? col19__eq { get; set; }
		public decimal? col19__ne { get; set; }
		public decimal? col19__lt { get; set; }
		public decimal? col19__gt { get; set; }
		public decimal? col19__le { get; set; }
		public decimal? col19__ge { get; set; }
		public IEnumerable<decimal> col19__in { get; set; }
		public IEnumerable<decimal> col19__ni { get; set; }
		#endregion
		#region col20
		public decimal? col20_eq { get; set; }
		public decimal? col20_ne { get; set; }
		public decimal? col20_lt { get; set; }
		public decimal? col20_gt { get; set; }
		public decimal? col20_le { get; set; }
		public decimal? col20_ge { get; set; }
		public IEnumerable<decimal> col20_in { get; set; }
		public IEnumerable<decimal> col20_ni { get; set; }
		#endregion
		#region col20_
		public decimal? col20__eq { get; set; }
		public decimal? col20__ne { get; set; }
		public decimal? col20__lt { get; set; }
		public decimal? col20__gt { get; set; }
		public decimal? col20__le { get; set; }
		public decimal? col20__ge { get; set; }
		public IEnumerable<decimal> col20__in { get; set; }
		public IEnumerable<decimal> col20__ni { get; set; }
		#endregion
		#region col21
		public decimal? col21_eq { get; set; }
		public decimal? col21_ne { get; set; }
		public decimal? col21_lt { get; set; }
		public decimal? col21_gt { get; set; }
		public decimal? col21_le { get; set; }
		public decimal? col21_ge { get; set; }
		public IEnumerable<decimal> col21_in { get; set; }
		public IEnumerable<decimal> col21_ni { get; set; }
		#endregion
		#region col21_
		public decimal? col21__eq { get; set; }
		public decimal? col21__ne { get; set; }
		public decimal? col21__lt { get; set; }
		public decimal? col21__gt { get; set; }
		public decimal? col21__le { get; set; }
		public decimal? col21__ge { get; set; }
		public IEnumerable<decimal> col21__in { get; set; }
		public IEnumerable<decimal> col21__ni { get; set; }
		#endregion
		#region col22
		public decimal? col22_eq { get; set; }
		public decimal? col22_ne { get; set; }
		public decimal? col22_lt { get; set; }
		public decimal? col22_gt { get; set; }
		public decimal? col22_le { get; set; }
		public decimal? col22_ge { get; set; }
		public IEnumerable<decimal> col22_in { get; set; }
		public IEnumerable<decimal> col22_ni { get; set; }
		#endregion
		#region col22_
		public decimal? col22__eq { get; set; }
		public decimal? col22__ne { get; set; }
		public decimal? col22__lt { get; set; }
		public decimal? col22__gt { get; set; }
		public decimal? col22__le { get; set; }
		public decimal? col22__ge { get; set; }
		public IEnumerable<decimal> col22__in { get; set; }
		public IEnumerable<decimal> col22__ni { get; set; }
		#endregion
		#region col23
		public DateTime? col23_eq { get; set; }
		public DateTime? col23_ne { get; set; }
		public DateTime? col23_lt { get; set; }
		public DateTime? col23_gt { get; set; }
		public DateTime? col23_le { get; set; }
		public DateTime? col23_ge { get; set; }
		public IEnumerable<DateTime> col23_in { get; set; }
		public IEnumerable<DateTime> col23_ni { get; set; }
		#endregion
		#region col23_
		public DateTime? col23__eq { get; set; }
		public DateTime? col23__ne { get; set; }
		public DateTime? col23__lt { get; set; }
		public DateTime? col23__gt { get; set; }
		public DateTime? col23__le { get; set; }
		public DateTime? col23__ge { get; set; }
		public IEnumerable<DateTime> col23__in { get; set; }
		public IEnumerable<DateTime> col23__ni { get; set; }
		#endregion
		#region col24
		public TimeSpan? col24_eq { get; set; }
		public TimeSpan? col24_ne { get; set; }
		public TimeSpan? col24_lt { get; set; }
		public TimeSpan? col24_gt { get; set; }
		public TimeSpan? col24_le { get; set; }
		public TimeSpan? col24_ge { get; set; }
		public IEnumerable<TimeSpan> col24_in { get; set; }
		public IEnumerable<TimeSpan> col24_ni { get; set; }
		#endregion
		#region col24_
		public TimeSpan? col24__eq { get; set; }
		public TimeSpan? col24__ne { get; set; }
		public TimeSpan? col24__lt { get; set; }
		public TimeSpan? col24__gt { get; set; }
		public TimeSpan? col24__le { get; set; }
		public TimeSpan? col24__ge { get; set; }
		public IEnumerable<TimeSpan> col24__in { get; set; }
		public IEnumerable<TimeSpan> col24__ni { get; set; }
		#endregion
		#region col25
		public DateTime? col25_eq { get; set; }
		public DateTime? col25_ne { get; set; }
		public DateTime? col25_lt { get; set; }
		public DateTime? col25_gt { get; set; }
		public DateTime? col25_le { get; set; }
		public DateTime? col25_ge { get; set; }
		public IEnumerable<DateTime> col25_in { get; set; }
		public IEnumerable<DateTime> col25_ni { get; set; }
		#endregion
		#region col25_
		public DateTime? col25__eq { get; set; }
		public DateTime? col25__ne { get; set; }
		public DateTime? col25__lt { get; set; }
		public DateTime? col25__gt { get; set; }
		public DateTime? col25__le { get; set; }
		public DateTime? col25__ge { get; set; }
		public IEnumerable<DateTime> col25__in { get; set; }
		public IEnumerable<DateTime> col25__ni { get; set; }
		#endregion
		#region col26
		public DateTime? col26_eq { get; set; }
		public DateTime? col26_ne { get; set; }
		public DateTime? col26_lt { get; set; }
		public DateTime? col26_gt { get; set; }
		public DateTime? col26_le { get; set; }
		public DateTime? col26_ge { get; set; }
		public IEnumerable<DateTime> col26_in { get; set; }
		public IEnumerable<DateTime> col26_ni { get; set; }
		#endregion
		#region col26_
		public DateTime? col26__eq { get; set; }
		public DateTime? col26__ne { get; set; }
		public DateTime? col26__lt { get; set; }
		public DateTime? col26__gt { get; set; }
		public DateTime? col26__le { get; set; }
		public DateTime? col26__ge { get; set; }
		public IEnumerable<DateTime> col26__in { get; set; }
		public IEnumerable<DateTime> col26__ni { get; set; }
		#endregion
		#region col27
		public DateTime? col27_eq { get; set; }
		public DateTime? col27_ne { get; set; }
		public DateTime? col27_lt { get; set; }
		public DateTime? col27_gt { get; set; }
		public DateTime? col27_le { get; set; }
		public DateTime? col27_ge { get; set; }
		public IEnumerable<DateTime> col27_in { get; set; }
		public IEnumerable<DateTime> col27_ni { get; set; }
		#endregion
		#region col27_
		public DateTime? col27__eq { get; set; }
		public DateTime? col27__ne { get; set; }
		public DateTime? col27__lt { get; set; }
		public DateTime? col27__gt { get; set; }
		public DateTime? col27__le { get; set; }
		public DateTime? col27__ge { get; set; }
		public IEnumerable<DateTime> col27__in { get; set; }
		public IEnumerable<DateTime> col27__ni { get; set; }
		#endregion
		#region col28
		public DateTimeOffset? col28_eq { get; set; }
		public DateTimeOffset? col28_ne { get; set; }
		public DateTimeOffset? col28_lt { get; set; }
		public DateTimeOffset? col28_gt { get; set; }
		public DateTimeOffset? col28_le { get; set; }
		public DateTimeOffset? col28_ge { get; set; }
		public IEnumerable<DateTimeOffset> col28_in { get; set; }
		public IEnumerable<DateTimeOffset> col28_ni { get; set; }
		#endregion
		#region col28_
		public DateTimeOffset? col28__eq { get; set; }
		public DateTimeOffset? col28__ne { get; set; }
		public DateTimeOffset? col28__lt { get; set; }
		public DateTimeOffset? col28__gt { get; set; }
		public DateTimeOffset? col28__le { get; set; }
		public DateTimeOffset? col28__ge { get; set; }
		public IEnumerable<DateTimeOffset> col28__in { get; set; }
		public IEnumerable<DateTimeOffset> col28__ni { get; set; }
		#endregion
		#region col29
		public byte[] col29_eq { get; set; }
		public byte[] col29_ne { get; set; }
		public byte[] col29_lt { get; set; }
		public byte[] col29_gt { get; set; }
		public byte[] col29_le { get; set; }
		public byte[] col29_ge { get; set; }
		public IEnumerable<byte[]> col29_in { get; set; }
		public IEnumerable<byte[]> col29_ni { get; set; }
		#endregion
		#endregion

		#region override
		override public Expression<Func<Test, bool>> CreatePredicate()
		{
			var predicate = PredicateBuilder.True<Test>();

			#region uid
			#endregion
			#region col01
			#endregion
			#region col01_
			#endregion
			#region col02
			#endregion
			#region col02_
			#endregion
			#region col03
			#endregion
			#region col03_
			#endregion
			#region col04
			#endregion
			#region col04_
			#endregion
			#region col05
			#endregion
			#region col05_
			#endregion
			#region col06
			#endregion
			#region col06_
			#endregion
			#region col07
			#endregion
			#region col07_
			#endregion
			#region col08
			#endregion
			#region col08_
			#endregion
			#region col09
			#endregion
			#region col09_
			#endregion
			#region col10
			#endregion
			#region col10_
			#endregion
			#region col11
			#endregion
			#region col11_
			#endregion
			#region col12
			#endregion
			#region col12_
			#endregion
			#region col13
			#endregion
			#region col13_
			#endregion
			#region col14
			#endregion
			#region col14_
			#endregion
			#region col15
			#endregion
			#region col15_
			#endregion
			#region col16
			#endregion
			#region col16_
			#endregion
			#region col17
			#endregion
			#region col17_
			#endregion
			#region col18
			#endregion
			#region col18_
			#endregion
			#region col19
			#endregion
			#region col19_
			#endregion
			#region col20
			#endregion
			#region col20_
			#endregion
			#region col21
			#endregion
			#region col21_
			#endregion
			#region col22
			#endregion
			#region col22_
			#endregion
			#region col23
			#endregion
			#region col23_
			#endregion
			#region col24
			#endregion
			#region col24_
			#endregion
			#region col25
			#endregion
			#region col25_
			#endregion
			#region col26
			#endregion
			#region col26_
			#endregion
			#region col27
			#endregion
			#region col27_
			#endregion
			#region col28
			#endregion
			#region col28_
			#endregion
			#region col29
			#endregion

			return predicate;
		}
		#endregion
	}
	#endregion
	#endregion
	#region エラーログ
	/// <summary>
	/// エラーログ
	/// </summary>
	[DataContract()]
	[Table(Schema="dbo", Name="ErrorLog")]
	public partial class ErrorLog : TableBase<ErrorLog>, INotifyPropertyChanged
	{
		#region uid : int

		private int _uid;
		/// <summary>
		/// ユニークID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), NotNull, PrimaryKey, Identity]
		public  int  uid
		{
			get { return _uid; }
			set
			{
				if (_uid != value)
				{
					BeforeuidChanged(value);
					_uid = value;
					AfteruidChanged();

					OnuidChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeuidChanged(int newValue);
		partial void AfteruidChanged();

		public const string NameOfuid = "uid";

		private static readonly PropertyChangedEventArgs _uidChangedEventArgs = new PropertyChangedEventArgs(NameOfuid);

		private void OnuidChanged()
		{
			OnPropertyChanged(_uidChangedEventArgs);
		}

		#endregion

		#endregion
		#region category : string

		private string _category;
		/// <summary>
		/// カテゴリ
		/// </summary>
		[Column(DbType="nvarchar(16)", DataType=DataType.NVarChar, Length=16), NotNull]
		public  string  category
		{
			get { return _category; }
			set
			{
				if (_category != value)
				{
					BeforecategoryChanged(value);
					_category = value;
					AftercategoryChanged();

					OncategoryChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforecategoryChanged(string newValue);
		partial void AftercategoryChanged();

		public const string NameOfcategory = "category";

		private static readonly PropertyChangedEventArgs _categoryChangedEventArgs = new PropertyChangedEventArgs(NameOfcategory);

		private void OncategoryChanged()
		{
			OnPropertyChanged(_categoryChangedEventArgs);
		}

		#endregion

		#endregion
		#region type : string

		private string _type;
		/// <summary>
		/// 種別
		/// </summary>
		[Column(DbType="nvarchar(16)", DataType=DataType.NVarChar, Length=16), NotNull]
		public  string  type
		{
			get { return _type; }
			set
			{
				if (_type != value)
				{
					BeforetypeChanged(value);
					_type = value;
					AftertypeChanged();

					OntypeChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforetypeChanged(string newValue);
		partial void AftertypeChanged();

		public const string NameOftype = "type";

		private static readonly PropertyChangedEventArgs _typeChangedEventArgs = new PropertyChangedEventArgs(NameOftype);

		private void OntypeChanged()
		{
			OnPropertyChanged(_typeChangedEventArgs);
		}

		#endregion

		#endregion
		#region level : int

		private int _level;
		/// <summary>
		/// レベル
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), NotNull]
		public  int  level
		{
			get { return _level; }
			set
			{
				if (_level != value)
				{
					BeforelevelChanged(value);
					_level = value;
					AfterlevelChanged();

					OnlevelChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforelevelChanged(int newValue);
		partial void AfterlevelChanged();

		public const string NameOflevel = "level";

		private static readonly PropertyChangedEventArgs _levelChangedEventArgs = new PropertyChangedEventArgs(NameOflevel);

		private void OnlevelChanged()
		{
			OnPropertyChanged(_levelChangedEventArgs);
		}

		#endregion

		#endregion
		#region url : string

		private string _url;
		/// <summary>
		/// URL
		/// </summary>
		[Column(DbType="nvarchar(1024)", DataType=DataType.NVarChar, Length=1024), NotNull]
		public  string  url
		{
			get { return _url; }
			set
			{
				if (_url != value)
				{
					BeforeurlChanged(value);
					_url = value;
					AfterurlChanged();

					OnurlChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeurlChanged(string newValue);
		partial void AfterurlChanged();

		public const string NameOfurl = "url";

		private static readonly PropertyChangedEventArgs _urlChangedEventArgs = new PropertyChangedEventArgs(NameOfurl);

		private void OnurlChanged()
		{
			OnPropertyChanged(_urlChangedEventArgs);
		}

		#endregion

		#endregion
		#region methods : string

		private string _methods;
		/// <summary>
		/// 処理
		/// </summary>
		[Column(DbType="varchar(200)", DataType=DataType.VarChar, Length=200), NotNull]
		public  string  methods
		{
			get { return _methods; }
			set
			{
				if (_methods != value)
				{
					BeforemethodsChanged(value);
					_methods = value;
					AftermethodsChanged();

					OnmethodsChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforemethodsChanged(string newValue);
		partial void AftermethodsChanged();

		public const string NameOfmethods = "methods";

		private static readonly PropertyChangedEventArgs _methodsChangedEventArgs = new PropertyChangedEventArgs(NameOfmethods);

		private void OnmethodsChanged()
		{
			OnPropertyChanged(_methodsChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_at : DateTime

		private DateTime _created_at;
		/// <summary>
		/// 作成日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), NotNull]
		public  DateTime  created_at
		{
			get { return _created_at; }
			set
			{
				if (_created_at != value)
				{
					Beforecreated_atChanged(value);
					_created_at = value;
					Aftercreated_atChanged();

					Oncreated_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_atChanged(DateTime newValue);
		partial void Aftercreated_atChanged();

		public const string NameOfcreated_at = "created_at";

		private static readonly PropertyChangedEventArgs _created_atChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_at);

		private void Oncreated_atChanged()
		{
			OnPropertyChanged(_created_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_by : string

		private string _created_by;
		/// <summary>
		/// 作成者
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), NotNull]
		public  string  created_by
		{
			get { return _created_by; }
			set
			{
				if (_created_by != value)
				{
					Beforecreated_byChanged(value);
					_created_by = value;
					Aftercreated_byChanged();

					Oncreated_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_byChanged(string newValue);
		partial void Aftercreated_byChanged();

		public const string NameOfcreated_by = "created_by";

		private static readonly PropertyChangedEventArgs _created_byChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_by);

		private void Oncreated_byChanged()
		{
			OnPropertyChanged(_created_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_at : DateTime

		private DateTime _modified_at;
		/// <summary>
		/// 更新日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), NotNull]
		public  DateTime  modified_at
		{
			get { return _modified_at; }
			set
			{
				if (_modified_at != value)
				{
					Beforemodified_atChanged(value);
					_modified_at = value;
					Aftermodified_atChanged();

					Onmodified_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_atChanged(DateTime newValue);
		partial void Aftermodified_atChanged();

		public const string NameOfmodified_at = "modified_at";

		private static readonly PropertyChangedEventArgs _modified_atChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_at);

		private void Onmodified_atChanged()
		{
			OnPropertyChanged(_modified_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_by : string

		private string _modified_by;
		/// <summary>
		/// 更新者
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), NotNull]
		public  string  modified_by
		{
			get { return _modified_by; }
			set
			{
				if (_modified_by != value)
				{
					Beforemodified_byChanged(value);
					_modified_by = value;
					Aftermodified_byChanged();

					Onmodified_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_byChanged(string newValue);
		partial void Aftermodified_byChanged();

		public const string NameOfmodified_by = "modified_by";

		private static readonly PropertyChangedEventArgs _modified_byChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_by);

		private void Onmodified_byChanged()
		{
			OnPropertyChanged(_modified_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region removed_at : DateTime?

		private DateTime? _removed_at;
		/// <summary>
		/// 削除日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), Nullable]
		public  DateTime?  removed_at
		{
			get { return _removed_at; }
			set
			{
				if (_removed_at != value)
				{
					Beforeremoved_atChanged(value);
					_removed_at = value;
					Afterremoved_atChanged();

					Onremoved_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeremoved_atChanged(DateTime? newValue);
		partial void Afterremoved_atChanged();

		public const string NameOfremoved_at = "removed_at";

		private static readonly PropertyChangedEventArgs _removed_atChangedEventArgs = new PropertyChangedEventArgs(NameOfremoved_at);

		private void Onremoved_atChanged()
		{
			OnPropertyChanged(_removed_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region row_version : byte[]

		private byte[] _row_version;
		/// <summary>
		/// 版
		/// </summary>
		[Column(DbType="timestamp", DataType=DataType.Timestamp, SkipOnInsert=true, SkipOnUpdate=true), Nullable]
		public  byte[]  row_version
		{
			get { return _row_version; }
			set
			{
				if (_row_version != value)
				{
					Beforerow_versionChanged(value);
					_row_version = value;
					Afterrow_versionChanged();

					Onrow_versionChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforerow_versionChanged(byte[] newValue);
		partial void Afterrow_versionChanged();

		public const string NameOfrow_version = "row_version";

		private static readonly PropertyChangedEventArgs _row_versionChangedEventArgs = new PropertyChangedEventArgs(NameOfrow_version);

		private void Onrow_versionChanged()
		{
			OnPropertyChanged(_row_versionChangedEventArgs);
		}

		#endregion

		#endregion

		#region enum用アクセスラッパー
		#endregion

		#region Association


		#endregion

		#region INotifyPropertyChanged support

		[field : NonSerialized]
		public virtual event PropertyChangedEventHandler PropertyChanged;

		protected void OnPropertyChanged(string propertyName)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected void OnPropertyChanged(PropertyChangedEventArgs arg)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, arg);
			}
		}

		#endregion

	}
	#region エラーログ条件
	/// <summary>
	/// エラーログ条件
	/// </summary>
	public partial class ErrorLogCondition : ConditionBase<ErrorLog>
	{
		#region properties
		#region uid
		public int? uid_eq { get; set; }
		public int? uid_ne { get; set; }
		public int? uid_lt { get; set; }
		public int? uid_gt { get; set; }
		public int? uid_le { get; set; }
		public int? uid_ge { get; set; }
		public IEnumerable<int> uid_in { get; set; }
		public IEnumerable<int> uid_ni { get; set; }
		#endregion
		#region category
		public string category_eq { get; set; }
		public string category_ne { get; set; }
		public string category_lt { get; set; }
		public string category_gt { get; set; }
		public string category_le { get; set; }
		public string category_ge { get; set; }
		public IEnumerable<string> category_in { get; set; }
		public IEnumerable<string> category_ni { get; set; }
		#endregion
		#region type
		public string type_eq { get; set; }
		public string type_ne { get; set; }
		public string type_lt { get; set; }
		public string type_gt { get; set; }
		public string type_le { get; set; }
		public string type_ge { get; set; }
		public IEnumerable<string> type_in { get; set; }
		public IEnumerable<string> type_ni { get; set; }
		#endregion
		#region level
		public int? level_eq { get; set; }
		public int? level_ne { get; set; }
		public int? level_lt { get; set; }
		public int? level_gt { get; set; }
		public int? level_le { get; set; }
		public int? level_ge { get; set; }
		public IEnumerable<int> level_in { get; set; }
		public IEnumerable<int> level_ni { get; set; }
		#endregion
		#region url
		public string url_eq { get; set; }
		public string url_ne { get; set; }
		public string url_lt { get; set; }
		public string url_gt { get; set; }
		public string url_le { get; set; }
		public string url_ge { get; set; }
		public IEnumerable<string> url_in { get; set; }
		public IEnumerable<string> url_ni { get; set; }
		#endregion
		#region methods
		public string methods_eq { get; set; }
		public string methods_ne { get; set; }
		public string methods_lt { get; set; }
		public string methods_gt { get; set; }
		public string methods_le { get; set; }
		public string methods_ge { get; set; }
		public IEnumerable<string> methods_in { get; set; }
		public IEnumerable<string> methods_ni { get; set; }
		#endregion
		#region created_at
		public DateTime? created_at_eq { get; set; }
		public DateTime? created_at_ne { get; set; }
		public DateTime? created_at_lt { get; set; }
		public DateTime? created_at_gt { get; set; }
		public DateTime? created_at_le { get; set; }
		public DateTime? created_at_ge { get; set; }
		public IEnumerable<DateTime> created_at_in { get; set; }
		public IEnumerable<DateTime> created_at_ni { get; set; }
		#endregion
		#region created_by
		public string created_by_eq { get; set; }
		public string created_by_ne { get; set; }
		public string created_by_lt { get; set; }
		public string created_by_gt { get; set; }
		public string created_by_le { get; set; }
		public string created_by_ge { get; set; }
		public IEnumerable<string> created_by_in { get; set; }
		public IEnumerable<string> created_by_ni { get; set; }
		#endregion
		#region modified_at
		public DateTime? modified_at_eq { get; set; }
		public DateTime? modified_at_ne { get; set; }
		public DateTime? modified_at_lt { get; set; }
		public DateTime? modified_at_gt { get; set; }
		public DateTime? modified_at_le { get; set; }
		public DateTime? modified_at_ge { get; set; }
		public IEnumerable<DateTime> modified_at_in { get; set; }
		public IEnumerable<DateTime> modified_at_ni { get; set; }
		#endregion
		#region modified_by
		public string modified_by_eq { get; set; }
		public string modified_by_ne { get; set; }
		public string modified_by_lt { get; set; }
		public string modified_by_gt { get; set; }
		public string modified_by_le { get; set; }
		public string modified_by_ge { get; set; }
		public IEnumerable<string> modified_by_in { get; set; }
		public IEnumerable<string> modified_by_ni { get; set; }
		#endregion
		#region removed_at
		public DateTime? removed_at_eq { get; set; }
		public DateTime? removed_at_ne { get; set; }
		public DateTime? removed_at_lt { get; set; }
		public DateTime? removed_at_gt { get; set; }
		public DateTime? removed_at_le { get; set; }
		public DateTime? removed_at_ge { get; set; }
		public IEnumerable<DateTime> removed_at_in { get; set; }
		public IEnumerable<DateTime> removed_at_ni { get; set; }
		#endregion
		#region row_version
		public byte[] row_version_eq { get; set; }
		public byte[] row_version_ne { get; set; }
		public byte[] row_version_lt { get; set; }
		public byte[] row_version_gt { get; set; }
		public byte[] row_version_le { get; set; }
		public byte[] row_version_ge { get; set; }
		public IEnumerable<byte[]> row_version_in { get; set; }
		public IEnumerable<byte[]> row_version_ni { get; set; }
		#endregion
		#endregion

		#region override
		override public Expression<Func<ErrorLog, bool>> CreatePredicate()
		{
			var predicate = PredicateBuilder.True<ErrorLog>();

			#region uid
			#endregion
			#region category
			#endregion
			#region type
			#endregion
			#region level
			#endregion
			#region url
			#endregion
			#region methods
			#endregion
			#region created_at
			#endregion
			#region created_by
			#endregion
			#region modified_at
			#endregion
			#region modified_by
			#endregion
			#region removed_at
			#endregion
			#region row_version
			#endregion

			return predicate;
		}
		#endregion
	}
	#endregion
	#endregion
	#region アカウント
	/// <summary>
	/// アカウント
	/// </summary>
	[DataContract()]
	[Table(Schema="Common", Name="Account")]
	public partial class Account : TableBase<Account>, INotifyPropertyChanged
	{
		#region uid : int

		private int _uid;
		/// <summary>
		/// ユニークID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), NotNull, Identity]
		public  int  uid
		{
			get { return _uid; }
			set
			{
				if (_uid != value)
				{
					BeforeuidChanged(value);
					_uid = value;
					AfteruidChanged();

					OnuidChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeuidChanged(int newValue);
		partial void AfteruidChanged();

		public const string NameOfuid = "uid";

		private static readonly PropertyChangedEventArgs _uidChangedEventArgs = new PropertyChangedEventArgs(NameOfuid);

		private void OnuidChanged()
		{
			OnPropertyChanged(_uidChangedEventArgs);
		}

		#endregion

		#endregion
		#region account_id : int

		private int _account_id;
		/// <summary>
		/// アカウントID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), NotNull, PrimaryKey]
		public  int  account_id
		{
			get { return _account_id; }
			set
			{
				if (_account_id != value)
				{
					Beforeaccount_idChanged(value);
					_account_id = value;
					Afteraccount_idChanged();

					Onaccount_idChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeaccount_idChanged(int newValue);
		partial void Afteraccount_idChanged();

		public const string NameOfaccount_id = "account_id";

		private static readonly PropertyChangedEventArgs _account_idChangedEventArgs = new PropertyChangedEventArgs(NameOfaccount_id);

		private void Onaccount_idChanged()
		{
			OnPropertyChanged(_account_idChangedEventArgs);
		}

		#endregion

		#endregion
		#region staff_no : string

		private string _staff_no;
		/// <summary>
		/// 職員番号
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), Nullable]
		public  string  staff_no
		{
			get { return _staff_no; }
			set
			{
				if (_staff_no != value)
				{
					Beforestaff_noChanged(value);
					_staff_no = value;
					Afterstaff_noChanged();

					Onstaff_noChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforestaff_noChanged(string newValue);
		partial void Afterstaff_noChanged();

		public const string NameOfstaff_no = "staff_no";

		private static readonly PropertyChangedEventArgs _staff_noChangedEventArgs = new PropertyChangedEventArgs(NameOfstaff_no);

		private void Onstaff_noChanged()
		{
			OnPropertyChanged(_staff_noChangedEventArgs);
		}

		#endregion

		#endregion
		#region teacher_no : string

		private string _teacher_no;
		/// <summary>
		/// 教員番号
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), Nullable]
		public  string  teacher_no
		{
			get { return _teacher_no; }
			set
			{
				if (_teacher_no != value)
				{
					Beforeteacher_noChanged(value);
					_teacher_no = value;
					Afterteacher_noChanged();

					Onteacher_noChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeteacher_noChanged(string newValue);
		partial void Afterteacher_noChanged();

		public const string NameOfteacher_no = "teacher_no";

		private static readonly PropertyChangedEventArgs _teacher_noChangedEventArgs = new PropertyChangedEventArgs(NameOfteacher_no);

		private void Onteacher_noChanged()
		{
			OnPropertyChanged(_teacher_noChangedEventArgs);
		}

		#endregion

		#endregion
		#region student_no : string

		private string _student_no;
		/// <summary>
		/// 学生番号
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), Nullable]
		public  string  student_no
		{
			get { return _student_no; }
			set
			{
				if (_student_no != value)
				{
					Beforestudent_noChanged(value);
					_student_no = value;
					Afterstudent_noChanged();

					Onstudent_noChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforestudent_noChanged(string newValue);
		partial void Afterstudent_noChanged();

		public const string NameOfstudent_no = "student_no";

		private static readonly PropertyChangedEventArgs _student_noChangedEventArgs = new PropertyChangedEventArgs(NameOfstudent_no);

		private void Onstudent_noChanged()
		{
			OnPropertyChanged(_student_noChangedEventArgs);
		}

		#endregion

		#endregion
		#region out_student_no : string

		private string _out_student_no;
		/// <summary>
		/// 除籍生番号
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), Nullable]
		public  string  out_student_no
		{
			get { return _out_student_no; }
			set
			{
				if (_out_student_no != value)
				{
					Beforeout_student_noChanged(value);
					_out_student_no = value;
					Afterout_student_noChanged();

					Onout_student_noChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeout_student_noChanged(string newValue);
		partial void Afterout_student_noChanged();

		public const string NameOfout_student_no = "out_student_no";

		private static readonly PropertyChangedEventArgs _out_student_noChangedEventArgs = new PropertyChangedEventArgs(NameOfout_student_no);

		private void Onout_student_noChanged()
		{
			OnPropertyChanged(_out_student_noChangedEventArgs);
		}

		#endregion

		#endregion
		#region parent_no : string

		private string _parent_no;
		/// <summary>
		/// 保護者番号
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), Nullable]
		public  string  parent_no
		{
			get { return _parent_no; }
			set
			{
				if (_parent_no != value)
				{
					Beforeparent_noChanged(value);
					_parent_no = value;
					Afterparent_noChanged();

					Onparent_noChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeparent_noChanged(string newValue);
		partial void Afterparent_noChanged();

		public const string NameOfparent_no = "parent_no";

		private static readonly PropertyChangedEventArgs _parent_noChangedEventArgs = new PropertyChangedEventArgs(NameOfparent_no);

		private void Onparent_noChanged()
		{
			OnPropertyChanged(_parent_noChangedEventArgs);
		}

		#endregion

		#endregion
		#region user_no : string

		private string _user_no;
		/// <summary>
		/// ユーザ番号
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), Nullable]
		public  string  user_no
		{
			get { return _user_no; }
			set
			{
				if (_user_no != value)
				{
					Beforeuser_noChanged(value);
					_user_no = value;
					Afteruser_noChanged();

					Onuser_noChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeuser_noChanged(string newValue);
		partial void Afteruser_noChanged();

		public const string NameOfuser_no = "user_no";

		private static readonly PropertyChangedEventArgs _user_noChangedEventArgs = new PropertyChangedEventArgs(NameOfuser_no);

		private void Onuser_noChanged()
		{
			OnPropertyChanged(_user_noChangedEventArgs);
		}

		#endregion

		#endregion
		#region auth_method_type : string

		private string _auth_method_type;
		/// <summary>
		/// 認証方式
		/// </summary>
		[Column(DbType="varchar(10)", DataType=DataType.VarChar, Length=10), NotNull]
		public  string  auth_method_type
		{
			get { return _auth_method_type; }
			set
			{
				if (_auth_method_type != value)
				{
					Beforeauth_method_typeChanged(value);
					_auth_method_type = value;
					Afterauth_method_typeChanged();

					Onauth_method_typeChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeauth_method_typeChanged(string newValue);
		partial void Afterauth_method_typeChanged();

		public const string NameOfauth_method_type = "auth_method_type";

		private static readonly PropertyChangedEventArgs _auth_method_typeChangedEventArgs = new PropertyChangedEventArgs(NameOfauth_method_type);

		private void Onauth_method_typeChanged()
		{
			OnPropertyChanged(_auth_method_typeChangedEventArgs);
		}

		#endregion

		#endregion
		#region is_valid : int

		private int _is_valid;
		/// <summary>
		/// 有効フラグ
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), NotNull]
		public  int  is_valid
		{
			get { return _is_valid; }
			set
			{
				if (_is_valid != value)
				{
					Beforeis_validChanged(value);
					_is_valid = value;
					Afteris_validChanged();

					Onis_validChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeis_validChanged(int newValue);
		partial void Afteris_validChanged();

		public const string NameOfis_valid = "is_valid";

		private static readonly PropertyChangedEventArgs _is_validChangedEventArgs = new PropertyChangedEventArgs(NameOfis_valid);

		private void Onis_validChanged()
		{
			OnPropertyChanged(_is_validChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_at : DateTime

		private DateTime _created_at;
		/// <summary>
		/// 作成日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), NotNull]
		public  DateTime  created_at
		{
			get { return _created_at; }
			set
			{
				if (_created_at != value)
				{
					Beforecreated_atChanged(value);
					_created_at = value;
					Aftercreated_atChanged();

					Oncreated_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_atChanged(DateTime newValue);
		partial void Aftercreated_atChanged();

		public const string NameOfcreated_at = "created_at";

		private static readonly PropertyChangedEventArgs _created_atChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_at);

		private void Oncreated_atChanged()
		{
			OnPropertyChanged(_created_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_by : string

		private string _created_by;
		/// <summary>
		/// 作成者
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), NotNull]
		public  string  created_by
		{
			get { return _created_by; }
			set
			{
				if (_created_by != value)
				{
					Beforecreated_byChanged(value);
					_created_by = value;
					Aftercreated_byChanged();

					Oncreated_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_byChanged(string newValue);
		partial void Aftercreated_byChanged();

		public const string NameOfcreated_by = "created_by";

		private static readonly PropertyChangedEventArgs _created_byChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_by);

		private void Oncreated_byChanged()
		{
			OnPropertyChanged(_created_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_at : DateTime

		private DateTime _modified_at;
		/// <summary>
		/// 更新日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), NotNull]
		public  DateTime  modified_at
		{
			get { return _modified_at; }
			set
			{
				if (_modified_at != value)
				{
					Beforemodified_atChanged(value);
					_modified_at = value;
					Aftermodified_atChanged();

					Onmodified_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_atChanged(DateTime newValue);
		partial void Aftermodified_atChanged();

		public const string NameOfmodified_at = "modified_at";

		private static readonly PropertyChangedEventArgs _modified_atChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_at);

		private void Onmodified_atChanged()
		{
			OnPropertyChanged(_modified_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_by : string

		private string _modified_by;
		/// <summary>
		/// 更新者
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), NotNull]
		public  string  modified_by
		{
			get { return _modified_by; }
			set
			{
				if (_modified_by != value)
				{
					Beforemodified_byChanged(value);
					_modified_by = value;
					Aftermodified_byChanged();

					Onmodified_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_byChanged(string newValue);
		partial void Aftermodified_byChanged();

		public const string NameOfmodified_by = "modified_by";

		private static readonly PropertyChangedEventArgs _modified_byChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_by);

		private void Onmodified_byChanged()
		{
			OnPropertyChanged(_modified_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region removed_at : DateTime?

		private DateTime? _removed_at;
		/// <summary>
		/// 削除日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), Nullable]
		public  DateTime?  removed_at
		{
			get { return _removed_at; }
			set
			{
				if (_removed_at != value)
				{
					Beforeremoved_atChanged(value);
					_removed_at = value;
					Afterremoved_atChanged();

					Onremoved_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeremoved_atChanged(DateTime? newValue);
		partial void Afterremoved_atChanged();

		public const string NameOfremoved_at = "removed_at";

		private static readonly PropertyChangedEventArgs _removed_atChangedEventArgs = new PropertyChangedEventArgs(NameOfremoved_at);

		private void Onremoved_atChanged()
		{
			OnPropertyChanged(_removed_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region row_version : byte[]

		private byte[] _row_version;
		/// <summary>
		/// 版
		/// </summary>
		[Column(DbType="timestamp", DataType=DataType.Timestamp, SkipOnInsert=true, SkipOnUpdate=true), Nullable]
		public  byte[]  row_version
		{
			get { return _row_version; }
			set
			{
				if (_row_version != value)
				{
					Beforerow_versionChanged(value);
					_row_version = value;
					Afterrow_versionChanged();

					Onrow_versionChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforerow_versionChanged(byte[] newValue);
		partial void Afterrow_versionChanged();

		public const string NameOfrow_version = "row_version";

		private static readonly PropertyChangedEventArgs _row_versionChangedEventArgs = new PropertyChangedEventArgs(NameOfrow_version);

		private void Onrow_versionChanged()
		{
			OnPropertyChanged(_row_versionChangedEventArgs);
		}

		#endregion

		#endregion

		#region enum用アクセスラッパー
		/// <summary>
		/// auth_method_typeのenumラッパー
		/// </summary>
		public AuthMethod AuthMethodType
		{
			get
			{
				switch (auth_method_type)
				{
					case "None":
						return AuthMethod.無認証;
					case "Password":
						return AuthMethod.パスワード;
					case "LDAP":
						return AuthMethod.LDAP;
					case "OAuth2":
						return AuthMethod.OAuth2;
					default:
						throw new Exception($"Unknown auth_method_type: {auth_method_type}");
				}
			}
			set
			{
				switch (value)
				{
					case AuthMethod.無認証:
						auth_method_type = "None";
						break;
					case AuthMethod.パスワード:
						auth_method_type = "Password";
						break;
					case AuthMethod.LDAP:
						auth_method_type = "LDAP";
						break;
					case AuthMethod.OAuth2:
						auth_method_type = "OAuth2";
						break;
					default:
						throw new Exception($"Unknown AuthMethod: {value}");
				}
			}
		}
		/// <summary>
		/// is_validのenumラッパー
		/// </summary>
		public ValidityFlag IsValid
		{
			get => (ValidityFlag)is_valid;
			set => is_valid = value.Val();
		}
		#endregion

		#region Association

		#region Staff : staff_no (FK_Account_Staff)

		private Staff _Staff;
		/// <summary>
		/// FK_Account_Staff
		/// </summary>
		[Association(ThisKey="staff_no", OtherKey="staff_no", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_Account_Staff", BackReferenceName="Account")]
		public  Staff  Staff
		{
			get { return _Staff; }
			set
			{
				if (_Staff != value)
				{
					BeforeStaffChanged(value);
					_Staff = value;
					AfterStaffChanged();

					OnStaffChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeStaffChanged(Staff newValue);
		partial void AfterStaffChanged ();

		public const string NameOfStaff = "Staff";

		private static readonly PropertyChangedEventArgs _StaffChangedEventArgs = new PropertyChangedEventArgs(NameOfStaff);

		private void OnStaffChanged()
		{
			OnPropertyChanged(_StaffChangedEventArgs);
		}

		#endregion

		#endregion

		#endregion

		#region INotifyPropertyChanged support

		[field : NonSerialized]
		public virtual event PropertyChangedEventHandler PropertyChanged;

		protected void OnPropertyChanged(string propertyName)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected void OnPropertyChanged(PropertyChangedEventArgs arg)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, arg);
			}
		}

		#endregion

	}
	#region アカウント条件
	/// <summary>
	/// アカウント条件
	/// </summary>
	public partial class AccountCondition : ConditionBase<Account>
	{
		#region properties
		#region uid
		public int? uid_eq { get; set; }
		public int? uid_ne { get; set; }
		public int? uid_lt { get; set; }
		public int? uid_gt { get; set; }
		public int? uid_le { get; set; }
		public int? uid_ge { get; set; }
		public IEnumerable<int> uid_in { get; set; }
		public IEnumerable<int> uid_ni { get; set; }
		#endregion
		#region account_id
		public int? account_id_eq { get; set; }
		public int? account_id_ne { get; set; }
		public int? account_id_lt { get; set; }
		public int? account_id_gt { get; set; }
		public int? account_id_le { get; set; }
		public int? account_id_ge { get; set; }
		public IEnumerable<int> account_id_in { get; set; }
		public IEnumerable<int> account_id_ni { get; set; }
		#endregion
		#region staff_no
		public string staff_no_eq { get; set; }
		public string staff_no_ne { get; set; }
		public string staff_no_lt { get; set; }
		public string staff_no_gt { get; set; }
		public string staff_no_le { get; set; }
		public string staff_no_ge { get; set; }
		public IEnumerable<string> staff_no_in { get; set; }
		public IEnumerable<string> staff_no_ni { get; set; }
		#endregion
		#region teacher_no
		public string teacher_no_eq { get; set; }
		public string teacher_no_ne { get; set; }
		public string teacher_no_lt { get; set; }
		public string teacher_no_gt { get; set; }
		public string teacher_no_le { get; set; }
		public string teacher_no_ge { get; set; }
		public IEnumerable<string> teacher_no_in { get; set; }
		public IEnumerable<string> teacher_no_ni { get; set; }
		#endregion
		#region student_no
		public string student_no_eq { get; set; }
		public string student_no_ne { get; set; }
		public string student_no_lt { get; set; }
		public string student_no_gt { get; set; }
		public string student_no_le { get; set; }
		public string student_no_ge { get; set; }
		public IEnumerable<string> student_no_in { get; set; }
		public IEnumerable<string> student_no_ni { get; set; }
		#endregion
		#region out_student_no
		public string out_student_no_eq { get; set; }
		public string out_student_no_ne { get; set; }
		public string out_student_no_lt { get; set; }
		public string out_student_no_gt { get; set; }
		public string out_student_no_le { get; set; }
		public string out_student_no_ge { get; set; }
		public IEnumerable<string> out_student_no_in { get; set; }
		public IEnumerable<string> out_student_no_ni { get; set; }
		#endregion
		#region parent_no
		public string parent_no_eq { get; set; }
		public string parent_no_ne { get; set; }
		public string parent_no_lt { get; set; }
		public string parent_no_gt { get; set; }
		public string parent_no_le { get; set; }
		public string parent_no_ge { get; set; }
		public IEnumerable<string> parent_no_in { get; set; }
		public IEnumerable<string> parent_no_ni { get; set; }
		#endregion
		#region user_no
		public string user_no_eq { get; set; }
		public string user_no_ne { get; set; }
		public string user_no_lt { get; set; }
		public string user_no_gt { get; set; }
		public string user_no_le { get; set; }
		public string user_no_ge { get; set; }
		public IEnumerable<string> user_no_in { get; set; }
		public IEnumerable<string> user_no_ni { get; set; }
		#endregion
		#region auth_method_type (AuthMethodType)
		private string _auth_method_type_eq;
		public AuthMethod? AuthMethodType_eq
		{
			get => _auth_method_type_eq?.ToAuthMethod();
			set => _auth_method_type_eq = value.HasValue ? value.Value.Val() : (string)null;
		}
		private string _auth_method_type_ne;
		public AuthMethod? AuthMethodType_ne
		{
			get => _auth_method_type_ne?.ToAuthMethod();
			set => _auth_method_type_ne = value.HasValue ? value.Value.Val() : (string)null;
		}
		private string _auth_method_type_lt;
		public AuthMethod? AuthMethodType_lt
		{
			get => _auth_method_type_lt?.ToAuthMethod();
			set => _auth_method_type_lt = value.HasValue ? value.Value.Val() : (string)null;
		}
		private string _auth_method_type_gt;
		public AuthMethod? AuthMethodType_gt
		{
			get => _auth_method_type_gt?.ToAuthMethod();
			set => _auth_method_type_gt = value.HasValue ? value.Value.Val() : (string)null;
		}
		private string _auth_method_type_le;
		public AuthMethod? AuthMethodType_le
		{
			get => _auth_method_type_le?.ToAuthMethod();
			set => _auth_method_type_le = value.HasValue ? value.Value.Val() : (string)null;
		}
		private string _auth_method_type_ge;
		public AuthMethod? AuthMethodType_ge
		{
			get => _auth_method_type_ge?.ToAuthMethod();
			set => _auth_method_type_ge = value.HasValue ? value.Value.Val() : (string)null;
		}
		private IEnumerable<string> _auth_method_type_in;
		public IEnumerable<AuthMethod> AuthMethodType_in
		{
			get => _auth_method_type_in.Select(_ => _.ToAuthMethod().Value);
			set => _auth_method_type_in = value.Select(_ => _.Val());
		}
		private IEnumerable<string> _auth_method_type_ni;
		public IEnumerable<AuthMethod> AuthMethodType_ni
		{
			get => _auth_method_type_ni.Select(_ => _.ToAuthMethod().Value);
			set => _auth_method_type_ni = value.Select(_ => _.Val());
		}
		#endregion
		#region is_valid (IsValid)
		private int? _is_valid_eq;
		public ValidityFlag? IsValid_eq
		{
			get => _is_valid_eq?.ToValidityFlag();
			set => _is_valid_eq = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _is_valid_ne;
		public ValidityFlag? IsValid_ne
		{
			get => _is_valid_ne?.ToValidityFlag();
			set => _is_valid_ne = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _is_valid_lt;
		public ValidityFlag? IsValid_lt
		{
			get => _is_valid_lt?.ToValidityFlag();
			set => _is_valid_lt = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _is_valid_gt;
		public ValidityFlag? IsValid_gt
		{
			get => _is_valid_gt?.ToValidityFlag();
			set => _is_valid_gt = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _is_valid_le;
		public ValidityFlag? IsValid_le
		{
			get => _is_valid_le?.ToValidityFlag();
			set => _is_valid_le = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _is_valid_ge;
		public ValidityFlag? IsValid_ge
		{
			get => _is_valid_ge?.ToValidityFlag();
			set => _is_valid_ge = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private IEnumerable<int> _is_valid_in;
		public IEnumerable<ValidityFlag> IsValid_in
		{
			get => _is_valid_in.Select(_ => _.ToValidityFlag().Value);
			set => _is_valid_in = value.Select(_ => _.Val());
		}
		private IEnumerable<int> _is_valid_ni;
		public IEnumerable<ValidityFlag> IsValid_ni
		{
			get => _is_valid_ni.Select(_ => _.ToValidityFlag().Value);
			set => _is_valid_ni = value.Select(_ => _.Val());
		}
		#endregion
		#region created_at
		public DateTime? created_at_eq { get; set; }
		public DateTime? created_at_ne { get; set; }
		public DateTime? created_at_lt { get; set; }
		public DateTime? created_at_gt { get; set; }
		public DateTime? created_at_le { get; set; }
		public DateTime? created_at_ge { get; set; }
		public IEnumerable<DateTime> created_at_in { get; set; }
		public IEnumerable<DateTime> created_at_ni { get; set; }
		#endregion
		#region created_by
		public string created_by_eq { get; set; }
		public string created_by_ne { get; set; }
		public string created_by_lt { get; set; }
		public string created_by_gt { get; set; }
		public string created_by_le { get; set; }
		public string created_by_ge { get; set; }
		public IEnumerable<string> created_by_in { get; set; }
		public IEnumerable<string> created_by_ni { get; set; }
		#endregion
		#region modified_at
		public DateTime? modified_at_eq { get; set; }
		public DateTime? modified_at_ne { get; set; }
		public DateTime? modified_at_lt { get; set; }
		public DateTime? modified_at_gt { get; set; }
		public DateTime? modified_at_le { get; set; }
		public DateTime? modified_at_ge { get; set; }
		public IEnumerable<DateTime> modified_at_in { get; set; }
		public IEnumerable<DateTime> modified_at_ni { get; set; }
		#endregion
		#region modified_by
		public string modified_by_eq { get; set; }
		public string modified_by_ne { get; set; }
		public string modified_by_lt { get; set; }
		public string modified_by_gt { get; set; }
		public string modified_by_le { get; set; }
		public string modified_by_ge { get; set; }
		public IEnumerable<string> modified_by_in { get; set; }
		public IEnumerable<string> modified_by_ni { get; set; }
		#endregion
		#region removed_at
		public DateTime? removed_at_eq { get; set; }
		public DateTime? removed_at_ne { get; set; }
		public DateTime? removed_at_lt { get; set; }
		public DateTime? removed_at_gt { get; set; }
		public DateTime? removed_at_le { get; set; }
		public DateTime? removed_at_ge { get; set; }
		public IEnumerable<DateTime> removed_at_in { get; set; }
		public IEnumerable<DateTime> removed_at_ni { get; set; }
		#endregion
		#region row_version
		public byte[] row_version_eq { get; set; }
		public byte[] row_version_ne { get; set; }
		public byte[] row_version_lt { get; set; }
		public byte[] row_version_gt { get; set; }
		public byte[] row_version_le { get; set; }
		public byte[] row_version_ge { get; set; }
		public IEnumerable<byte[]> row_version_in { get; set; }
		public IEnumerable<byte[]> row_version_ni { get; set; }
		#endregion
		#endregion

		#region override
		override public Expression<Func<Account, bool>> CreatePredicate()
		{
			var predicate = PredicateBuilder.True<Account>();

			#region uid
			#endregion
			#region account_id
			#endregion
			#region staff_no
			#endregion
			#region teacher_no
			#endregion
			#region student_no
			#endregion
			#region out_student_no
			#endregion
			#region parent_no
			#endregion
			#region user_no
			#endregion
			#region auth_method_type
			#endregion
			#region is_valid
			#endregion
			#region created_at
			#endregion
			#region created_by
			#endregion
			#region modified_at
			#endregion
			#region modified_by
			#endregion
			#region removed_at
			#endregion
			#region row_version
			#endregion

			return predicate;
		}
		#endregion
	}
	#endregion
	#endregion
	#region 職員
	/// <summary>
	/// 職員
	/// </summary>
	[DataContract()]
	[Table(Schema="HumanResource", Name="Staff")]
	public partial class Staff : TableBase<Staff>, INotifyPropertyChanged
	{
		#region uid : int

		private int _uid;
		/// <summary>
		/// ユニークID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), NotNull, Identity]
		public  int  uid
		{
			get { return _uid; }
			set
			{
				if (_uid != value)
				{
					BeforeuidChanged(value);
					_uid = value;
					AfteruidChanged();

					OnuidChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeuidChanged(int newValue);
		partial void AfteruidChanged();

		public const string NameOfuid = "uid";

		private static readonly PropertyChangedEventArgs _uidChangedEventArgs = new PropertyChangedEventArgs(NameOfuid);

		private void OnuidChanged()
		{
			OnPropertyChanged(_uidChangedEventArgs);
		}

		#endregion

		#endregion
		#region user_type : int

		private int _user_type;
		/// <summary>
		/// 利用者種別
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), NotNull]
		public  int  user_type
		{
			get { return _user_type; }
			set
			{
				if (_user_type != value)
				{
					Beforeuser_typeChanged(value);
					_user_type = value;
					Afteruser_typeChanged();

					Onuser_typeChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeuser_typeChanged(int newValue);
		partial void Afteruser_typeChanged();

		public const string NameOfuser_type = "user_type";

		private static readonly PropertyChangedEventArgs _user_typeChangedEventArgs = new PropertyChangedEventArgs(NameOfuser_type);

		private void Onuser_typeChanged()
		{
			OnPropertyChanged(_user_typeChangedEventArgs);
		}

		#endregion

		#endregion
		#region staff_no : string

		private string _staff_no;
		/// <summary>
		/// 職員番号
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), NotNull, PrimaryKey]
		public  string  staff_no
		{
			get { return _staff_no; }
			set
			{
				if (_staff_no != value)
				{
					Beforestaff_noChanged(value);
					_staff_no = value;
					Afterstaff_noChanged();

					Onstaff_noChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforestaff_noChanged(string newValue);
		partial void Afterstaff_noChanged();

		public const string NameOfstaff_no = "staff_no";

		private static readonly PropertyChangedEventArgs _staff_noChangedEventArgs = new PropertyChangedEventArgs(NameOfstaff_no);

		private void Onstaff_noChanged()
		{
			OnPropertyChanged(_staff_noChangedEventArgs);
		}

		#endregion

		#endregion
		#region name : string

		private string _name;
		/// <summary>
		/// 氏名
		/// </summary>
		[Column(DbType="nvarchar(20)", DataType=DataType.NVarChar, Length=20), NotNull]
		public  string  name
		{
			get { return _name; }
			set
			{
				if (_name != value)
				{
					BeforenameChanged(value);
					_name = value;
					AfternameChanged();

					OnnameChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforenameChanged(string newValue);
		partial void AfternameChanged();

		public const string NameOfname = "name";

		private static readonly PropertyChangedEventArgs _nameChangedEventArgs = new PropertyChangedEventArgs(NameOfname);

		private void OnnameChanged()
		{
			OnPropertyChanged(_nameChangedEventArgs);
		}

		#endregion

		#endregion
		#region kana : string

		private string _kana;
		/// <summary>
		/// かな氏名
		/// </summary>
		[Column(DbType="nvarchar(20)", DataType=DataType.NVarChar, Length=20), NotNull]
		public  string  kana
		{
			get { return _kana; }
			set
			{
				if (_kana != value)
				{
					BeforekanaChanged(value);
					_kana = value;
					AfterkanaChanged();

					OnkanaChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforekanaChanged(string newValue);
		partial void AfterkanaChanged();

		public const string NameOfkana = "kana";

		private static readonly PropertyChangedEventArgs _kanaChangedEventArgs = new PropertyChangedEventArgs(NameOfkana);

		private void OnkanaChanged()
		{
			OnPropertyChanged(_kanaChangedEventArgs);
		}

		#endregion

		#endregion
		#region name_abbrev : string

		private string _name_abbrev;
		/// <summary>
		/// 略称
		/// </summary>
		[Column(DbType="nvarchar(4)", DataType=DataType.NVarChar, Length=4), NotNull]
		public  string  name_abbrev
		{
			get { return _name_abbrev; }
			set
			{
				if (_name_abbrev != value)
				{
					Beforename_abbrevChanged(value);
					_name_abbrev = value;
					Aftername_abbrevChanged();

					Onname_abbrevChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforename_abbrevChanged(string newValue);
		partial void Aftername_abbrevChanged();

		public const string NameOfname_abbrev = "name_abbrev";

		private static readonly PropertyChangedEventArgs _name_abbrevChangedEventArgs = new PropertyChangedEventArgs(NameOfname_abbrev);

		private void Onname_abbrevChanged()
		{
			OnPropertyChanged(_name_abbrevChangedEventArgs);
		}

		#endregion

		#endregion
		#region name_eng : string

		private string _name_eng;
		/// <summary>
		/// 英字氏名
		/// </summary>
		[Column(DbType="varchar(4)", DataType=DataType.VarChar, Length=4), NotNull]
		public  string  name_eng
		{
			get { return _name_eng; }
			set
			{
				if (_name_eng != value)
				{
					Beforename_engChanged(value);
					_name_eng = value;
					Aftername_engChanged();

					Onname_engChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforename_engChanged(string newValue);
		partial void Aftername_engChanged();

		public const string NameOfname_eng = "name_eng";

		private static readonly PropertyChangedEventArgs _name_engChangedEventArgs = new PropertyChangedEventArgs(NameOfname_eng);

		private void Onname_engChanged()
		{
			OnPropertyChanged(_name_engChangedEventArgs);
		}

		#endregion

		#endregion
		#region name_eng_abbrev : string

		private string _name_eng_abbrev;
		/// <summary>
		/// 英字略称
		/// </summary>
		[Column(DbType="varchar(4)", DataType=DataType.VarChar, Length=4), NotNull]
		public  string  name_eng_abbrev
		{
			get { return _name_eng_abbrev; }
			set
			{
				if (_name_eng_abbrev != value)
				{
					Beforename_eng_abbrevChanged(value);
					_name_eng_abbrev = value;
					Aftername_eng_abbrevChanged();

					Onname_eng_abbrevChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforename_eng_abbrevChanged(string newValue);
		partial void Aftername_eng_abbrevChanged();

		public const string NameOfname_eng_abbrev = "name_eng_abbrev";

		private static readonly PropertyChangedEventArgs _name_eng_abbrevChangedEventArgs = new PropertyChangedEventArgs(NameOfname_eng_abbrev);

		private void Onname_eng_abbrevChanged()
		{
			OnPropertyChanged(_name_eng_abbrevChangedEventArgs);
		}

		#endregion

		#endregion
		#region gender : int?

		private int? _gender;
		/// <summary>
		/// 性別
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), Nullable]
		public  int?  gender
		{
			get { return _gender; }
			set
			{
				if (_gender != value)
				{
					BeforegenderChanged(value);
					_gender = value;
					AftergenderChanged();

					OngenderChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforegenderChanged(int? newValue);
		partial void AftergenderChanged();

		public const string NameOfgender = "gender";

		private static readonly PropertyChangedEventArgs _genderChangedEventArgs = new PropertyChangedEventArgs(NameOfgender);

		private void OngenderChanged()
		{
			OnPropertyChanged(_genderChangedEventArgs);
		}

		#endregion

		#endregion
		#region birth_date : DateTime?

		private DateTime? _birth_date;
		/// <summary>
		/// 生年月日
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), Nullable]
		public  DateTime?  birth_date
		{
			get { return _birth_date; }
			set
			{
				if (_birth_date != value)
				{
					Beforebirth_dateChanged(value);
					_birth_date = value;
					Afterbirth_dateChanged();

					Onbirth_dateChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforebirth_dateChanged(DateTime? newValue);
		partial void Afterbirth_dateChanged();

		public const string NameOfbirth_date = "birth_date";

		private static readonly PropertyChangedEventArgs _birth_dateChangedEventArgs = new PropertyChangedEventArgs(NameOfbirth_date);

		private void Onbirth_dateChanged()
		{
			OnPropertyChanged(_birth_dateChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_at : DateTime

		private DateTime _created_at;
		/// <summary>
		/// 作成日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), NotNull]
		public  DateTime  created_at
		{
			get { return _created_at; }
			set
			{
				if (_created_at != value)
				{
					Beforecreated_atChanged(value);
					_created_at = value;
					Aftercreated_atChanged();

					Oncreated_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_atChanged(DateTime newValue);
		partial void Aftercreated_atChanged();

		public const string NameOfcreated_at = "created_at";

		private static readonly PropertyChangedEventArgs _created_atChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_at);

		private void Oncreated_atChanged()
		{
			OnPropertyChanged(_created_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_by : string

		private string _created_by;
		/// <summary>
		/// 作成者
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), NotNull]
		public  string  created_by
		{
			get { return _created_by; }
			set
			{
				if (_created_by != value)
				{
					Beforecreated_byChanged(value);
					_created_by = value;
					Aftercreated_byChanged();

					Oncreated_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_byChanged(string newValue);
		partial void Aftercreated_byChanged();

		public const string NameOfcreated_by = "created_by";

		private static readonly PropertyChangedEventArgs _created_byChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_by);

		private void Oncreated_byChanged()
		{
			OnPropertyChanged(_created_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_at : DateTime

		private DateTime _modified_at;
		/// <summary>
		/// 更新日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), NotNull]
		public  DateTime  modified_at
		{
			get { return _modified_at; }
			set
			{
				if (_modified_at != value)
				{
					Beforemodified_atChanged(value);
					_modified_at = value;
					Aftermodified_atChanged();

					Onmodified_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_atChanged(DateTime newValue);
		partial void Aftermodified_atChanged();

		public const string NameOfmodified_at = "modified_at";

		private static readonly PropertyChangedEventArgs _modified_atChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_at);

		private void Onmodified_atChanged()
		{
			OnPropertyChanged(_modified_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_by : string

		private string _modified_by;
		/// <summary>
		/// 更新者
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), NotNull]
		public  string  modified_by
		{
			get { return _modified_by; }
			set
			{
				if (_modified_by != value)
				{
					Beforemodified_byChanged(value);
					_modified_by = value;
					Aftermodified_byChanged();

					Onmodified_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_byChanged(string newValue);
		partial void Aftermodified_byChanged();

		public const string NameOfmodified_by = "modified_by";

		private static readonly PropertyChangedEventArgs _modified_byChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_by);

		private void Onmodified_byChanged()
		{
			OnPropertyChanged(_modified_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region removed_at : DateTime?

		private DateTime? _removed_at;
		/// <summary>
		/// 削除日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), Nullable]
		public  DateTime?  removed_at
		{
			get { return _removed_at; }
			set
			{
				if (_removed_at != value)
				{
					Beforeremoved_atChanged(value);
					_removed_at = value;
					Afterremoved_atChanged();

					Onremoved_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeremoved_atChanged(DateTime? newValue);
		partial void Afterremoved_atChanged();

		public const string NameOfremoved_at = "removed_at";

		private static readonly PropertyChangedEventArgs _removed_atChangedEventArgs = new PropertyChangedEventArgs(NameOfremoved_at);

		private void Onremoved_atChanged()
		{
			OnPropertyChanged(_removed_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region row_version : byte[]

		private byte[] _row_version;
		/// <summary>
		/// 版
		/// </summary>
		[Column(DbType="timestamp", DataType=DataType.Timestamp, SkipOnInsert=true, SkipOnUpdate=true), Nullable]
		public  byte[]  row_version
		{
			get { return _row_version; }
			set
			{
				if (_row_version != value)
				{
					Beforerow_versionChanged(value);
					_row_version = value;
					Afterrow_versionChanged();

					Onrow_versionChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforerow_versionChanged(byte[] newValue);
		partial void Afterrow_versionChanged();

		public const string NameOfrow_version = "row_version";

		private static readonly PropertyChangedEventArgs _row_versionChangedEventArgs = new PropertyChangedEventArgs(NameOfrow_version);

		private void Onrow_versionChanged()
		{
			OnPropertyChanged(_row_versionChangedEventArgs);
		}

		#endregion

		#endregion

		#region enum用アクセスラッパー
		/// <summary>
		/// user_typeのenumラッパー
		/// </summary>
		public UserType UserType
		{
			get => (UserType)user_type;
			set => user_type = value.Val();
		}
		/// <summary>
		/// genderのenumラッパー
		/// </summary>
		public Gender? Gender
		{
			get => (Gender?)gender;
			set => gender = value?.Val();
		}
		#endregion

		#region Association

		#region IEnumerable<Account> : staff_no to Account : staff_no (FK_Staff_Account)

		private IEnumerable<Account> _AccountList;
		/// <summary>
		/// FK_Staff_Account_BackReference
		/// </summary>
		[Association(ThisKey="staff_no", OtherKey="staff_no", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public  IEnumerable<Account>  AccountList
		{
			get { return _AccountList; }
			set
			{
				if (_AccountList != value)
				{
					BeforeAccountListChanged(value);
					_AccountList = value;
					AfterAccountListChanged();

					OnAccountListChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeAccountListChanged(IEnumerable<Account> newValue);
		partial void AfterAccountListChanged ();

		public const string NameOfAccountList = "AccountList";

		private static readonly PropertyChangedEventArgs _AccountListChangedEventArgs = new PropertyChangedEventArgs(NameOfAccountList);

		private void OnAccountListChanged()
		{
			OnPropertyChanged(_AccountListChangedEventArgs);
		}

		#endregion

		#endregion
		#region IEnumerable<Address> : user_type,staff_no to Address : user_type,generic_user_no (FK_Staff_Address)

		private IEnumerable<Address> _AddressList;
		/// <summary>
		/// FK_Staff_Address_BackReference
		/// </summary>
		[Association(ThisKey="user_type,staff_no", OtherKey="user_type,generic_user_no", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public  IEnumerable<Address>  AddressList
		{
			get { return _AddressList; }
			set
			{
				if (_AddressList != value)
				{
					BeforeAddressListChanged(value);
					_AddressList = value;
					AfterAddressListChanged();

					OnAddressListChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeAddressListChanged(IEnumerable<Address> newValue);
		partial void AfterAddressListChanged ();

		public const string NameOfAddressList = "AddressList";

		private static readonly PropertyChangedEventArgs _AddressListChangedEventArgs = new PropertyChangedEventArgs(NameOfAddressList);

		private void OnAddressListChanged()
		{
			OnPropertyChanged(_AddressListChangedEventArgs);
		}

		#endregion

		#endregion
		#region IEnumerable<Contact> : user_type,staff_no to Contact : user_type,generic_user_no (FK_Staff_Contact)

		private IEnumerable<Contact> _ContactList;
		/// <summary>
		/// FK_Staff_Contact_BackReference
		/// </summary>
		[Association(ThisKey="user_type,staff_no", OtherKey="user_type,generic_user_no", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public  IEnumerable<Contact>  ContactList
		{
			get { return _ContactList; }
			set
			{
				if (_ContactList != value)
				{
					BeforeContactListChanged(value);
					_ContactList = value;
					AfterContactListChanged();

					OnContactListChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeContactListChanged(IEnumerable<Contact> newValue);
		partial void AfterContactListChanged ();

		public const string NameOfContactList = "ContactList";

		private static readonly PropertyChangedEventArgs _ContactListChangedEventArgs = new PropertyChangedEventArgs(NameOfContactList);

		private void OnContactListChanged()
		{
			OnPropertyChanged(_ContactListChangedEventArgs);
		}

		#endregion

		#endregion

		#endregion

		#region INotifyPropertyChanged support

		[field : NonSerialized]
		public virtual event PropertyChangedEventHandler PropertyChanged;

		protected void OnPropertyChanged(string propertyName)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected void OnPropertyChanged(PropertyChangedEventArgs arg)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, arg);
			}
		}

		#endregion

	}
	#region 職員条件
	/// <summary>
	/// 職員条件
	/// </summary>
	public partial class StaffCondition : ConditionBase<Staff>
	{
		#region properties
		#region uid
		public int? uid_eq { get; set; }
		public int? uid_ne { get; set; }
		public int? uid_lt { get; set; }
		public int? uid_gt { get; set; }
		public int? uid_le { get; set; }
		public int? uid_ge { get; set; }
		public IEnumerable<int> uid_in { get; set; }
		public IEnumerable<int> uid_ni { get; set; }
		#endregion
		#region user_type (UserType)
		private int? _user_type_eq;
		public UserType? UserType_eq
		{
			get => _user_type_eq?.ToUserType();
			set => _user_type_eq = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_ne;
		public UserType? UserType_ne
		{
			get => _user_type_ne?.ToUserType();
			set => _user_type_ne = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_lt;
		public UserType? UserType_lt
		{
			get => _user_type_lt?.ToUserType();
			set => _user_type_lt = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_gt;
		public UserType? UserType_gt
		{
			get => _user_type_gt?.ToUserType();
			set => _user_type_gt = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_le;
		public UserType? UserType_le
		{
			get => _user_type_le?.ToUserType();
			set => _user_type_le = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_ge;
		public UserType? UserType_ge
		{
			get => _user_type_ge?.ToUserType();
			set => _user_type_ge = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private IEnumerable<int> _user_type_in;
		public IEnumerable<UserType> UserType_in
		{
			get => _user_type_in.Select(_ => _.ToUserType().Value);
			set => _user_type_in = value.Select(_ => _.Val());
		}
		private IEnumerable<int> _user_type_ni;
		public IEnumerable<UserType> UserType_ni
		{
			get => _user_type_ni.Select(_ => _.ToUserType().Value);
			set => _user_type_ni = value.Select(_ => _.Val());
		}
		#endregion
		#region staff_no
		public string staff_no_eq { get; set; }
		public string staff_no_ne { get; set; }
		public string staff_no_lt { get; set; }
		public string staff_no_gt { get; set; }
		public string staff_no_le { get; set; }
		public string staff_no_ge { get; set; }
		public IEnumerable<string> staff_no_in { get; set; }
		public IEnumerable<string> staff_no_ni { get; set; }
		#endregion
		#region name
		public string name_eq { get; set; }
		public string name_ne { get; set; }
		public string name_lt { get; set; }
		public string name_gt { get; set; }
		public string name_le { get; set; }
		public string name_ge { get; set; }
		public IEnumerable<string> name_in { get; set; }
		public IEnumerable<string> name_ni { get; set; }
		#endregion
		#region kana
		public string kana_eq { get; set; }
		public string kana_ne { get; set; }
		public string kana_lt { get; set; }
		public string kana_gt { get; set; }
		public string kana_le { get; set; }
		public string kana_ge { get; set; }
		public IEnumerable<string> kana_in { get; set; }
		public IEnumerable<string> kana_ni { get; set; }
		#endregion
		#region name_abbrev
		public string name_abbrev_eq { get; set; }
		public string name_abbrev_ne { get; set; }
		public string name_abbrev_lt { get; set; }
		public string name_abbrev_gt { get; set; }
		public string name_abbrev_le { get; set; }
		public string name_abbrev_ge { get; set; }
		public IEnumerable<string> name_abbrev_in { get; set; }
		public IEnumerable<string> name_abbrev_ni { get; set; }
		#endregion
		#region name_eng
		public string name_eng_eq { get; set; }
		public string name_eng_ne { get; set; }
		public string name_eng_lt { get; set; }
		public string name_eng_gt { get; set; }
		public string name_eng_le { get; set; }
		public string name_eng_ge { get; set; }
		public IEnumerable<string> name_eng_in { get; set; }
		public IEnumerable<string> name_eng_ni { get; set; }
		#endregion
		#region name_eng_abbrev
		public string name_eng_abbrev_eq { get; set; }
		public string name_eng_abbrev_ne { get; set; }
		public string name_eng_abbrev_lt { get; set; }
		public string name_eng_abbrev_gt { get; set; }
		public string name_eng_abbrev_le { get; set; }
		public string name_eng_abbrev_ge { get; set; }
		public IEnumerable<string> name_eng_abbrev_in { get; set; }
		public IEnumerable<string> name_eng_abbrev_ni { get; set; }
		#endregion
		#region gender (Gender)
		private int? _gender_eq;
		public Gender? Gender_eq
		{
			get => _gender_eq?.ToGender();
			set => _gender_eq = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _gender_ne;
		public Gender? Gender_ne
		{
			get => _gender_ne?.ToGender();
			set => _gender_ne = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _gender_lt;
		public Gender? Gender_lt
		{
			get => _gender_lt?.ToGender();
			set => _gender_lt = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _gender_gt;
		public Gender? Gender_gt
		{
			get => _gender_gt?.ToGender();
			set => _gender_gt = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _gender_le;
		public Gender? Gender_le
		{
			get => _gender_le?.ToGender();
			set => _gender_le = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _gender_ge;
		public Gender? Gender_ge
		{
			get => _gender_ge?.ToGender();
			set => _gender_ge = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private IEnumerable<int> _gender_in;
		public IEnumerable<Gender> Gender_in
		{
			get => _gender_in.Select(_ => _.ToGender().Value);
			set => _gender_in = value.Select(_ => _.Val());
		}
		private IEnumerable<int> _gender_ni;
		public IEnumerable<Gender> Gender_ni
		{
			get => _gender_ni.Select(_ => _.ToGender().Value);
			set => _gender_ni = value.Select(_ => _.Val());
		}
		#endregion
		#region birth_date
		public DateTime? birth_date_eq { get; set; }
		public DateTime? birth_date_ne { get; set; }
		public DateTime? birth_date_lt { get; set; }
		public DateTime? birth_date_gt { get; set; }
		public DateTime? birth_date_le { get; set; }
		public DateTime? birth_date_ge { get; set; }
		public IEnumerable<DateTime> birth_date_in { get; set; }
		public IEnumerable<DateTime> birth_date_ni { get; set; }
		#endregion
		#region created_at
		public DateTime? created_at_eq { get; set; }
		public DateTime? created_at_ne { get; set; }
		public DateTime? created_at_lt { get; set; }
		public DateTime? created_at_gt { get; set; }
		public DateTime? created_at_le { get; set; }
		public DateTime? created_at_ge { get; set; }
		public IEnumerable<DateTime> created_at_in { get; set; }
		public IEnumerable<DateTime> created_at_ni { get; set; }
		#endregion
		#region created_by
		public string created_by_eq { get; set; }
		public string created_by_ne { get; set; }
		public string created_by_lt { get; set; }
		public string created_by_gt { get; set; }
		public string created_by_le { get; set; }
		public string created_by_ge { get; set; }
		public IEnumerable<string> created_by_in { get; set; }
		public IEnumerable<string> created_by_ni { get; set; }
		#endregion
		#region modified_at
		public DateTime? modified_at_eq { get; set; }
		public DateTime? modified_at_ne { get; set; }
		public DateTime? modified_at_lt { get; set; }
		public DateTime? modified_at_gt { get; set; }
		public DateTime? modified_at_le { get; set; }
		public DateTime? modified_at_ge { get; set; }
		public IEnumerable<DateTime> modified_at_in { get; set; }
		public IEnumerable<DateTime> modified_at_ni { get; set; }
		#endregion
		#region modified_by
		public string modified_by_eq { get; set; }
		public string modified_by_ne { get; set; }
		public string modified_by_lt { get; set; }
		public string modified_by_gt { get; set; }
		public string modified_by_le { get; set; }
		public string modified_by_ge { get; set; }
		public IEnumerable<string> modified_by_in { get; set; }
		public IEnumerable<string> modified_by_ni { get; set; }
		#endregion
		#region removed_at
		public DateTime? removed_at_eq { get; set; }
		public DateTime? removed_at_ne { get; set; }
		public DateTime? removed_at_lt { get; set; }
		public DateTime? removed_at_gt { get; set; }
		public DateTime? removed_at_le { get; set; }
		public DateTime? removed_at_ge { get; set; }
		public IEnumerable<DateTime> removed_at_in { get; set; }
		public IEnumerable<DateTime> removed_at_ni { get; set; }
		#endregion
		#region row_version
		public byte[] row_version_eq { get; set; }
		public byte[] row_version_ne { get; set; }
		public byte[] row_version_lt { get; set; }
		public byte[] row_version_gt { get; set; }
		public byte[] row_version_le { get; set; }
		public byte[] row_version_ge { get; set; }
		public IEnumerable<byte[]> row_version_in { get; set; }
		public IEnumerable<byte[]> row_version_ni { get; set; }
		#endregion
		#endregion

		#region override
		override public Expression<Func<Staff, bool>> CreatePredicate()
		{
			var predicate = PredicateBuilder.True<Staff>();

			#region uid
			#endregion
			#region user_type
			#endregion
			#region staff_no
			#endregion
			#region name
			#endregion
			#region kana
			#endregion
			#region name_abbrev
			#endregion
			#region name_eng
			#endregion
			#region name_eng_abbrev
			#endregion
			#region gender
			#endregion
			#region birth_date
			#endregion
			#region created_at
			#endregion
			#region created_by
			#endregion
			#region modified_at
			#endregion
			#region modified_by
			#endregion
			#region removed_at
			#endregion
			#region row_version
			#endregion

			return predicate;
		}
		#endregion
	}
	#endregion
	#endregion
	#region 住所
	/// <summary>
	/// 住所
	/// </summary>
	[DataContract()]
	[Table(Schema="HumanResource", Name="Address")]
	public partial class Address : TableBase<Address>, INotifyPropertyChanged
	{
		#region uid : int

		private int _uid;
		/// <summary>
		/// ユニークID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), NotNull, Identity]
		public  int  uid
		{
			get { return _uid; }
			set
			{
				if (_uid != value)
				{
					BeforeuidChanged(value);
					_uid = value;
					AfteruidChanged();

					OnuidChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeuidChanged(int newValue);
		partial void AfteruidChanged();

		public const string NameOfuid = "uid";

		private static readonly PropertyChangedEventArgs _uidChangedEventArgs = new PropertyChangedEventArgs(NameOfuid);

		private void OnuidChanged()
		{
			OnPropertyChanged(_uidChangedEventArgs);
		}

		#endregion

		#endregion
		#region user_type : int

		private int _user_type;
		/// <summary>
		/// 利用者種別
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), NotNull, PrimaryKey]
		public  int  user_type
		{
			get { return _user_type; }
			set
			{
				if (_user_type != value)
				{
					Beforeuser_typeChanged(value);
					_user_type = value;
					Afteruser_typeChanged();

					Onuser_typeChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeuser_typeChanged(int newValue);
		partial void Afteruser_typeChanged();

		public const string NameOfuser_type = "user_type";

		private static readonly PropertyChangedEventArgs _user_typeChangedEventArgs = new PropertyChangedEventArgs(NameOfuser_type);

		private void Onuser_typeChanged()
		{
			OnPropertyChanged(_user_typeChangedEventArgs);
		}

		#endregion

		#endregion
		#region generic_user_no : string

		private string _generic_user_no;
		/// <summary>
		/// 利用者番号
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), NotNull, PrimaryKey]
		public  string  generic_user_no
		{
			get { return _generic_user_no; }
			set
			{
				if (_generic_user_no != value)
				{
					Beforegeneric_user_noChanged(value);
					_generic_user_no = value;
					Aftergeneric_user_noChanged();

					Ongeneric_user_noChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforegeneric_user_noChanged(string newValue);
		partial void Aftergeneric_user_noChanged();

		public const string NameOfgeneric_user_no = "generic_user_no";

		private static readonly PropertyChangedEventArgs _generic_user_noChangedEventArgs = new PropertyChangedEventArgs(NameOfgeneric_user_no);

		private void Ongeneric_user_noChanged()
		{
			OnPropertyChanged(_generic_user_noChangedEventArgs);
		}

		#endregion

		#endregion
		#region seq : int

		private int _seq;
		/// <summary>
		/// 連番
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), NotNull, PrimaryKey]
		public  int  seq
		{
			get { return _seq; }
			set
			{
				if (_seq != value)
				{
					BeforeseqChanged(value);
					_seq = value;
					AfterseqChanged();

					OnseqChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeseqChanged(int newValue);
		partial void AfterseqChanged();

		public const string NameOfseq = "seq";

		private static readonly PropertyChangedEventArgs _seqChangedEventArgs = new PropertyChangedEventArgs(NameOfseq);

		private void OnseqChanged()
		{
			OnPropertyChanged(_seqChangedEventArgs);
		}

		#endregion

		#endregion
		#region address_type_id : int

		private int _address_type_id;
		/// <summary>
		/// 住所種別
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), NotNull]
		public  int  address_type_id
		{
			get { return _address_type_id; }
			set
			{
				if (_address_type_id != value)
				{
					Beforeaddress_type_idChanged(value);
					_address_type_id = value;
					Afteraddress_type_idChanged();

					Onaddress_type_idChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeaddress_type_idChanged(int newValue);
		partial void Afteraddress_type_idChanged();

		public const string NameOfaddress_type_id = "address_type_id";

		private static readonly PropertyChangedEventArgs _address_type_idChangedEventArgs = new PropertyChangedEventArgs(NameOfaddress_type_id);

		private void Onaddress_type_idChanged()
		{
			OnPropertyChanged(_address_type_idChangedEventArgs);
		}

		#endregion

		#endregion
		#region postal_code : string

		private string _postal_code;
		/// <summary>
		/// 郵便番号
		/// </summary>
		[Column(DbType="varchar(7)", DataType=DataType.VarChar, Length=7), NotNull]
		public  string  postal_code
		{
			get { return _postal_code; }
			set
			{
				if (_postal_code != value)
				{
					Beforepostal_codeChanged(value);
					_postal_code = value;
					Afterpostal_codeChanged();

					Onpostal_codeChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforepostal_codeChanged(string newValue);
		partial void Afterpostal_codeChanged();

		public const string NameOfpostal_code = "postal_code";

		private static readonly PropertyChangedEventArgs _postal_codeChangedEventArgs = new PropertyChangedEventArgs(NameOfpostal_code);

		private void Onpostal_codeChanged()
		{
			OnPropertyChanged(_postal_codeChangedEventArgs);
		}

		#endregion

		#endregion
		#region prefecture_code : int

		private int _prefecture_code;
		/// <summary>
		/// 都道府県
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), NotNull]
		public  int  prefecture_code
		{
			get { return _prefecture_code; }
			set
			{
				if (_prefecture_code != value)
				{
					Beforeprefecture_codeChanged(value);
					_prefecture_code = value;
					Afterprefecture_codeChanged();

					Onprefecture_codeChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeprefecture_codeChanged(int newValue);
		partial void Afterprefecture_codeChanged();

		public const string NameOfprefecture_code = "prefecture_code";

		private static readonly PropertyChangedEventArgs _prefecture_codeChangedEventArgs = new PropertyChangedEventArgs(NameOfprefecture_code);

		private void Onprefecture_codeChanged()
		{
			OnPropertyChanged(_prefecture_codeChangedEventArgs);
		}

		#endregion

		#endregion
		#region address1 : string

		private string _address1;
		/// <summary>
		/// 住所1
		/// </summary>
		[Column(DbType="nvarchar(32)", DataType=DataType.NVarChar, Length=32), NotNull]
		public  string  address1
		{
			get { return _address1; }
			set
			{
				if (_address1 != value)
				{
					Beforeaddress1Changed(value);
					_address1 = value;
					Afteraddress1Changed();

					Onaddress1Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeaddress1Changed(string newValue);
		partial void Afteraddress1Changed();

		public const string NameOfaddress1 = "address1";

		private static readonly PropertyChangedEventArgs _address1ChangedEventArgs = new PropertyChangedEventArgs(NameOfaddress1);

		private void Onaddress1Changed()
		{
			OnPropertyChanged(_address1ChangedEventArgs);
		}

		#endregion

		#endregion
		#region address2 : string

		private string _address2;
		/// <summary>
		/// 住所2
		/// </summary>
		[Column(DbType="nvarchar(32)", DataType=DataType.NVarChar, Length=32), NotNull]
		public  string  address2
		{
			get { return _address2; }
			set
			{
				if (_address2 != value)
				{
					Beforeaddress2Changed(value);
					_address2 = value;
					Afteraddress2Changed();

					Onaddress2Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeaddress2Changed(string newValue);
		partial void Afteraddress2Changed();

		public const string NameOfaddress2 = "address2";

		private static readonly PropertyChangedEventArgs _address2ChangedEventArgs = new PropertyChangedEventArgs(NameOfaddress2);

		private void Onaddress2Changed()
		{
			OnPropertyChanged(_address2ChangedEventArgs);
		}

		#endregion

		#endregion
		#region address3 : string

		private string _address3;
		/// <summary>
		/// 住所3
		/// </summary>
		[Column(DbType="nvarchar(32)", DataType=DataType.NVarChar, Length=32), NotNull]
		public  string  address3
		{
			get { return _address3; }
			set
			{
				if (_address3 != value)
				{
					Beforeaddress3Changed(value);
					_address3 = value;
					Afteraddress3Changed();

					Onaddress3Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeaddress3Changed(string newValue);
		partial void Afteraddress3Changed();

		public const string NameOfaddress3 = "address3";

		private static readonly PropertyChangedEventArgs _address3ChangedEventArgs = new PropertyChangedEventArgs(NameOfaddress3);

		private void Onaddress3Changed()
		{
			OnPropertyChanged(_address3ChangedEventArgs);
		}

		#endregion

		#endregion
		#region latitude : decimal?

		private decimal? _latitude;
		/// <summary>
		/// 緯度
		/// </summary>
		[Column(DbType="decimal(11,8)", DataType=DataType.Decimal, Precision=11, Scale=8), Nullable]
		public  decimal?  latitude
		{
			get { return _latitude; }
			set
			{
				if (_latitude != value)
				{
					BeforelatitudeChanged(value);
					_latitude = value;
					AfterlatitudeChanged();

					OnlatitudeChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforelatitudeChanged(decimal? newValue);
		partial void AfterlatitudeChanged();

		public const string NameOflatitude = "latitude";

		private static readonly PropertyChangedEventArgs _latitudeChangedEventArgs = new PropertyChangedEventArgs(NameOflatitude);

		private void OnlatitudeChanged()
		{
			OnPropertyChanged(_latitudeChangedEventArgs);
		}

		#endregion

		#endregion
		#region longitude : decimal?

		private decimal? _longitude;
		/// <summary>
		/// 経度
		/// </summary>
		[Column(DbType="decimal(11,8)", DataType=DataType.Decimal, Precision=11, Scale=8), Nullable]
		public  decimal?  longitude
		{
			get { return _longitude; }
			set
			{
				if (_longitude != value)
				{
					BeforelongitudeChanged(value);
					_longitude = value;
					AfterlongitudeChanged();

					OnlongitudeChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforelongitudeChanged(decimal? newValue);
		partial void AfterlongitudeChanged();

		public const string NameOflongitude = "longitude";

		private static readonly PropertyChangedEventArgs _longitudeChangedEventArgs = new PropertyChangedEventArgs(NameOflongitude);

		private void OnlongitudeChanged()
		{
			OnPropertyChanged(_longitudeChangedEventArgs);
		}

		#endregion

		#endregion
		#region enter_date : DateTime?

		private DateTime? _enter_date;
		/// <summary>
		/// 転入日
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), Nullable]
		public  DateTime?  enter_date
		{
			get { return _enter_date; }
			set
			{
				if (_enter_date != value)
				{
					Beforeenter_dateChanged(value);
					_enter_date = value;
					Afterenter_dateChanged();

					Onenter_dateChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeenter_dateChanged(DateTime? newValue);
		partial void Afterenter_dateChanged();

		public const string NameOfenter_date = "enter_date";

		private static readonly PropertyChangedEventArgs _enter_dateChangedEventArgs = new PropertyChangedEventArgs(NameOfenter_date);

		private void Onenter_dateChanged()
		{
			OnPropertyChanged(_enter_dateChangedEventArgs);
		}

		#endregion

		#endregion
		#region leave_date : DateTime?

		private DateTime? _leave_date;
		/// <summary>
		/// 転出日
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), Nullable]
		public  DateTime?  leave_date
		{
			get { return _leave_date; }
			set
			{
				if (_leave_date != value)
				{
					Beforeleave_dateChanged(value);
					_leave_date = value;
					Afterleave_dateChanged();

					Onleave_dateChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeleave_dateChanged(DateTime? newValue);
		partial void Afterleave_dateChanged();

		public const string NameOfleave_date = "leave_date";

		private static readonly PropertyChangedEventArgs _leave_dateChangedEventArgs = new PropertyChangedEventArgs(NameOfleave_date);

		private void Onleave_dateChanged()
		{
			OnPropertyChanged(_leave_dateChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_at : DateTime

		private DateTime _created_at;
		/// <summary>
		/// 作成日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), NotNull]
		public  DateTime  created_at
		{
			get { return _created_at; }
			set
			{
				if (_created_at != value)
				{
					Beforecreated_atChanged(value);
					_created_at = value;
					Aftercreated_atChanged();

					Oncreated_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_atChanged(DateTime newValue);
		partial void Aftercreated_atChanged();

		public const string NameOfcreated_at = "created_at";

		private static readonly PropertyChangedEventArgs _created_atChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_at);

		private void Oncreated_atChanged()
		{
			OnPropertyChanged(_created_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_by : string

		private string _created_by;
		/// <summary>
		/// 作成者
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), NotNull]
		public  string  created_by
		{
			get { return _created_by; }
			set
			{
				if (_created_by != value)
				{
					Beforecreated_byChanged(value);
					_created_by = value;
					Aftercreated_byChanged();

					Oncreated_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_byChanged(string newValue);
		partial void Aftercreated_byChanged();

		public const string NameOfcreated_by = "created_by";

		private static readonly PropertyChangedEventArgs _created_byChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_by);

		private void Oncreated_byChanged()
		{
			OnPropertyChanged(_created_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_at : DateTime

		private DateTime _modified_at;
		/// <summary>
		/// 更新日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), NotNull]
		public  DateTime  modified_at
		{
			get { return _modified_at; }
			set
			{
				if (_modified_at != value)
				{
					Beforemodified_atChanged(value);
					_modified_at = value;
					Aftermodified_atChanged();

					Onmodified_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_atChanged(DateTime newValue);
		partial void Aftermodified_atChanged();

		public const string NameOfmodified_at = "modified_at";

		private static readonly PropertyChangedEventArgs _modified_atChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_at);

		private void Onmodified_atChanged()
		{
			OnPropertyChanged(_modified_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_by : string

		private string _modified_by;
		/// <summary>
		/// 更新者
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), NotNull]
		public  string  modified_by
		{
			get { return _modified_by; }
			set
			{
				if (_modified_by != value)
				{
					Beforemodified_byChanged(value);
					_modified_by = value;
					Aftermodified_byChanged();

					Onmodified_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_byChanged(string newValue);
		partial void Aftermodified_byChanged();

		public const string NameOfmodified_by = "modified_by";

		private static readonly PropertyChangedEventArgs _modified_byChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_by);

		private void Onmodified_byChanged()
		{
			OnPropertyChanged(_modified_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region row_version : byte[]

		private byte[] _row_version;
		/// <summary>
		/// 版
		/// </summary>
		[Column(DbType="timestamp", DataType=DataType.Timestamp, SkipOnInsert=true, SkipOnUpdate=true), Nullable]
		public  byte[]  row_version
		{
			get { return _row_version; }
			set
			{
				if (_row_version != value)
				{
					Beforerow_versionChanged(value);
					_row_version = value;
					Afterrow_versionChanged();

					Onrow_versionChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforerow_versionChanged(byte[] newValue);
		partial void Afterrow_versionChanged();

		public const string NameOfrow_version = "row_version";

		private static readonly PropertyChangedEventArgs _row_versionChangedEventArgs = new PropertyChangedEventArgs(NameOfrow_version);

		private void Onrow_versionChanged()
		{
			OnPropertyChanged(_row_versionChangedEventArgs);
		}

		#endregion

		#endregion

		#region enum用アクセスラッパー
		/// <summary>
		/// user_typeのenumラッパー
		/// </summary>
		public UserType UserType
		{
			get => (UserType)user_type;
			set => user_type = value.Val();
		}
		#endregion

		#region Association

		#region AddressType : address_type_id (FK_Address_AddressType)

		private AddressType _AddressType;
		/// <summary>
		/// FK_Address_AddressType
		/// </summary>
		[Association(ThisKey="address_type_id", OtherKey="address_type_id", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_Address_AddressType", BackReferenceName="Address")]
		public  AddressType  AddressType
		{
			get { return _AddressType; }
			set
			{
				if (_AddressType != value)
				{
					BeforeAddressTypeChanged(value);
					_AddressType = value;
					AfterAddressTypeChanged();

					OnAddressTypeChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeAddressTypeChanged(AddressType newValue);
		partial void AfterAddressTypeChanged ();

		public const string NameOfAddressType = "AddressType";

		private static readonly PropertyChangedEventArgs _AddressTypeChangedEventArgs = new PropertyChangedEventArgs(NameOfAddressType);

		private void OnAddressTypeChanged()
		{
			OnPropertyChanged(_AddressTypeChangedEventArgs);
		}

		#endregion

		#endregion
		#region Staff : user_type,generic_user_no (FK_Address_Staff)

		private Staff _Staff;
		/// <summary>
		/// FK_Address_Staff
		/// </summary>
		[Association(ThisKey="user_type,generic_user_no", OtherKey="user_type,staff_no", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_Address_Staff", BackReferenceName="Address")]
		public  Staff  Staff
		{
			get { return _Staff; }
			set
			{
				if (_Staff != value)
				{
					BeforeStaffChanged(value);
					_Staff = value;
					AfterStaffChanged();

					OnStaffChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeStaffChanged(Staff newValue);
		partial void AfterStaffChanged ();

		public const string NameOfStaff = "Staff";

		private static readonly PropertyChangedEventArgs _StaffChangedEventArgs = new PropertyChangedEventArgs(NameOfStaff);

		private void OnStaffChanged()
		{
			OnPropertyChanged(_StaffChangedEventArgs);
		}

		#endregion

		#endregion

		#endregion

		#region INotifyPropertyChanged support

		[field : NonSerialized]
		public virtual event PropertyChangedEventHandler PropertyChanged;

		protected void OnPropertyChanged(string propertyName)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected void OnPropertyChanged(PropertyChangedEventArgs arg)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, arg);
			}
		}

		#endregion

	}
	#region 住所条件
	/// <summary>
	/// 住所条件
	/// </summary>
	public partial class AddressCondition : ConditionBase<Address>
	{
		#region properties
		#region uid
		public int? uid_eq { get; set; }
		public int? uid_ne { get; set; }
		public int? uid_lt { get; set; }
		public int? uid_gt { get; set; }
		public int? uid_le { get; set; }
		public int? uid_ge { get; set; }
		public IEnumerable<int> uid_in { get; set; }
		public IEnumerable<int> uid_ni { get; set; }
		#endregion
		#region user_type (UserType)
		private int? _user_type_eq;
		public UserType? UserType_eq
		{
			get => _user_type_eq?.ToUserType();
			set => _user_type_eq = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_ne;
		public UserType? UserType_ne
		{
			get => _user_type_ne?.ToUserType();
			set => _user_type_ne = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_lt;
		public UserType? UserType_lt
		{
			get => _user_type_lt?.ToUserType();
			set => _user_type_lt = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_gt;
		public UserType? UserType_gt
		{
			get => _user_type_gt?.ToUserType();
			set => _user_type_gt = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_le;
		public UserType? UserType_le
		{
			get => _user_type_le?.ToUserType();
			set => _user_type_le = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_ge;
		public UserType? UserType_ge
		{
			get => _user_type_ge?.ToUserType();
			set => _user_type_ge = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private IEnumerable<int> _user_type_in;
		public IEnumerable<UserType> UserType_in
		{
			get => _user_type_in.Select(_ => _.ToUserType().Value);
			set => _user_type_in = value.Select(_ => _.Val());
		}
		private IEnumerable<int> _user_type_ni;
		public IEnumerable<UserType> UserType_ni
		{
			get => _user_type_ni.Select(_ => _.ToUserType().Value);
			set => _user_type_ni = value.Select(_ => _.Val());
		}
		#endregion
		#region generic_user_no
		public string generic_user_no_eq { get; set; }
		public string generic_user_no_ne { get; set; }
		public string generic_user_no_lt { get; set; }
		public string generic_user_no_gt { get; set; }
		public string generic_user_no_le { get; set; }
		public string generic_user_no_ge { get; set; }
		public IEnumerable<string> generic_user_no_in { get; set; }
		public IEnumerable<string> generic_user_no_ni { get; set; }
		#endregion
		#region seq
		public int? seq_eq { get; set; }
		public int? seq_ne { get; set; }
		public int? seq_lt { get; set; }
		public int? seq_gt { get; set; }
		public int? seq_le { get; set; }
		public int? seq_ge { get; set; }
		public IEnumerable<int> seq_in { get; set; }
		public IEnumerable<int> seq_ni { get; set; }
		#endregion
		#region address_type_id
		public int? address_type_id_eq { get; set; }
		public int? address_type_id_ne { get; set; }
		public int? address_type_id_lt { get; set; }
		public int? address_type_id_gt { get; set; }
		public int? address_type_id_le { get; set; }
		public int? address_type_id_ge { get; set; }
		public IEnumerable<int> address_type_id_in { get; set; }
		public IEnumerable<int> address_type_id_ni { get; set; }
		#endregion
		#region postal_code
		public string postal_code_eq { get; set; }
		public string postal_code_ne { get; set; }
		public string postal_code_lt { get; set; }
		public string postal_code_gt { get; set; }
		public string postal_code_le { get; set; }
		public string postal_code_ge { get; set; }
		public IEnumerable<string> postal_code_in { get; set; }
		public IEnumerable<string> postal_code_ni { get; set; }
		#endregion
		#region prefecture_code
		public int? prefecture_code_eq { get; set; }
		public int? prefecture_code_ne { get; set; }
		public int? prefecture_code_lt { get; set; }
		public int? prefecture_code_gt { get; set; }
		public int? prefecture_code_le { get; set; }
		public int? prefecture_code_ge { get; set; }
		public IEnumerable<int> prefecture_code_in { get; set; }
		public IEnumerable<int> prefecture_code_ni { get; set; }
		#endregion
		#region address1
		public string address1_eq { get; set; }
		public string address1_ne { get; set; }
		public string address1_lt { get; set; }
		public string address1_gt { get; set; }
		public string address1_le { get; set; }
		public string address1_ge { get; set; }
		public IEnumerable<string> address1_in { get; set; }
		public IEnumerable<string> address1_ni { get; set; }
		#endregion
		#region address2
		public string address2_eq { get; set; }
		public string address2_ne { get; set; }
		public string address2_lt { get; set; }
		public string address2_gt { get; set; }
		public string address2_le { get; set; }
		public string address2_ge { get; set; }
		public IEnumerable<string> address2_in { get; set; }
		public IEnumerable<string> address2_ni { get; set; }
		#endregion
		#region address3
		public string address3_eq { get; set; }
		public string address3_ne { get; set; }
		public string address3_lt { get; set; }
		public string address3_gt { get; set; }
		public string address3_le { get; set; }
		public string address3_ge { get; set; }
		public IEnumerable<string> address3_in { get; set; }
		public IEnumerable<string> address3_ni { get; set; }
		#endregion
		#region latitude
		public decimal? latitude_eq { get; set; }
		public decimal? latitude_ne { get; set; }
		public decimal? latitude_lt { get; set; }
		public decimal? latitude_gt { get; set; }
		public decimal? latitude_le { get; set; }
		public decimal? latitude_ge { get; set; }
		public IEnumerable<decimal> latitude_in { get; set; }
		public IEnumerable<decimal> latitude_ni { get; set; }
		#endregion
		#region longitude
		public decimal? longitude_eq { get; set; }
		public decimal? longitude_ne { get; set; }
		public decimal? longitude_lt { get; set; }
		public decimal? longitude_gt { get; set; }
		public decimal? longitude_le { get; set; }
		public decimal? longitude_ge { get; set; }
		public IEnumerable<decimal> longitude_in { get; set; }
		public IEnumerable<decimal> longitude_ni { get; set; }
		#endregion
		#region enter_date
		public DateTime? enter_date_eq { get; set; }
		public DateTime? enter_date_ne { get; set; }
		public DateTime? enter_date_lt { get; set; }
		public DateTime? enter_date_gt { get; set; }
		public DateTime? enter_date_le { get; set; }
		public DateTime? enter_date_ge { get; set; }
		public IEnumerable<DateTime> enter_date_in { get; set; }
		public IEnumerable<DateTime> enter_date_ni { get; set; }
		#endregion
		#region leave_date
		public DateTime? leave_date_eq { get; set; }
		public DateTime? leave_date_ne { get; set; }
		public DateTime? leave_date_lt { get; set; }
		public DateTime? leave_date_gt { get; set; }
		public DateTime? leave_date_le { get; set; }
		public DateTime? leave_date_ge { get; set; }
		public IEnumerable<DateTime> leave_date_in { get; set; }
		public IEnumerable<DateTime> leave_date_ni { get; set; }
		#endregion
		#region created_at
		public DateTime? created_at_eq { get; set; }
		public DateTime? created_at_ne { get; set; }
		public DateTime? created_at_lt { get; set; }
		public DateTime? created_at_gt { get; set; }
		public DateTime? created_at_le { get; set; }
		public DateTime? created_at_ge { get; set; }
		public IEnumerable<DateTime> created_at_in { get; set; }
		public IEnumerable<DateTime> created_at_ni { get; set; }
		#endregion
		#region created_by
		public string created_by_eq { get; set; }
		public string created_by_ne { get; set; }
		public string created_by_lt { get; set; }
		public string created_by_gt { get; set; }
		public string created_by_le { get; set; }
		public string created_by_ge { get; set; }
		public IEnumerable<string> created_by_in { get; set; }
		public IEnumerable<string> created_by_ni { get; set; }
		#endregion
		#region modified_at
		public DateTime? modified_at_eq { get; set; }
		public DateTime? modified_at_ne { get; set; }
		public DateTime? modified_at_lt { get; set; }
		public DateTime? modified_at_gt { get; set; }
		public DateTime? modified_at_le { get; set; }
		public DateTime? modified_at_ge { get; set; }
		public IEnumerable<DateTime> modified_at_in { get; set; }
		public IEnumerable<DateTime> modified_at_ni { get; set; }
		#endregion
		#region modified_by
		public string modified_by_eq { get; set; }
		public string modified_by_ne { get; set; }
		public string modified_by_lt { get; set; }
		public string modified_by_gt { get; set; }
		public string modified_by_le { get; set; }
		public string modified_by_ge { get; set; }
		public IEnumerable<string> modified_by_in { get; set; }
		public IEnumerable<string> modified_by_ni { get; set; }
		#endregion
		#region row_version
		public byte[] row_version_eq { get; set; }
		public byte[] row_version_ne { get; set; }
		public byte[] row_version_lt { get; set; }
		public byte[] row_version_gt { get; set; }
		public byte[] row_version_le { get; set; }
		public byte[] row_version_ge { get; set; }
		public IEnumerable<byte[]> row_version_in { get; set; }
		public IEnumerable<byte[]> row_version_ni { get; set; }
		#endregion
		#endregion

		#region override
		override public Expression<Func<Address, bool>> CreatePredicate()
		{
			var predicate = PredicateBuilder.True<Address>();

			#region uid
			#endregion
			#region user_type
			#endregion
			#region generic_user_no
			#endregion
			#region seq
			#endregion
			#region address_type_id
			#endregion
			#region postal_code
			#endregion
			#region prefecture_code
			#endregion
			#region address1
			#endregion
			#region address2
			#endregion
			#region address3
			#endregion
			#region latitude
			#endregion
			#region longitude
			#endregion
			#region enter_date
			#endregion
			#region leave_date
			#endregion
			#region created_at
			#endregion
			#region created_by
			#endregion
			#region modified_at
			#endregion
			#region modified_by
			#endregion
			#region row_version
			#endregion

			return predicate;
		}
		#endregion
	}
	#endregion
	#endregion
	#region 住所種別
	/// <summary>
	/// 住所種別
	/// </summary>
	[DataContract()]
	[Table(Schema="Common", Name="AddressType")]
	public partial class AddressType : TableBase<AddressType>, INotifyPropertyChanged
	{
		#region uid : int

		private int _uid;
		/// <summary>
		/// ユニークID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), NotNull, Identity]
		public  int  uid
		{
			get { return _uid; }
			set
			{
				if (_uid != value)
				{
					BeforeuidChanged(value);
					_uid = value;
					AfteruidChanged();

					OnuidChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeuidChanged(int newValue);
		partial void AfteruidChanged();

		public const string NameOfuid = "uid";

		private static readonly PropertyChangedEventArgs _uidChangedEventArgs = new PropertyChangedEventArgs(NameOfuid);

		private void OnuidChanged()
		{
			OnPropertyChanged(_uidChangedEventArgs);
		}

		#endregion

		#endregion
		#region address_type_id : int

		private int _address_type_id;
		/// <summary>
		/// 住所種別ID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), NotNull, PrimaryKey]
		public  int  address_type_id
		{
			get { return _address_type_id; }
			set
			{
				if (_address_type_id != value)
				{
					Beforeaddress_type_idChanged(value);
					_address_type_id = value;
					Afteraddress_type_idChanged();

					Onaddress_type_idChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeaddress_type_idChanged(int newValue);
		partial void Afteraddress_type_idChanged();

		public const string NameOfaddress_type_id = "address_type_id";

		private static readonly PropertyChangedEventArgs _address_type_idChangedEventArgs = new PropertyChangedEventArgs(NameOfaddress_type_id);

		private void Onaddress_type_idChanged()
		{
			OnPropertyChanged(_address_type_idChangedEventArgs);
		}

		#endregion

		#endregion
		#region name : string

		private string _name;
		/// <summary>
		/// 名称
		/// </summary>
		[Column(DbType="nvarchar(10)", DataType=DataType.NVarChar, Length=10), NotNull]
		public  string  name
		{
			get { return _name; }
			set
			{
				if (_name != value)
				{
					BeforenameChanged(value);
					_name = value;
					AfternameChanged();

					OnnameChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforenameChanged(string newValue);
		partial void AfternameChanged();

		public const string NameOfname = "name";

		private static readonly PropertyChangedEventArgs _nameChangedEventArgs = new PropertyChangedEventArgs(NameOfname);

		private void OnnameChanged()
		{
			OnPropertyChanged(_nameChangedEventArgs);
		}

		#endregion

		#endregion
		#region description : string

		private string _description;
		/// <summary>
		/// 説明
		/// </summary>
		[Column(DbType="nvarchar(64)", DataType=DataType.NVarChar, Length=64), NotNull]
		public  string  description
		{
			get { return _description; }
			set
			{
				if (_description != value)
				{
					BeforedescriptionChanged(value);
					_description = value;
					AfterdescriptionChanged();

					OndescriptionChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforedescriptionChanged(string newValue);
		partial void AfterdescriptionChanged();

		public const string NameOfdescription = "description";

		private static readonly PropertyChangedEventArgs _descriptionChangedEventArgs = new PropertyChangedEventArgs(NameOfdescription);

		private void OndescriptionChanged()
		{
			OnPropertyChanged(_descriptionChangedEventArgs);
		}

		#endregion

		#endregion
		#region display_order : int

		private int _display_order;
		/// <summary>
		/// 表示順
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), NotNull]
		public  int  display_order
		{
			get { return _display_order; }
			set
			{
				if (_display_order != value)
				{
					Beforedisplay_orderChanged(value);
					_display_order = value;
					Afterdisplay_orderChanged();

					Ondisplay_orderChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforedisplay_orderChanged(int newValue);
		partial void Afterdisplay_orderChanged();

		public const string NameOfdisplay_order = "display_order";

		private static readonly PropertyChangedEventArgs _display_orderChangedEventArgs = new PropertyChangedEventArgs(NameOfdisplay_order);

		private void Ondisplay_orderChanged()
		{
			OnPropertyChanged(_display_orderChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_at : DateTime

		private DateTime _created_at;
		/// <summary>
		/// 作成日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), NotNull]
		public  DateTime  created_at
		{
			get { return _created_at; }
			set
			{
				if (_created_at != value)
				{
					Beforecreated_atChanged(value);
					_created_at = value;
					Aftercreated_atChanged();

					Oncreated_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_atChanged(DateTime newValue);
		partial void Aftercreated_atChanged();

		public const string NameOfcreated_at = "created_at";

		private static readonly PropertyChangedEventArgs _created_atChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_at);

		private void Oncreated_atChanged()
		{
			OnPropertyChanged(_created_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_by : string

		private string _created_by;
		/// <summary>
		/// 作成者
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), NotNull]
		public  string  created_by
		{
			get { return _created_by; }
			set
			{
				if (_created_by != value)
				{
					Beforecreated_byChanged(value);
					_created_by = value;
					Aftercreated_byChanged();

					Oncreated_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_byChanged(string newValue);
		partial void Aftercreated_byChanged();

		public const string NameOfcreated_by = "created_by";

		private static readonly PropertyChangedEventArgs _created_byChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_by);

		private void Oncreated_byChanged()
		{
			OnPropertyChanged(_created_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_at : DateTime

		private DateTime _modified_at;
		/// <summary>
		/// 更新日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), NotNull]
		public  DateTime  modified_at
		{
			get { return _modified_at; }
			set
			{
				if (_modified_at != value)
				{
					Beforemodified_atChanged(value);
					_modified_at = value;
					Aftermodified_atChanged();

					Onmodified_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_atChanged(DateTime newValue);
		partial void Aftermodified_atChanged();

		public const string NameOfmodified_at = "modified_at";

		private static readonly PropertyChangedEventArgs _modified_atChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_at);

		private void Onmodified_atChanged()
		{
			OnPropertyChanged(_modified_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_by : string

		private string _modified_by;
		/// <summary>
		/// 更新者
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), NotNull]
		public  string  modified_by
		{
			get { return _modified_by; }
			set
			{
				if (_modified_by != value)
				{
					Beforemodified_byChanged(value);
					_modified_by = value;
					Aftermodified_byChanged();

					Onmodified_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_byChanged(string newValue);
		partial void Aftermodified_byChanged();

		public const string NameOfmodified_by = "modified_by";

		private static readonly PropertyChangedEventArgs _modified_byChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_by);

		private void Onmodified_byChanged()
		{
			OnPropertyChanged(_modified_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region removed_at : DateTime?

		private DateTime? _removed_at;
		/// <summary>
		/// 削除日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), Nullable]
		public  DateTime?  removed_at
		{
			get { return _removed_at; }
			set
			{
				if (_removed_at != value)
				{
					Beforeremoved_atChanged(value);
					_removed_at = value;
					Afterremoved_atChanged();

					Onremoved_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeremoved_atChanged(DateTime? newValue);
		partial void Afterremoved_atChanged();

		public const string NameOfremoved_at = "removed_at";

		private static readonly PropertyChangedEventArgs _removed_atChangedEventArgs = new PropertyChangedEventArgs(NameOfremoved_at);

		private void Onremoved_atChanged()
		{
			OnPropertyChanged(_removed_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region row_version : byte[]

		private byte[] _row_version;
		/// <summary>
		/// 版
		/// </summary>
		[Column(DbType="timestamp", DataType=DataType.Timestamp, SkipOnInsert=true, SkipOnUpdate=true), Nullable]
		public  byte[]  row_version
		{
			get { return _row_version; }
			set
			{
				if (_row_version != value)
				{
					Beforerow_versionChanged(value);
					_row_version = value;
					Afterrow_versionChanged();

					Onrow_versionChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforerow_versionChanged(byte[] newValue);
		partial void Afterrow_versionChanged();

		public const string NameOfrow_version = "row_version";

		private static readonly PropertyChangedEventArgs _row_versionChangedEventArgs = new PropertyChangedEventArgs(NameOfrow_version);

		private void Onrow_versionChanged()
		{
			OnPropertyChanged(_row_versionChangedEventArgs);
		}

		#endregion

		#endregion

		#region enum用アクセスラッパー
		#endregion

		#region Association


		#endregion

		#region INotifyPropertyChanged support

		[field : NonSerialized]
		public virtual event PropertyChangedEventHandler PropertyChanged;

		protected void OnPropertyChanged(string propertyName)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected void OnPropertyChanged(PropertyChangedEventArgs arg)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, arg);
			}
		}

		#endregion

	}
	#region 住所種別条件
	/// <summary>
	/// 住所種別条件
	/// </summary>
	public partial class AddressTypeCondition : ConditionBase<AddressType>
	{
		#region properties
		#region uid
		public int? uid_eq { get; set; }
		public int? uid_ne { get; set; }
		public int? uid_lt { get; set; }
		public int? uid_gt { get; set; }
		public int? uid_le { get; set; }
		public int? uid_ge { get; set; }
		public IEnumerable<int> uid_in { get; set; }
		public IEnumerable<int> uid_ni { get; set; }
		#endregion
		#region address_type_id
		public int? address_type_id_eq { get; set; }
		public int? address_type_id_ne { get; set; }
		public int? address_type_id_lt { get; set; }
		public int? address_type_id_gt { get; set; }
		public int? address_type_id_le { get; set; }
		public int? address_type_id_ge { get; set; }
		public IEnumerable<int> address_type_id_in { get; set; }
		public IEnumerable<int> address_type_id_ni { get; set; }
		#endregion
		#region name
		public string name_eq { get; set; }
		public string name_ne { get; set; }
		public string name_lt { get; set; }
		public string name_gt { get; set; }
		public string name_le { get; set; }
		public string name_ge { get; set; }
		public IEnumerable<string> name_in { get; set; }
		public IEnumerable<string> name_ni { get; set; }
		#endregion
		#region description
		public string description_eq { get; set; }
		public string description_ne { get; set; }
		public string description_lt { get; set; }
		public string description_gt { get; set; }
		public string description_le { get; set; }
		public string description_ge { get; set; }
		public IEnumerable<string> description_in { get; set; }
		public IEnumerable<string> description_ni { get; set; }
		#endregion
		#region display_order
		public int? display_order_eq { get; set; }
		public int? display_order_ne { get; set; }
		public int? display_order_lt { get; set; }
		public int? display_order_gt { get; set; }
		public int? display_order_le { get; set; }
		public int? display_order_ge { get; set; }
		public IEnumerable<int> display_order_in { get; set; }
		public IEnumerable<int> display_order_ni { get; set; }
		#endregion
		#region created_at
		public DateTime? created_at_eq { get; set; }
		public DateTime? created_at_ne { get; set; }
		public DateTime? created_at_lt { get; set; }
		public DateTime? created_at_gt { get; set; }
		public DateTime? created_at_le { get; set; }
		public DateTime? created_at_ge { get; set; }
		public IEnumerable<DateTime> created_at_in { get; set; }
		public IEnumerable<DateTime> created_at_ni { get; set; }
		#endregion
		#region created_by
		public string created_by_eq { get; set; }
		public string created_by_ne { get; set; }
		public string created_by_lt { get; set; }
		public string created_by_gt { get; set; }
		public string created_by_le { get; set; }
		public string created_by_ge { get; set; }
		public IEnumerable<string> created_by_in { get; set; }
		public IEnumerable<string> created_by_ni { get; set; }
		#endregion
		#region modified_at
		public DateTime? modified_at_eq { get; set; }
		public DateTime? modified_at_ne { get; set; }
		public DateTime? modified_at_lt { get; set; }
		public DateTime? modified_at_gt { get; set; }
		public DateTime? modified_at_le { get; set; }
		public DateTime? modified_at_ge { get; set; }
		public IEnumerable<DateTime> modified_at_in { get; set; }
		public IEnumerable<DateTime> modified_at_ni { get; set; }
		#endregion
		#region modified_by
		public string modified_by_eq { get; set; }
		public string modified_by_ne { get; set; }
		public string modified_by_lt { get; set; }
		public string modified_by_gt { get; set; }
		public string modified_by_le { get; set; }
		public string modified_by_ge { get; set; }
		public IEnumerable<string> modified_by_in { get; set; }
		public IEnumerable<string> modified_by_ni { get; set; }
		#endregion
		#region removed_at
		public DateTime? removed_at_eq { get; set; }
		public DateTime? removed_at_ne { get; set; }
		public DateTime? removed_at_lt { get; set; }
		public DateTime? removed_at_gt { get; set; }
		public DateTime? removed_at_le { get; set; }
		public DateTime? removed_at_ge { get; set; }
		public IEnumerable<DateTime> removed_at_in { get; set; }
		public IEnumerable<DateTime> removed_at_ni { get; set; }
		#endregion
		#region row_version
		public byte[] row_version_eq { get; set; }
		public byte[] row_version_ne { get; set; }
		public byte[] row_version_lt { get; set; }
		public byte[] row_version_gt { get; set; }
		public byte[] row_version_le { get; set; }
		public byte[] row_version_ge { get; set; }
		public IEnumerable<byte[]> row_version_in { get; set; }
		public IEnumerable<byte[]> row_version_ni { get; set; }
		#endregion
		#endregion

		#region override
		override public Expression<Func<AddressType, bool>> CreatePredicate()
		{
			var predicate = PredicateBuilder.True<AddressType>();

			#region uid
			#endregion
			#region address_type_id
			#endregion
			#region name
			#endregion
			#region description
			#endregion
			#region display_order
			#endregion
			#region created_at
			#endregion
			#region created_by
			#endregion
			#region modified_at
			#endregion
			#region modified_by
			#endregion
			#region removed_at
			#endregion
			#region row_version
			#endregion

			return predicate;
		}
		#endregion
	}
	#endregion
	#endregion
	#region 連絡先
	/// <summary>
	/// 連絡先
	/// </summary>
	[DataContract()]
	[Table(Schema="HumanResource", Name="Contact")]
	public partial class Contact : TableBase<Contact>, INotifyPropertyChanged
	{
		#region uid : int

		private int _uid;
		/// <summary>
		/// ユニークID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), NotNull, Identity]
		public  int  uid
		{
			get { return _uid; }
			set
			{
				if (_uid != value)
				{
					BeforeuidChanged(value);
					_uid = value;
					AfteruidChanged();

					OnuidChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeuidChanged(int newValue);
		partial void AfteruidChanged();

		public const string NameOfuid = "uid";

		private static readonly PropertyChangedEventArgs _uidChangedEventArgs = new PropertyChangedEventArgs(NameOfuid);

		private void OnuidChanged()
		{
			OnPropertyChanged(_uidChangedEventArgs);
		}

		#endregion

		#endregion
		#region user_type : int

		private int _user_type;
		/// <summary>
		/// 利用者種別
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), NotNull, PrimaryKey]
		public  int  user_type
		{
			get { return _user_type; }
			set
			{
				if (_user_type != value)
				{
					Beforeuser_typeChanged(value);
					_user_type = value;
					Afteruser_typeChanged();

					Onuser_typeChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeuser_typeChanged(int newValue);
		partial void Afteruser_typeChanged();

		public const string NameOfuser_type = "user_type";

		private static readonly PropertyChangedEventArgs _user_typeChangedEventArgs = new PropertyChangedEventArgs(NameOfuser_type);

		private void Onuser_typeChanged()
		{
			OnPropertyChanged(_user_typeChangedEventArgs);
		}

		#endregion

		#endregion
		#region generic_user_no : string

		private string _generic_user_no;
		/// <summary>
		/// 利用者番号
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), NotNull, PrimaryKey]
		public  string  generic_user_no
		{
			get { return _generic_user_no; }
			set
			{
				if (_generic_user_no != value)
				{
					Beforegeneric_user_noChanged(value);
					_generic_user_no = value;
					Aftergeneric_user_noChanged();

					Ongeneric_user_noChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforegeneric_user_noChanged(string newValue);
		partial void Aftergeneric_user_noChanged();

		public const string NameOfgeneric_user_no = "generic_user_no";

		private static readonly PropertyChangedEventArgs _generic_user_noChangedEventArgs = new PropertyChangedEventArgs(NameOfgeneric_user_no);

		private void Ongeneric_user_noChanged()
		{
			OnPropertyChanged(_generic_user_noChangedEventArgs);
		}

		#endregion

		#endregion
		#region seq : int

		private int _seq;
		/// <summary>
		/// 連番
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), NotNull, PrimaryKey]
		public  int  seq
		{
			get { return _seq; }
			set
			{
				if (_seq != value)
				{
					BeforeseqChanged(value);
					_seq = value;
					AfterseqChanged();

					OnseqChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeseqChanged(int newValue);
		partial void AfterseqChanged();

		public const string NameOfseq = "seq";

		private static readonly PropertyChangedEventArgs _seqChangedEventArgs = new PropertyChangedEventArgs(NameOfseq);

		private void OnseqChanged()
		{
			OnPropertyChanged(_seqChangedEventArgs);
		}

		#endregion

		#endregion
		#region contact_type_id : int

		private int _contact_type_id;
		/// <summary>
		/// 連絡先種別
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), NotNull]
		public  int  contact_type_id
		{
			get { return _contact_type_id; }
			set
			{
				if (_contact_type_id != value)
				{
					Beforecontact_type_idChanged(value);
					_contact_type_id = value;
					Aftercontact_type_idChanged();

					Oncontact_type_idChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecontact_type_idChanged(int newValue);
		partial void Aftercontact_type_idChanged();

		public const string NameOfcontact_type_id = "contact_type_id";

		private static readonly PropertyChangedEventArgs _contact_type_idChangedEventArgs = new PropertyChangedEventArgs(NameOfcontact_type_id);

		private void Oncontact_type_idChanged()
		{
			OnPropertyChanged(_contact_type_idChangedEventArgs);
		}

		#endregion

		#endregion
		#region contact : string

		private string _contact;
		/// <summary>
		/// 連絡先
		/// </summary>
		[Column(DbType="nvarchar(20)", DataType=DataType.NVarChar, Length=20), NotNull]
		public  string  contact
		{
			get { return _contact; }
			set
			{
				if (_contact != value)
				{
					BeforecontactChanged(value);
					_contact = value;
					AftercontactChanged();

					OncontactChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforecontactChanged(string newValue);
		partial void AftercontactChanged();

		public const string NameOfcontact = "contact";

		private static readonly PropertyChangedEventArgs _contactChangedEventArgs = new PropertyChangedEventArgs(NameOfcontact);

		private void OncontactChanged()
		{
			OnPropertyChanged(_contactChangedEventArgs);
		}

		#endregion

		#endregion
		#region note : string

		private string _note;
		/// <summary>
		/// 備考
		/// </summary>
		[Column(DbType="nvarchar(200)", DataType=DataType.NVarChar, Length=200), NotNull]
		public  string  note
		{
			get { return _note; }
			set
			{
				if (_note != value)
				{
					BeforenoteChanged(value);
					_note = value;
					AfternoteChanged();

					OnnoteChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforenoteChanged(string newValue);
		partial void AfternoteChanged();

		public const string NameOfnote = "note";

		private static readonly PropertyChangedEventArgs _noteChangedEventArgs = new PropertyChangedEventArgs(NameOfnote);

		private void OnnoteChanged()
		{
			OnPropertyChanged(_noteChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_at : DateTime

		private DateTime _created_at;
		/// <summary>
		/// 作成日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), NotNull]
		public  DateTime  created_at
		{
			get { return _created_at; }
			set
			{
				if (_created_at != value)
				{
					Beforecreated_atChanged(value);
					_created_at = value;
					Aftercreated_atChanged();

					Oncreated_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_atChanged(DateTime newValue);
		partial void Aftercreated_atChanged();

		public const string NameOfcreated_at = "created_at";

		private static readonly PropertyChangedEventArgs _created_atChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_at);

		private void Oncreated_atChanged()
		{
			OnPropertyChanged(_created_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_by : string

		private string _created_by;
		/// <summary>
		/// 作成者
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), NotNull]
		public  string  created_by
		{
			get { return _created_by; }
			set
			{
				if (_created_by != value)
				{
					Beforecreated_byChanged(value);
					_created_by = value;
					Aftercreated_byChanged();

					Oncreated_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_byChanged(string newValue);
		partial void Aftercreated_byChanged();

		public const string NameOfcreated_by = "created_by";

		private static readonly PropertyChangedEventArgs _created_byChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_by);

		private void Oncreated_byChanged()
		{
			OnPropertyChanged(_created_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_at : DateTime

		private DateTime _modified_at;
		/// <summary>
		/// 更新日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), NotNull]
		public  DateTime  modified_at
		{
			get { return _modified_at; }
			set
			{
				if (_modified_at != value)
				{
					Beforemodified_atChanged(value);
					_modified_at = value;
					Aftermodified_atChanged();

					Onmodified_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_atChanged(DateTime newValue);
		partial void Aftermodified_atChanged();

		public const string NameOfmodified_at = "modified_at";

		private static readonly PropertyChangedEventArgs _modified_atChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_at);

		private void Onmodified_atChanged()
		{
			OnPropertyChanged(_modified_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_by : string

		private string _modified_by;
		/// <summary>
		/// 更新者
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), NotNull]
		public  string  modified_by
		{
			get { return _modified_by; }
			set
			{
				if (_modified_by != value)
				{
					Beforemodified_byChanged(value);
					_modified_by = value;
					Aftermodified_byChanged();

					Onmodified_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_byChanged(string newValue);
		partial void Aftermodified_byChanged();

		public const string NameOfmodified_by = "modified_by";

		private static readonly PropertyChangedEventArgs _modified_byChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_by);

		private void Onmodified_byChanged()
		{
			OnPropertyChanged(_modified_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region row_version : byte[]

		private byte[] _row_version;
		/// <summary>
		/// 版
		/// </summary>
		[Column(DbType="timestamp", DataType=DataType.Timestamp, SkipOnInsert=true, SkipOnUpdate=true), Nullable]
		public  byte[]  row_version
		{
			get { return _row_version; }
			set
			{
				if (_row_version != value)
				{
					Beforerow_versionChanged(value);
					_row_version = value;
					Afterrow_versionChanged();

					Onrow_versionChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforerow_versionChanged(byte[] newValue);
		partial void Afterrow_versionChanged();

		public const string NameOfrow_version = "row_version";

		private static readonly PropertyChangedEventArgs _row_versionChangedEventArgs = new PropertyChangedEventArgs(NameOfrow_version);

		private void Onrow_versionChanged()
		{
			OnPropertyChanged(_row_versionChangedEventArgs);
		}

		#endregion

		#endregion

		#region enum用アクセスラッパー
		/// <summary>
		/// user_typeのenumラッパー
		/// </summary>
		public UserType UserType
		{
			get => (UserType)user_type;
			set => user_type = value.Val();
		}
		#endregion

		#region Association

		#region ContactType : contact_type_id (FK_Contact_ContactType)

		private ContactType _ContactType;
		/// <summary>
		/// FK_Contact_ContactType
		/// </summary>
		[Association(ThisKey="contact_type_id", OtherKey="contact_type_id", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_Contact_ContactType", BackReferenceName="Contact")]
		public  ContactType  ContactType
		{
			get { return _ContactType; }
			set
			{
				if (_ContactType != value)
				{
					BeforeContactTypeChanged(value);
					_ContactType = value;
					AfterContactTypeChanged();

					OnContactTypeChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeContactTypeChanged(ContactType newValue);
		partial void AfterContactTypeChanged ();

		public const string NameOfContactType = "ContactType";

		private static readonly PropertyChangedEventArgs _ContactTypeChangedEventArgs = new PropertyChangedEventArgs(NameOfContactType);

		private void OnContactTypeChanged()
		{
			OnPropertyChanged(_ContactTypeChangedEventArgs);
		}

		#endregion

		#endregion
		#region Staff : user_type,generic_user_no (FK_Contact_Staff)

		private Staff _Staff;
		/// <summary>
		/// FK_Contact_Staff
		/// </summary>
		[Association(ThisKey="user_type,generic_user_no", OtherKey="user_type,staff_no", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_Contact_Staff", BackReferenceName="Contact")]
		public  Staff  Staff
		{
			get { return _Staff; }
			set
			{
				if (_Staff != value)
				{
					BeforeStaffChanged(value);
					_Staff = value;
					AfterStaffChanged();

					OnStaffChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeStaffChanged(Staff newValue);
		partial void AfterStaffChanged ();

		public const string NameOfStaff = "Staff";

		private static readonly PropertyChangedEventArgs _StaffChangedEventArgs = new PropertyChangedEventArgs(NameOfStaff);

		private void OnStaffChanged()
		{
			OnPropertyChanged(_StaffChangedEventArgs);
		}

		#endregion

		#endregion

		#endregion

		#region INotifyPropertyChanged support

		[field : NonSerialized]
		public virtual event PropertyChangedEventHandler PropertyChanged;

		protected void OnPropertyChanged(string propertyName)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected void OnPropertyChanged(PropertyChangedEventArgs arg)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, arg);
			}
		}

		#endregion

	}
	#region 連絡先条件
	/// <summary>
	/// 連絡先条件
	/// </summary>
	public partial class ContactCondition : ConditionBase<Contact>
	{
		#region properties
		#region uid
		public int? uid_eq { get; set; }
		public int? uid_ne { get; set; }
		public int? uid_lt { get; set; }
		public int? uid_gt { get; set; }
		public int? uid_le { get; set; }
		public int? uid_ge { get; set; }
		public IEnumerable<int> uid_in { get; set; }
		public IEnumerable<int> uid_ni { get; set; }
		#endregion
		#region user_type (UserType)
		private int? _user_type_eq;
		public UserType? UserType_eq
		{
			get => _user_type_eq?.ToUserType();
			set => _user_type_eq = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_ne;
		public UserType? UserType_ne
		{
			get => _user_type_ne?.ToUserType();
			set => _user_type_ne = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_lt;
		public UserType? UserType_lt
		{
			get => _user_type_lt?.ToUserType();
			set => _user_type_lt = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_gt;
		public UserType? UserType_gt
		{
			get => _user_type_gt?.ToUserType();
			set => _user_type_gt = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_le;
		public UserType? UserType_le
		{
			get => _user_type_le?.ToUserType();
			set => _user_type_le = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_ge;
		public UserType? UserType_ge
		{
			get => _user_type_ge?.ToUserType();
			set => _user_type_ge = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private IEnumerable<int> _user_type_in;
		public IEnumerable<UserType> UserType_in
		{
			get => _user_type_in.Select(_ => _.ToUserType().Value);
			set => _user_type_in = value.Select(_ => _.Val());
		}
		private IEnumerable<int> _user_type_ni;
		public IEnumerable<UserType> UserType_ni
		{
			get => _user_type_ni.Select(_ => _.ToUserType().Value);
			set => _user_type_ni = value.Select(_ => _.Val());
		}
		#endregion
		#region generic_user_no
		public string generic_user_no_eq { get; set; }
		public string generic_user_no_ne { get; set; }
		public string generic_user_no_lt { get; set; }
		public string generic_user_no_gt { get; set; }
		public string generic_user_no_le { get; set; }
		public string generic_user_no_ge { get; set; }
		public IEnumerable<string> generic_user_no_in { get; set; }
		public IEnumerable<string> generic_user_no_ni { get; set; }
		#endregion
		#region seq
		public int? seq_eq { get; set; }
		public int? seq_ne { get; set; }
		public int? seq_lt { get; set; }
		public int? seq_gt { get; set; }
		public int? seq_le { get; set; }
		public int? seq_ge { get; set; }
		public IEnumerable<int> seq_in { get; set; }
		public IEnumerable<int> seq_ni { get; set; }
		#endregion
		#region contact_type_id
		public int? contact_type_id_eq { get; set; }
		public int? contact_type_id_ne { get; set; }
		public int? contact_type_id_lt { get; set; }
		public int? contact_type_id_gt { get; set; }
		public int? contact_type_id_le { get; set; }
		public int? contact_type_id_ge { get; set; }
		public IEnumerable<int> contact_type_id_in { get; set; }
		public IEnumerable<int> contact_type_id_ni { get; set; }
		#endregion
		#region contact
		public string contact_eq { get; set; }
		public string contact_ne { get; set; }
		public string contact_lt { get; set; }
		public string contact_gt { get; set; }
		public string contact_le { get; set; }
		public string contact_ge { get; set; }
		public IEnumerable<string> contact_in { get; set; }
		public IEnumerable<string> contact_ni { get; set; }
		#endregion
		#region note
		public string note_eq { get; set; }
		public string note_ne { get; set; }
		public string note_lt { get; set; }
		public string note_gt { get; set; }
		public string note_le { get; set; }
		public string note_ge { get; set; }
		public IEnumerable<string> note_in { get; set; }
		public IEnumerable<string> note_ni { get; set; }
		#endregion
		#region created_at
		public DateTime? created_at_eq { get; set; }
		public DateTime? created_at_ne { get; set; }
		public DateTime? created_at_lt { get; set; }
		public DateTime? created_at_gt { get; set; }
		public DateTime? created_at_le { get; set; }
		public DateTime? created_at_ge { get; set; }
		public IEnumerable<DateTime> created_at_in { get; set; }
		public IEnumerable<DateTime> created_at_ni { get; set; }
		#endregion
		#region created_by
		public string created_by_eq { get; set; }
		public string created_by_ne { get; set; }
		public string created_by_lt { get; set; }
		public string created_by_gt { get; set; }
		public string created_by_le { get; set; }
		public string created_by_ge { get; set; }
		public IEnumerable<string> created_by_in { get; set; }
		public IEnumerable<string> created_by_ni { get; set; }
		#endregion
		#region modified_at
		public DateTime? modified_at_eq { get; set; }
		public DateTime? modified_at_ne { get; set; }
		public DateTime? modified_at_lt { get; set; }
		public DateTime? modified_at_gt { get; set; }
		public DateTime? modified_at_le { get; set; }
		public DateTime? modified_at_ge { get; set; }
		public IEnumerable<DateTime> modified_at_in { get; set; }
		public IEnumerable<DateTime> modified_at_ni { get; set; }
		#endregion
		#region modified_by
		public string modified_by_eq { get; set; }
		public string modified_by_ne { get; set; }
		public string modified_by_lt { get; set; }
		public string modified_by_gt { get; set; }
		public string modified_by_le { get; set; }
		public string modified_by_ge { get; set; }
		public IEnumerable<string> modified_by_in { get; set; }
		public IEnumerable<string> modified_by_ni { get; set; }
		#endregion
		#region row_version
		public byte[] row_version_eq { get; set; }
		public byte[] row_version_ne { get; set; }
		public byte[] row_version_lt { get; set; }
		public byte[] row_version_gt { get; set; }
		public byte[] row_version_le { get; set; }
		public byte[] row_version_ge { get; set; }
		public IEnumerable<byte[]> row_version_in { get; set; }
		public IEnumerable<byte[]> row_version_ni { get; set; }
		#endregion
		#endregion

		#region override
		override public Expression<Func<Contact, bool>> CreatePredicate()
		{
			var predicate = PredicateBuilder.True<Contact>();

			#region uid
			#endregion
			#region user_type
			#endregion
			#region generic_user_no
			#endregion
			#region seq
			#endregion
			#region contact_type_id
			#endregion
			#region contact
			#endregion
			#region note
			#endregion
			#region created_at
			#endregion
			#region created_by
			#endregion
			#region modified_at
			#endregion
			#region modified_by
			#endregion
			#region row_version
			#endregion

			return predicate;
		}
		#endregion
	}
	#endregion
	#endregion
	#region 連絡先種別
	/// <summary>
	/// 連絡先種別
	/// </summary>
	[DataContract()]
	[Table(Schema="Common", Name="ContactType")]
	public partial class ContactType : TableBase<ContactType>, INotifyPropertyChanged
	{
		#region uid : int

		private int _uid;
		/// <summary>
		/// ユニークID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), NotNull, Identity]
		public  int  uid
		{
			get { return _uid; }
			set
			{
				if (_uid != value)
				{
					BeforeuidChanged(value);
					_uid = value;
					AfteruidChanged();

					OnuidChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeuidChanged(int newValue);
		partial void AfteruidChanged();

		public const string NameOfuid = "uid";

		private static readonly PropertyChangedEventArgs _uidChangedEventArgs = new PropertyChangedEventArgs(NameOfuid);

		private void OnuidChanged()
		{
			OnPropertyChanged(_uidChangedEventArgs);
		}

		#endregion

		#endregion
		#region contact_type_id : int

		private int _contact_type_id;
		/// <summary>
		/// 連絡先種別ID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), NotNull, PrimaryKey]
		public  int  contact_type_id
		{
			get { return _contact_type_id; }
			set
			{
				if (_contact_type_id != value)
				{
					Beforecontact_type_idChanged(value);
					_contact_type_id = value;
					Aftercontact_type_idChanged();

					Oncontact_type_idChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecontact_type_idChanged(int newValue);
		partial void Aftercontact_type_idChanged();

		public const string NameOfcontact_type_id = "contact_type_id";

		private static readonly PropertyChangedEventArgs _contact_type_idChangedEventArgs = new PropertyChangedEventArgs(NameOfcontact_type_id);

		private void Oncontact_type_idChanged()
		{
			OnPropertyChanged(_contact_type_idChangedEventArgs);
		}

		#endregion

		#endregion
		#region name : string

		private string _name;
		/// <summary>
		/// 名称
		/// </summary>
		[Column(DbType="nvarchar(10)", DataType=DataType.NVarChar, Length=10), NotNull]
		public  string  name
		{
			get { return _name; }
			set
			{
				if (_name != value)
				{
					BeforenameChanged(value);
					_name = value;
					AfternameChanged();

					OnnameChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforenameChanged(string newValue);
		partial void AfternameChanged();

		public const string NameOfname = "name";

		private static readonly PropertyChangedEventArgs _nameChangedEventArgs = new PropertyChangedEventArgs(NameOfname);

		private void OnnameChanged()
		{
			OnPropertyChanged(_nameChangedEventArgs);
		}

		#endregion

		#endregion
		#region description : string

		private string _description;
		/// <summary>
		/// 説明
		/// </summary>
		[Column(DbType="nvarchar(64)", DataType=DataType.NVarChar, Length=64), NotNull]
		public  string  description
		{
			get { return _description; }
			set
			{
				if (_description != value)
				{
					BeforedescriptionChanged(value);
					_description = value;
					AfterdescriptionChanged();

					OndescriptionChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforedescriptionChanged(string newValue);
		partial void AfterdescriptionChanged();

		public const string NameOfdescription = "description";

		private static readonly PropertyChangedEventArgs _descriptionChangedEventArgs = new PropertyChangedEventArgs(NameOfdescription);

		private void OndescriptionChanged()
		{
			OnPropertyChanged(_descriptionChangedEventArgs);
		}

		#endregion

		#endregion
		#region display_order : int

		private int _display_order;
		/// <summary>
		/// 表示順
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), NotNull]
		public  int  display_order
		{
			get { return _display_order; }
			set
			{
				if (_display_order != value)
				{
					Beforedisplay_orderChanged(value);
					_display_order = value;
					Afterdisplay_orderChanged();

					Ondisplay_orderChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforedisplay_orderChanged(int newValue);
		partial void Afterdisplay_orderChanged();

		public const string NameOfdisplay_order = "display_order";

		private static readonly PropertyChangedEventArgs _display_orderChangedEventArgs = new PropertyChangedEventArgs(NameOfdisplay_order);

		private void Ondisplay_orderChanged()
		{
			OnPropertyChanged(_display_orderChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_at : DateTime

		private DateTime _created_at;
		/// <summary>
		/// 作成日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), NotNull]
		public  DateTime  created_at
		{
			get { return _created_at; }
			set
			{
				if (_created_at != value)
				{
					Beforecreated_atChanged(value);
					_created_at = value;
					Aftercreated_atChanged();

					Oncreated_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_atChanged(DateTime newValue);
		partial void Aftercreated_atChanged();

		public const string NameOfcreated_at = "created_at";

		private static readonly PropertyChangedEventArgs _created_atChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_at);

		private void Oncreated_atChanged()
		{
			OnPropertyChanged(_created_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_by : string

		private string _created_by;
		/// <summary>
		/// 作成者
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), NotNull]
		public  string  created_by
		{
			get { return _created_by; }
			set
			{
				if (_created_by != value)
				{
					Beforecreated_byChanged(value);
					_created_by = value;
					Aftercreated_byChanged();

					Oncreated_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_byChanged(string newValue);
		partial void Aftercreated_byChanged();

		public const string NameOfcreated_by = "created_by";

		private static readonly PropertyChangedEventArgs _created_byChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_by);

		private void Oncreated_byChanged()
		{
			OnPropertyChanged(_created_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_at : DateTime

		private DateTime _modified_at;
		/// <summary>
		/// 更新日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), NotNull]
		public  DateTime  modified_at
		{
			get { return _modified_at; }
			set
			{
				if (_modified_at != value)
				{
					Beforemodified_atChanged(value);
					_modified_at = value;
					Aftermodified_atChanged();

					Onmodified_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_atChanged(DateTime newValue);
		partial void Aftermodified_atChanged();

		public const string NameOfmodified_at = "modified_at";

		private static readonly PropertyChangedEventArgs _modified_atChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_at);

		private void Onmodified_atChanged()
		{
			OnPropertyChanged(_modified_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_by : string

		private string _modified_by;
		/// <summary>
		/// 更新者
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), NotNull]
		public  string  modified_by
		{
			get { return _modified_by; }
			set
			{
				if (_modified_by != value)
				{
					Beforemodified_byChanged(value);
					_modified_by = value;
					Aftermodified_byChanged();

					Onmodified_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_byChanged(string newValue);
		partial void Aftermodified_byChanged();

		public const string NameOfmodified_by = "modified_by";

		private static readonly PropertyChangedEventArgs _modified_byChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_by);

		private void Onmodified_byChanged()
		{
			OnPropertyChanged(_modified_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region removed_at : DateTime?

		private DateTime? _removed_at;
		/// <summary>
		/// 削除日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), Nullable]
		public  DateTime?  removed_at
		{
			get { return _removed_at; }
			set
			{
				if (_removed_at != value)
				{
					Beforeremoved_atChanged(value);
					_removed_at = value;
					Afterremoved_atChanged();

					Onremoved_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeremoved_atChanged(DateTime? newValue);
		partial void Afterremoved_atChanged();

		public const string NameOfremoved_at = "removed_at";

		private static readonly PropertyChangedEventArgs _removed_atChangedEventArgs = new PropertyChangedEventArgs(NameOfremoved_at);

		private void Onremoved_atChanged()
		{
			OnPropertyChanged(_removed_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region row_version : byte[]

		private byte[] _row_version;
		/// <summary>
		/// 版
		/// </summary>
		[Column(DbType="timestamp", DataType=DataType.Timestamp, SkipOnInsert=true, SkipOnUpdate=true), Nullable]
		public  byte[]  row_version
		{
			get { return _row_version; }
			set
			{
				if (_row_version != value)
				{
					Beforerow_versionChanged(value);
					_row_version = value;
					Afterrow_versionChanged();

					Onrow_versionChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforerow_versionChanged(byte[] newValue);
		partial void Afterrow_versionChanged();

		public const string NameOfrow_version = "row_version";

		private static readonly PropertyChangedEventArgs _row_versionChangedEventArgs = new PropertyChangedEventArgs(NameOfrow_version);

		private void Onrow_versionChanged()
		{
			OnPropertyChanged(_row_versionChangedEventArgs);
		}

		#endregion

		#endregion

		#region enum用アクセスラッパー
		#endregion

		#region Association


		#endregion

		#region INotifyPropertyChanged support

		[field : NonSerialized]
		public virtual event PropertyChangedEventHandler PropertyChanged;

		protected void OnPropertyChanged(string propertyName)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected void OnPropertyChanged(PropertyChangedEventArgs arg)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, arg);
			}
		}

		#endregion

	}
	#region 連絡先種別条件
	/// <summary>
	/// 連絡先種別条件
	/// </summary>
	public partial class ContactTypeCondition : ConditionBase<ContactType>
	{
		#region properties
		#region uid
		public int? uid_eq { get; set; }
		public int? uid_ne { get; set; }
		public int? uid_lt { get; set; }
		public int? uid_gt { get; set; }
		public int? uid_le { get; set; }
		public int? uid_ge { get; set; }
		public IEnumerable<int> uid_in { get; set; }
		public IEnumerable<int> uid_ni { get; set; }
		#endregion
		#region contact_type_id
		public int? contact_type_id_eq { get; set; }
		public int? contact_type_id_ne { get; set; }
		public int? contact_type_id_lt { get; set; }
		public int? contact_type_id_gt { get; set; }
		public int? contact_type_id_le { get; set; }
		public int? contact_type_id_ge { get; set; }
		public IEnumerable<int> contact_type_id_in { get; set; }
		public IEnumerable<int> contact_type_id_ni { get; set; }
		#endregion
		#region name
		public string name_eq { get; set; }
		public string name_ne { get; set; }
		public string name_lt { get; set; }
		public string name_gt { get; set; }
		public string name_le { get; set; }
		public string name_ge { get; set; }
		public IEnumerable<string> name_in { get; set; }
		public IEnumerable<string> name_ni { get; set; }
		#endregion
		#region description
		public string description_eq { get; set; }
		public string description_ne { get; set; }
		public string description_lt { get; set; }
		public string description_gt { get; set; }
		public string description_le { get; set; }
		public string description_ge { get; set; }
		public IEnumerable<string> description_in { get; set; }
		public IEnumerable<string> description_ni { get; set; }
		#endregion
		#region display_order
		public int? display_order_eq { get; set; }
		public int? display_order_ne { get; set; }
		public int? display_order_lt { get; set; }
		public int? display_order_gt { get; set; }
		public int? display_order_le { get; set; }
		public int? display_order_ge { get; set; }
		public IEnumerable<int> display_order_in { get; set; }
		public IEnumerable<int> display_order_ni { get; set; }
		#endregion
		#region created_at
		public DateTime? created_at_eq { get; set; }
		public DateTime? created_at_ne { get; set; }
		public DateTime? created_at_lt { get; set; }
		public DateTime? created_at_gt { get; set; }
		public DateTime? created_at_le { get; set; }
		public DateTime? created_at_ge { get; set; }
		public IEnumerable<DateTime> created_at_in { get; set; }
		public IEnumerable<DateTime> created_at_ni { get; set; }
		#endregion
		#region created_by
		public string created_by_eq { get; set; }
		public string created_by_ne { get; set; }
		public string created_by_lt { get; set; }
		public string created_by_gt { get; set; }
		public string created_by_le { get; set; }
		public string created_by_ge { get; set; }
		public IEnumerable<string> created_by_in { get; set; }
		public IEnumerable<string> created_by_ni { get; set; }
		#endregion
		#region modified_at
		public DateTime? modified_at_eq { get; set; }
		public DateTime? modified_at_ne { get; set; }
		public DateTime? modified_at_lt { get; set; }
		public DateTime? modified_at_gt { get; set; }
		public DateTime? modified_at_le { get; set; }
		public DateTime? modified_at_ge { get; set; }
		public IEnumerable<DateTime> modified_at_in { get; set; }
		public IEnumerable<DateTime> modified_at_ni { get; set; }
		#endregion
		#region modified_by
		public string modified_by_eq { get; set; }
		public string modified_by_ne { get; set; }
		public string modified_by_lt { get; set; }
		public string modified_by_gt { get; set; }
		public string modified_by_le { get; set; }
		public string modified_by_ge { get; set; }
		public IEnumerable<string> modified_by_in { get; set; }
		public IEnumerable<string> modified_by_ni { get; set; }
		#endregion
		#region removed_at
		public DateTime? removed_at_eq { get; set; }
		public DateTime? removed_at_ne { get; set; }
		public DateTime? removed_at_lt { get; set; }
		public DateTime? removed_at_gt { get; set; }
		public DateTime? removed_at_le { get; set; }
		public DateTime? removed_at_ge { get; set; }
		public IEnumerable<DateTime> removed_at_in { get; set; }
		public IEnumerable<DateTime> removed_at_ni { get; set; }
		#endregion
		#region row_version
		public byte[] row_version_eq { get; set; }
		public byte[] row_version_ne { get; set; }
		public byte[] row_version_lt { get; set; }
		public byte[] row_version_gt { get; set; }
		public byte[] row_version_le { get; set; }
		public byte[] row_version_ge { get; set; }
		public IEnumerable<byte[]> row_version_in { get; set; }
		public IEnumerable<byte[]> row_version_ni { get; set; }
		#endregion
		#endregion

		#region override
		override public Expression<Func<ContactType, bool>> CreatePredicate()
		{
			var predicate = PredicateBuilder.True<ContactType>();

			#region uid
			#endregion
			#region contact_type_id
			#endregion
			#region name
			#endregion
			#region description
			#endregion
			#region display_order
			#endregion
			#region created_at
			#endregion
			#region created_by
			#endregion
			#region modified_at
			#endregion
			#region modified_by
			#endregion
			#region removed_at
			#endregion
			#region row_version
			#endregion

			return predicate;
		}
		#endregion
	}
	#endregion
	#endregion

	#region peppaDB拡張
	public static partial class peppaDBExtend
	{
		#region Findメソッド
		/// <summary>
		/// 主キーを指定してTestデータ取得
		/// </summary>
		/// <param name="table"></param>
		/// <param name="p_uid">ユニークID(uid)</param>
		/// <returns></returns>
		public static Test Find(this ITable<Test> table, int p_uid)
		{
			return table.SingleOrDefault(_ => _.uid == p_uid);
		}
		/// <summary>
		/// 主キーを指定してErrorLogデータ取得
		/// </summary>
		/// <param name="table"></param>
		/// <param name="p_uid">ユニークID(uid)</param>
		/// <returns></returns>
		public static ErrorLog Find(this ITable<ErrorLog> table, int p_uid)
		{
			return table.SingleOrDefault(_ => _.uid == p_uid);
		}
		/// <summary>
		/// 主キーを指定してAccountデータ取得
		/// </summary>
		/// <param name="table"></param>
		/// <param name="p_account_id">アカウントID(account_id)</param>
		/// <returns></returns>
		public static Account Find(this ITable<Account> table, int p_account_id)
		{
			return table.SingleOrDefault(_ => _.account_id == p_account_id);
		}
		/// <summary>
		/// 主キーを指定してStaffデータ取得
		/// </summary>
		/// <param name="table"></param>
		/// <param name="p_staff_no">職員番号(staff_no)</param>
		/// <returns></returns>
		public static Staff Find(this ITable<Staff> table, string p_staff_no)
		{
			return table.SingleOrDefault(_ => _.staff_no == p_staff_no);
		}
		/// <summary>
		/// 主キーを指定してAddressデータ取得
		/// </summary>
		/// <param name="table"></param>
		/// <param name="p_user_type">利用者種別(user_type)</param>
		/// <param name="p_generic_user_no">利用者番号(generic_user_no)</param>
		/// <param name="p_seq">連番(seq)</param>
		/// <returns></returns>
		public static Address Find(this ITable<Address> table, int p_user_type, string p_generic_user_no, int p_seq)
		{
			return table.SingleOrDefault(_ => _.user_type == p_user_type && _.generic_user_no == p_generic_user_no && _.seq == p_seq);
		}
		/// <summary>
		/// 主キーを指定してAddressTypeデータ取得
		/// </summary>
		/// <param name="table"></param>
		/// <param name="p_address_type_id">住所種別ID(address_type_id)</param>
		/// <returns></returns>
		public static AddressType Find(this ITable<AddressType> table, int p_address_type_id)
		{
			return table.SingleOrDefault(_ => _.address_type_id == p_address_type_id);
		}
		/// <summary>
		/// 主キーを指定してContactデータ取得
		/// </summary>
		/// <param name="table"></param>
		/// <param name="p_user_type">利用者種別(user_type)</param>
		/// <param name="p_generic_user_no">利用者番号(generic_user_no)</param>
		/// <param name="p_seq">連番(seq)</param>
		/// <returns></returns>
		public static Contact Find(this ITable<Contact> table, int p_user_type, string p_generic_user_no, int p_seq)
		{
			return table.SingleOrDefault(_ => _.user_type == p_user_type && _.generic_user_no == p_generic_user_no && _.seq == p_seq);
		}
		/// <summary>
		/// 主キーを指定してContactTypeデータ取得
		/// </summary>
		/// <param name="table"></param>
		/// <param name="p_contact_type_id">連絡先種別ID(contact_type_id)</param>
		/// <returns></returns>
		public static ContactType Find(this ITable<ContactType> table, int p_contact_type_id)
		{
			return table.SingleOrDefault(_ => _.contact_type_id == p_contact_type_id);
		}
		#endregion
	}
	#endregion

}

#pragma warning restore 1591
