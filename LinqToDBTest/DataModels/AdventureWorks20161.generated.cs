//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

#pragma warning disable 1591

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Reflection;

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Data;
using LinqToDB.Mapping;

using Microsoft.SqlServer.Types;

namespace DataModels
{
	/// <summary>
	/// Database       : AdventureWorks2016
	/// Data Source    : localhost
	/// Server Version : 13.00.4224
	/// </summary>
	public partial class AdventureWorks2016DB : LinqToDB.Data.DataConnection
	{
		/// <summary>
		/// Street address information for customers, employees, and vendors.
		/// </summary>
		public ITable<Person_Address>                                   Addresses                              { get { return this.GetTable<Person_Address>(); } }
		/// <summary>
		/// Types of addresses stored in the Address table.
		/// </summary>
		public ITable<Person_AddressType>                               AddressTypes                           { get { return this.GetTable<Person_AddressType>(); } }
		/// <summary>
		/// Current version number of the AdventureWorks 2016 sample database.
		/// </summary>
		public ITable<AWBuildVersion>                                   AWBuildVersions                        { get { return this.GetTable<AWBuildVersion>(); } }
		/// <summary>
		/// Items required to make bicycles and bicycle subassemblies. It identifies the heirarchical relationship between a parent product and its components.
		/// </summary>
		public ITable<Production_BillOfMaterial>                        BillOfMaterials                        { get { return this.GetTable<Production_BillOfMaterial>(); } }
		/// <summary>
		/// Source of the ID that connects vendors, customers, and employees with address and contact information.
		/// </summary>
		public ITable<Person_BusinessEntity>                            BusinessEntities                       { get { return this.GetTable<Person_BusinessEntity>(); } }
		/// <summary>
		/// Cross-reference table mapping customers, vendors, and employees to their addresses.
		/// </summary>
		public ITable<Person_BusinessEntityAddress>                     BusinessEntityAddresses                { get { return this.GetTable<Person_BusinessEntityAddress>(); } }
		/// <summary>
		/// Cross-reference table mapping stores, vendors, and employees to people
		/// </summary>
		public ITable<Person_BusinessEntityContact>                     BusinessEntityContacts                 { get { return this.GetTable<Person_BusinessEntityContact>(); } }
		/// <summary>
		/// Lookup table containing the types of business entity contacts.
		/// </summary>
		public ITable<Person_ContactType>                               ContactTypes                           { get { return this.GetTable<Person_ContactType>(); } }
		/// <summary>
		/// Lookup table containing the ISO standard codes for countries and regions.
		/// </summary>
		public ITable<Person_CountryRegion>                             CountryRegions                         { get { return this.GetTable<Person_CountryRegion>(); } }
		/// <summary>
		/// Cross-reference table mapping ISO currency codes to a country or region.
		/// </summary>
		public ITable<Sales_CountryRegionCurrency>                      CountryRegionCurrencies                { get { return this.GetTable<Sales_CountryRegionCurrency>(); } }
		/// <summary>
		/// Customer credit card information.
		/// </summary>
		public ITable<Sales_CreditCard>                                 CreditCards                            { get { return this.GetTable<Sales_CreditCard>(); } }
		/// <summary>
		/// Lookup table containing the languages in which some AdventureWorks data is stored.
		/// </summary>
		public ITable<Production_Culture>                               Cultures                               { get { return this.GetTable<Production_Culture>(); } }
		/// <summary>
		/// Lookup table containing standard ISO currencies.
		/// </summary>
		public ITable<Sales_Currency>                                   Currencies                             { get { return this.GetTable<Sales_Currency>(); } }
		/// <summary>
		/// Currency exchange rates.
		/// </summary>
		public ITable<Sales_CurrencyRate>                               CurrencyRates                          { get { return this.GetTable<Sales_CurrencyRate>(); } }
		/// <summary>
		/// Current customer information. Also see the Person and Store tables.
		/// </summary>
		public ITable<Sales_Customer>                                   Customers                              { get { return this.GetTable<Sales_Customer>(); } }
		/// <summary>
		/// Audit table tracking all DDL changes made to the AdventureWorks database. Data is captured by the database trigger ddlDatabaseTriggerLog.
		/// </summary>
		public ITable<DatabaseLog>                                      DatabaseLogs                           { get { return this.GetTable<DatabaseLog>(); } }
		/// <summary>
		/// Lookup table containing the departments within the Adventure Works Cycles company.
		/// </summary>
		public ITable<HumanResources_Department>                        Departments                            { get { return this.GetTable<HumanResources_Department>(); } }
		/// <summary>
		/// Product maintenance documents.
		/// </summary>
		public ITable<Production_Document>                              Documents                              { get { return this.GetTable<Production_Document>(); } }
		/// <summary>
		/// Where to send a person email.
		/// </summary>
		public ITable<Person_EmailAddress>                              EmailAddresses                         { get { return this.GetTable<Person_EmailAddress>(); } }
		/// <summary>
		/// Employee information such as salary, department, and title.
		/// </summary>
		public ITable<HumanResources_Employee>                          Employees                              { get { return this.GetTable<HumanResources_Employee>(); } }
		/// <summary>
		/// Employee department transfers.
		/// </summary>
		public ITable<HumanResources_EmployeeDepartmentHistory>         EmployeeDepartmentHistories            { get { return this.GetTable<HumanResources_EmployeeDepartmentHistory>(); } }
		/// <summary>
		/// Employee pay history.
		/// </summary>
		public ITable<HumanResources_EmployeePayHistory>                EmployeePayHistories                   { get { return this.GetTable<HumanResources_EmployeePayHistory>(); } }
		/// <summary>
		/// Audit table tracking errors in the the AdventureWorks database that are caught by the CATCH block of a TRY...CATCH construct. Data is inserted by stored procedure dbo.uspLogError when it is executed from inside the CATCH block of a TRY...CATCH construct.
		/// </summary>
		public ITable<ErrorLog>                                         ErrorLogs                              { get { return this.GetTable<ErrorLog>(); } }
		/// <summary>
		/// Bicycle assembly diagrams.
		/// </summary>
		public ITable<Production_Illustration>                          Illustrations                          { get { return this.GetTable<Production_Illustration>(); } }
		/// <summary>
		/// Resumes submitted to Human Resources by job applicants.
		/// </summary>
		public ITable<HumanResources_JobCandidate>                      JobCandidates                          { get { return this.GetTable<HumanResources_JobCandidate>(); } }
		/// <summary>
		/// Product inventory and manufacturing locations.
		/// </summary>
		public ITable<Production_Location>                              Locations                              { get { return this.GetTable<Production_Location>(); } }
		/// <summary>
		/// One way hashed authentication information
		/// </summary>
		public ITable<Person_Password>                                  Passwords                              { get { return this.GetTable<Person_Password>(); } }
		/// <summary>
		/// Human beings involved with AdventureWorks: employees, customer contacts, and vendor contacts.
		/// </summary>
		public ITable<Person_Person>                                    People                                 { get { return this.GetTable<Person_Person>(); } }
		/// <summary>
		/// Cross-reference table mapping people to their credit card information in the CreditCard table.
		/// </summary>
		public ITable<Sales_PersonCreditCard>                           PersonCreditCards                      { get { return this.GetTable<Sales_PersonCreditCard>(); } }
		/// <summary>
		/// Telephone number and type of a person.
		/// </summary>
		public ITable<Person_PersonPhone>                               PersonPhones                           { get { return this.GetTable<Person_PersonPhone>(); } }
		/// <summary>
		/// Type of phone number of a person.
		/// </summary>
		public ITable<Person_PhoneNumberType>                           PhoneNumberTypes                       { get { return this.GetTable<Person_PhoneNumberType>(); } }
		/// <summary>
		/// Products sold or used in the manfacturing of sold products.
		/// </summary>
		public ITable<Production_Product>                               Products                               { get { return this.GetTable<Production_Product>(); } }
		/// <summary>
		/// High-level product categorization.
		/// </summary>
		public ITable<Production_ProductCategory>                       ProductCategories                      { get { return this.GetTable<Production_ProductCategory>(); } }
		/// <summary>
		/// Changes in the cost of a product over time.
		/// </summary>
		public ITable<Production_ProductCostHistory>                    ProductCostHistories                   { get { return this.GetTable<Production_ProductCostHistory>(); } }
		/// <summary>
		/// Product descriptions in several languages.
		/// </summary>
		public ITable<Production_ProductDescription>                    ProductDescriptions                    { get { return this.GetTable<Production_ProductDescription>(); } }
		/// <summary>
		/// Cross-reference table mapping products to related product documents.
		/// </summary>
		public ITable<Production_ProductDocument>                       ProductDocuments                       { get { return this.GetTable<Production_ProductDocument>(); } }
		/// <summary>
		/// Product inventory information.
		/// </summary>
		public ITable<Production_ProductInventory>                      ProductInventories                     { get { return this.GetTable<Production_ProductInventory>(); } }
		/// <summary>
		/// Changes in the list price of a product over time.
		/// </summary>
		public ITable<Production_ProductListPriceHistory>               ProductListPriceHistories              { get { return this.GetTable<Production_ProductListPriceHistory>(); } }
		/// <summary>
		/// Product model classification.
		/// </summary>
		public ITable<Production_ProductModel>                          ProductModels                          { get { return this.GetTable<Production_ProductModel>(); } }
		/// <summary>
		/// Cross-reference table mapping product models and illustrations.
		/// </summary>
		public ITable<Production_ProductModelIllustration>              ProductModelIllustrations              { get { return this.GetTable<Production_ProductModelIllustration>(); } }
		/// <summary>
		/// Cross-reference table mapping product descriptions and the language the description is written in.
		/// </summary>
		public ITable<Production_ProductModelProductDescriptionCulture> ProductModelProductDescriptionCultures { get { return this.GetTable<Production_ProductModelProductDescriptionCulture>(); } }
		/// <summary>
		/// Product images.
		/// </summary>
		public ITable<Production_ProductPhoto>                          ProductPhotos                          { get { return this.GetTable<Production_ProductPhoto>(); } }
		/// <summary>
		/// Cross-reference table mapping products and product photos.
		/// </summary>
		public ITable<Production_ProductProductPhoto>                   ProductProductPhotos                   { get { return this.GetTable<Production_ProductProductPhoto>(); } }
		/// <summary>
		/// Customer reviews of products they have purchased.
		/// </summary>
		public ITable<Production_ProductReview>                         ProductReviews                         { get { return this.GetTable<Production_ProductReview>(); } }
		/// <summary>
		/// Product subcategories. See ProductCategory table.
		/// </summary>
		public ITable<Production_ProductSubcategory>                    ProductSubcategories                   { get { return this.GetTable<Production_ProductSubcategory>(); } }
		/// <summary>
		/// Cross-reference table mapping vendors with the products they supply.
		/// </summary>
		public ITable<Purchasing_ProductVendor>                         ProductVendors                         { get { return this.GetTable<Purchasing_ProductVendor>(); } }
		/// <summary>
		/// Individual products associated with a specific purchase order. See PurchaseOrderHeader.
		/// </summary>
		public ITable<Purchasing_PurchaseOrderDetail>                   PurchaseOrderDetails                   { get { return this.GetTable<Purchasing_PurchaseOrderDetail>(); } }
		/// <summary>
		/// General purchase order information. See PurchaseOrderDetail.
		/// </summary>
		public ITable<Purchasing_PurchaseOrderHeader>                   PurchaseOrderHeaders                   { get { return this.GetTable<Purchasing_PurchaseOrderHeader>(); } }
		/// <summary>
		/// Individual products associated with a specific sales order. See SalesOrderHeader.
		/// </summary>
		public ITable<Sales_SalesOrderDetail>                           SalesOrderDetails                      { get { return this.GetTable<Sales_SalesOrderDetail>(); } }
		/// <summary>
		/// General sales order information.
		/// </summary>
		public ITable<Sales_SalesOrderHeader>                           SalesOrderHeaders                      { get { return this.GetTable<Sales_SalesOrderHeader>(); } }
		/// <summary>
		/// Cross-reference table mapping sales orders to sales reason codes.
		/// </summary>
		public ITable<Sales_SalesOrderHeaderSalesReason>                SalesOrderHeaderSalesReasons           { get { return this.GetTable<Sales_SalesOrderHeaderSalesReason>(); } }
		/// <summary>
		/// Sales representative current information.
		/// </summary>
		public ITable<Sales_SalesPerson>                                SalesPeople                            { get { return this.GetTable<Sales_SalesPerson>(); } }
		/// <summary>
		/// Sales performance tracking.
		/// </summary>
		public ITable<Sales_SalesPersonQuotaHistory>                    SalesPersonQuotaHistories              { get { return this.GetTable<Sales_SalesPersonQuotaHistory>(); } }
		/// <summary>
		/// Lookup table of customer purchase reasons.
		/// </summary>
		public ITable<Sales_SalesReason>                                SalesReasons                           { get { return this.GetTable<Sales_SalesReason>(); } }
		/// <summary>
		/// Tax rate lookup table.
		/// </summary>
		public ITable<Sales_SalesTaxRate>                               SalesTaxRates                          { get { return this.GetTable<Sales_SalesTaxRate>(); } }
		/// <summary>
		/// Sales territory lookup table.
		/// </summary>
		public ITable<Sales_SalesTerritory>                             SalesTerritories                       { get { return this.GetTable<Sales_SalesTerritory>(); } }
		/// <summary>
		/// Sales representative transfers to other sales territories.
		/// </summary>
		public ITable<Sales_SalesTerritoryHistory>                      SalesTerritoryHistories                { get { return this.GetTable<Sales_SalesTerritoryHistory>(); } }
		/// <summary>
		/// Manufacturing failure reasons lookup table.
		/// </summary>
		public ITable<Production_ScrapReason>                           ScrapReasons                           { get { return this.GetTable<Production_ScrapReason>(); } }
		/// <summary>
		/// Work shift lookup table.
		/// </summary>
		public ITable<HumanResources_Shift>                             Shifts                                 { get { return this.GetTable<HumanResources_Shift>(); } }
		/// <summary>
		/// Shipping company lookup table.
		/// </summary>
		public ITable<Purchasing_ShipMethod>                            ShipMethods                            { get { return this.GetTable<Purchasing_ShipMethod>(); } }
		/// <summary>
		/// Contains online customer orders until the order is submitted or cancelled.
		/// </summary>
		public ITable<Sales_ShoppingCartItem>                           ShoppingCartItems                      { get { return this.GetTable<Sales_ShoppingCartItem>(); } }
		/// <summary>
		/// Sale discounts lookup table.
		/// </summary>
		public ITable<Sales_SpecialOffer>                               SpecialOffers                          { get { return this.GetTable<Sales_SpecialOffer>(); } }
		/// <summary>
		/// Cross-reference table mapping products to special offer discounts.
		/// </summary>
		public ITable<Sales_SpecialOfferProduct>                        SpecialOfferProducts                   { get { return this.GetTable<Sales_SpecialOfferProduct>(); } }
		/// <summary>
		/// State and province lookup table.
		/// </summary>
		public ITable<Person_StateProvince>                             StateProvinces                         { get { return this.GetTable<Person_StateProvince>(); } }
		/// <summary>
		/// Customers (resellers) of Adventure Works products.
		/// </summary>
		public ITable<Sales_Store>                                      Stores                                 { get { return this.GetTable<Sales_Store>(); } }
		/// <summary>
		/// Record of each purchase order, sales order, or work order transaction year to date.
		/// </summary>
		public ITable<Production_TransactionHistory>                    TransactionHistories                   { get { return this.GetTable<Production_TransactionHistory>(); } }
		/// <summary>
		/// Transactions for previous years.
		/// </summary>
		public ITable<Production_TransactionHistoryArchive>             TransactionHistoryArchives             { get { return this.GetTable<Production_TransactionHistoryArchive>(); } }
		/// <summary>
		/// Unit of measure lookup table.
		/// </summary>
		public ITable<Production_UnitMeasure>                           UnitMeasures                           { get { return this.GetTable<Production_UnitMeasure>(); } }
		/// <summary>
		/// Displays the contact name and content from each element in the xml column AdditionalContactInfo for that person.
		/// </summary>
		public ITable<Person_VAdditionalContactInfo>                    VAdditionalContactInfo                 { get { return this.GetTable<Person_VAdditionalContactInfo>(); } }
		/// <summary>
		/// Employee names and addresses.
		/// </summary>
		public ITable<HumanResources_VEmployee>                         VEmployees                             { get { return this.GetTable<HumanResources_VEmployee>(); } }
		/// <summary>
		/// Returns employee name, title, and current department.
		/// </summary>
		public ITable<HumanResources_VEmployeeDepartment>               VEmployeeDepartments                   { get { return this.GetTable<HumanResources_VEmployeeDepartment>(); } }
		/// <summary>
		/// Returns employee name and current and previous departments.
		/// </summary>
		public ITable<HumanResources_VEmployeeDepartmentHistory>        VEmployeeDepartmentHistories           { get { return this.GetTable<HumanResources_VEmployeeDepartmentHistory>(); } }
		/// <summary>
		/// Companies from whom Adventure Works Cycles purchases parts or other goods.
		/// </summary>
		public ITable<Purchasing_Vendor>                                Vendors                                { get { return this.GetTable<Purchasing_Vendor>(); } }
		/// <summary>
		/// Individual customers (names and addresses) that purchase Adventure Works Cycles products online.
		/// </summary>
		public ITable<Sales_VIndividualCustomer>                        VIndividualCustomers                   { get { return this.GetTable<Sales_VIndividualCustomer>(); } }
		/// <summary>
		/// Job candidate names and resumes.
		/// </summary>
		public ITable<HumanResources_VJobCandidate>                     VJobCandidates                         { get { return this.GetTable<HumanResources_VJobCandidate>(); } }
		/// <summary>
		/// Displays the content from each education related element in the xml column Resume in the HumanResources.JobCandidate table. The content has been localized into French, Simplified Chinese and Thai. Some data may not display correctly unless supplemental language support is installed.
		/// </summary>
		public ITable<HumanResources_VJobCandidateEducation>            VJobCandidateEducations                { get { return this.GetTable<HumanResources_VJobCandidateEducation>(); } }
		/// <summary>
		/// Displays the content from each employement history related element in the xml column Resume in the HumanResources.JobCandidate table. The content has been localized into French, Simplified Chinese and Thai. Some data may not display correctly unless supplemental language support is installed.
		/// </summary>
		public ITable<HumanResources_VJobCandidateEmployment>           VJobCandidateEmployments               { get { return this.GetTable<HumanResources_VJobCandidateEmployment>(); } }
		/// <summary>
		/// Displays the content from each element in the xml column Demographics for each customer in the Person.Person table.
		/// </summary>
		public ITable<Sales_VPersonDemographic>                         VPersonDemographics                    { get { return this.GetTable<Sales_VPersonDemographic>(); } }
		/// <summary>
		/// Product names and descriptions. Product descriptions are provided in multiple languages.
		/// </summary>
		public ITable<Production_VProductAndDescription>                VProductAndDescriptions                { get { return this.GetTable<Production_VProductAndDescription>(); } }
		/// <summary>
		/// Displays the content from each element in the xml column CatalogDescription for each product in the Production.ProductModel table that has catalog data.
		/// </summary>
		public ITable<Production_VProductModelCatalogDescription>       VProductModelCatalogDescriptions       { get { return this.GetTable<Production_VProductModelCatalogDescription>(); } }
		/// <summary>
		/// Displays the content from each element in the xml column Instructions for each product in the Production.ProductModel table that has manufacturing instructions.
		/// </summary>
		public ITable<Production_VProductModelInstruction>              VProductModelInstructions              { get { return this.GetTable<Production_VProductModelInstruction>(); } }
		/// <summary>
		/// Sales representiatives (names and addresses) and their sales-related information.
		/// </summary>
		public ITable<Sales_VSalesPerson>                               VSalesPeople                           { get { return this.GetTable<Sales_VSalesPerson>(); } }
		/// <summary>
		/// Uses PIVOT to return aggregated sales information for each sales representative.
		/// </summary>
		public ITable<Sales_VSalesPersonSalesByFiscalYear>              VSalesPersonSalesByFiscalYears         { get { return this.GetTable<Sales_VSalesPersonSalesByFiscalYear>(); } }
		/// <summary>
		/// Joins StateProvince table with CountryRegion table.
		/// </summary>
		public ITable<Person_VStateProvinceCountryRegion>               VStateProvinceCountryRegions           { get { return this.GetTable<Person_VStateProvinceCountryRegion>(); } }
		/// <summary>
		/// Stores (including store addresses) that sell Adventure Works Cycles products to consumers.
		/// </summary>
		public ITable<Sales_VStoreWithAddress>                          VStoreWithAddresses                    { get { return this.GetTable<Sales_VStoreWithAddress>(); } }
		/// <summary>
		/// Stores (including store contacts) that sell Adventure Works Cycles products to consumers.
		/// </summary>
		public ITable<Sales_VStoreWithContact>                          VStoreWithContacts                     { get { return this.GetTable<Sales_VStoreWithContact>(); } }
		/// <summary>
		/// Stores (including demographics) that sell Adventure Works Cycles products to consumers.
		/// </summary>
		public ITable<Sales_VStoreWithDemographic>                      VStoreWithDemographics                 { get { return this.GetTable<Sales_VStoreWithDemographic>(); } }
		/// <summary>
		/// Vendor (company) names and addresses .
		/// </summary>
		public ITable<Purchasing_VVendorWithAddress>                    VVendorWithAddresses                   { get { return this.GetTable<Purchasing_VVendorWithAddress>(); } }
		/// <summary>
		/// Vendor (company) names  and the names of vendor employees to contact.
		/// </summary>
		public ITable<Purchasing_VVendorWithContact>                    VVendorWithContacts                    { get { return this.GetTable<Purchasing_VVendorWithContact>(); } }
		/// <summary>
		/// Manufacturing work orders.
		/// </summary>
		public ITable<Production_WorkOrder>                             WorkOrders                             { get { return this.GetTable<Production_WorkOrder>(); } }
		/// <summary>
		/// Work order details.
		/// </summary>
		public ITable<Production_WorkOrderRouting>                      WorkOrderRoutings                      { get { return this.GetTable<Production_WorkOrderRouting>(); } }

		public AdventureWorks2016DB()
		{
			InitDataContext();
			InitMappingSchema();
		}

		public AdventureWorks2016DB(string configuration)
			: base(configuration)
		{
			InitDataContext();
			InitMappingSchema();
		}

		partial void InitDataContext  ();
		partial void InitMappingSchema();

		#region Table Functions

		#region UfnGetContactInformation

		[Sql.TableFunction(Schema="dbo", Name="ufnGetContactInformation")]
		public ITable<UfnGetContactInformationResult> UfnGetContactInformation(int? @PersonID)
		{
			return this.GetTable<UfnGetContactInformationResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				@PersonID);
		}

		public partial class UfnGetContactInformationResult
		{
			public int    PersonID           { get; set; }
			public string FirstName          { get; set; }
			public string LastName           { get; set; }
			public string JobTitle           { get; set; }
			public string BusinessEntityType { get; set; }
		}

		#endregion

		#endregion
	}

	/// <summary>
	/// Street address information for customers, employees, and vendors.
	/// </summary>
	[Table(Schema="Person", Name="Address")]
	public partial class Person_Address
	{
		/// <summary>
		/// Primary key for Address records.
		/// </summary>
		[Column(),          PrimaryKey,  Identity] public int          AddressID       { get; set; } // int
		/// <summary>
		/// First street address line.
		/// </summary>
		[Column(),          NotNull              ] public string       AddressLine1    { get; set; } // nvarchar(60)
		/// <summary>
		/// Second street address line.
		/// </summary>
		[Column(),             Nullable          ] public string       AddressLine2    { get; set; } // nvarchar(60)
		/// <summary>
		/// Name of the city.
		/// </summary>
		[Column(),          NotNull              ] public string       City            { get; set; } // nvarchar(30)
		/// <summary>
		/// Unique identification number for the state or province. Foreign key to StateProvince table.
		/// </summary>
		[Column(),          NotNull              ] public int          StateProvinceID { get; set; } // int
		/// <summary>
		/// Postal code for the street address.
		/// </summary>
		[Column(),          NotNull              ] public string       PostalCode      { get; set; } // nvarchar(15)
		/// <summary>
		/// Latitude and longitude of this address.
		/// </summary>
		[Column(),             Nullable          ] public SqlGeography SpatialLocation { get; set; } // geography
		/// <summary>
		/// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		[Column("rowguid"), NotNull              ] public Guid         Rowguid         { get; set; } // uniqueidentifier
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column(),          NotNull              ] public DateTime     ModifiedDate    { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_BusinessEntityAddress_Address_AddressID_BackReference
		/// </summary>
		[Association(ThisKey="AddressID", OtherKey="AddressID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Person_BusinessEntityAddress> BusinessEntityAddressAddressIds { get; set; }

		/// <summary>
		/// FK_SalesOrderHeader_Address_BillToAddressID_BackReference
		/// </summary>
		[Association(ThisKey="AddressID", OtherKey="BillToAddressID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Sales_SalesOrderHeader> SalesOrderHeaderBillToAddressIds { get; set; }

		/// <summary>
		/// FK_SalesOrderHeader_Address_ShipToAddressID_BackReference
		/// </summary>
		[Association(ThisKey="AddressID", OtherKey="ShipToAddressID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Sales_SalesOrderHeader> SalesOrderHeaderShipToAddressIds { get; set; }

		/// <summary>
		/// FK_Address_StateProvince_StateProvinceID
		/// </summary>
		[Association(ThisKey="StateProvinceID", OtherKey="StateProvinceID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_Address_StateProvince_StateProvinceID", BackReferenceName="AddressStateProvinceIds")]
		public Person_StateProvince StateProvince { get; set; }

		#endregion
	}

	/// <summary>
	/// Types of addresses stored in the Address table.
	/// </summary>
	[Table(Schema="Person", Name="AddressType")]
	public partial class Person_AddressType
	{
		/// <summary>
		/// Primary key for AddressType records.
		/// </summary>
		[Column(),          PrimaryKey, Identity] public int      AddressTypeID { get; set; } // int
		/// <summary>
		/// Address type description. For example, Billing, Home, or Shipping.
		/// </summary>
		[Column(),          NotNull             ] public string   Name          { get; set; } // nvarchar(50)
		/// <summary>
		/// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		[Column("rowguid"), NotNull             ] public Guid     Rowguid       { get; set; } // uniqueidentifier
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column(),          NotNull             ] public DateTime ModifiedDate  { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_BusinessEntityAddress_AddressType_AddressTypeID_BackReference
		/// </summary>
		[Association(ThisKey="AddressTypeID", OtherKey="AddressTypeID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Person_BusinessEntityAddress> BusinessEntityAddressAddressTypeIds { get; set; }

		#endregion
	}

	/// <summary>
	/// Current version number of the AdventureWorks 2016 sample database.
	/// </summary>
	[Table(Schema="dbo", Name="AWBuildVersion")]
	public partial class AWBuildVersion
	{
		/// <summary>
		/// Primary key for AWBuildVersion records.
		/// </summary>
		[Column(),                   PrimaryKey, Identity] public byte     SystemInformationID { get; set; } // tinyint
		/// <summary>
		/// Version number of the database in 9.yy.mm.dd.00 format.
		/// </summary>
		[Column("Database Version"), NotNull             ] public string   DatabaseVersion     { get; set; } // nvarchar(25)
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column(),                   NotNull             ] public DateTime VersionDate         { get; set; } // datetime
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column(),                   NotNull             ] public DateTime ModifiedDate        { get; set; } // datetime
	}

	/// <summary>
	/// Items required to make bicycles and bicycle subassemblies. It identifies the heirarchical relationship between a parent product and its components.
	/// </summary>
	[Table(Schema="Production", Name="BillOfMaterials")]
	public partial class Production_BillOfMaterial
	{
		/// <summary>
		/// Primary key for BillOfMaterials records.
		/// </summary>
		[PrimaryKey, Identity   ] public int       BillOfMaterialsID { get; set; } // int
		/// <summary>
		/// Parent product identification number. Foreign key to Product.ProductID.
		/// </summary>
		[Column,        Nullable] public int?      ProductAssemblyID { get; set; } // int
		/// <summary>
		/// Component identification number. Foreign key to Product.ProductID.
		/// </summary>
		[Column,     NotNull    ] public int       ComponentID       { get; set; } // int
		/// <summary>
		/// Date the component started being used in the assembly item.
		/// </summary>
		[Column,     NotNull    ] public DateTime  StartDate         { get; set; } // datetime
		/// <summary>
		/// Date the component stopped being used in the assembly item.
		/// </summary>
		[Column,        Nullable] public DateTime? EndDate           { get; set; } // datetime
		/// <summary>
		/// Standard code identifying the unit of measure for the quantity.
		/// </summary>
		[Column,     NotNull    ] public string    UnitMeasureCode   { get; set; } // nchar(3)
		/// <summary>
		/// Indicates the depth the component is from its parent (AssemblyID).
		/// </summary>
		[Column,     NotNull    ] public short     BOMLevel          { get; set; } // smallint
		/// <summary>
		/// Quantity of the component needed to create the assembly.
		/// </summary>
		[Column,     NotNull    ] public decimal   PerAssemblyQty    { get; set; } // decimal(8, 2)
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,     NotNull    ] public DateTime  ModifiedDate      { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_BillOfMaterials_Product_ComponentID
		/// </summary>
		[Association(ThisKey="ComponentID", OtherKey="ProductID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_BillOfMaterials_Product_ComponentID", BackReferenceName="BillOfMaterialsComponentIds")]
		public Production_Product Component { get; set; }

		/// <summary>
		/// FK_BillOfMaterials_Product_ProductAssemblyID
		/// </summary>
		[Association(ThisKey="ProductAssemblyID", OtherKey="ProductID", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_BillOfMaterials_Product_ProductAssemblyID", BackReferenceName="BillOfMaterialsProductAssemblyIds")]
		public Production_Product ProductAssembly { get; set; }

		/// <summary>
		/// FK_BillOfMaterials_UnitMeasure_UnitMeasureCode
		/// </summary>
		[Association(ThisKey="UnitMeasureCode", OtherKey="UnitMeasureCode", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_BillOfMaterials_UnitMeasure_UnitMeasureCode", BackReferenceName="BillOfMaterialsUnitMeasureCodes")]
		public Production_UnitMeasure UnitMeasureUnitMeasureCode { get; set; }

		#endregion
	}

	/// <summary>
	/// Source of the ID that connects vendors, customers, and employees with address and contact information.
	/// </summary>
	[Table(Schema="Person", Name="BusinessEntity")]
	public partial class Person_BusinessEntity
	{
		/// <summary>
		/// Primary key for all customers, vendors, and employees.
		/// </summary>
		[Column(),          PrimaryKey, Identity] public int      BusinessEntityID { get; set; } // int
		/// <summary>
		/// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		[Column("rowguid"), NotNull             ] public Guid     Rowguid          { get; set; } // uniqueidentifier
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column(),          NotNull             ] public DateTime ModifiedDate     { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID_BackReference
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Person_BusinessEntityAddress> BusinessEntityAddressBusinessEntityIds { get; set; }

		/// <summary>
		/// FK_BusinessEntityContact_BusinessEntity_BusinessEntityID_BackReference
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Person_BusinessEntityContact> BusinessEntityContactBusinessEntityIds { get; set; }

		/// <summary>
		/// FK_Person_BusinessEntity_BusinessEntityID_BackReference
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", CanBeNull=true, Relationship=Relationship.OneToOne, IsBackReference=true)]
		public Person_Person FkPersonBusinessEntityBusinessEntityIDBackReference { get; set; }

		/// <summary>
		/// FK_Store_BusinessEntity_BusinessEntityID_BackReference
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", CanBeNull=true, Relationship=Relationship.OneToOne, IsBackReference=true)]
		public Sales_Store StoreBusinessEntityID { get; set; }

		/// <summary>
		/// FK_Vendor_BusinessEntity_BusinessEntityID_BackReference
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", CanBeNull=true, Relationship=Relationship.OneToOne, IsBackReference=true)]
		public Purchasing_Vendor VendorBusinessEntityID { get; set; }

		#endregion
	}

	/// <summary>
	/// Cross-reference table mapping customers, vendors, and employees to their addresses.
	/// </summary>
	[Table(Schema="Person", Name="BusinessEntityAddress")]
	public partial class Person_BusinessEntityAddress
	{
		/// <summary>
		/// Primary key. Foreign key to BusinessEntity.BusinessEntityID.
		/// </summary>
		[Column(),          PrimaryKey(1), NotNull] public int      BusinessEntityID { get; set; } // int
		/// <summary>
		/// Primary key. Foreign key to Address.AddressID.
		/// </summary>
		[Column(),          PrimaryKey(2), NotNull] public int      AddressID        { get; set; } // int
		/// <summary>
		/// Primary key. Foreign key to AddressType.AddressTypeID.
		/// </summary>
		[Column(),          PrimaryKey(3), NotNull] public int      AddressTypeID    { get; set; } // int
		/// <summary>
		/// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		[Column("rowguid"),                NotNull] public Guid     Rowguid          { get; set; } // uniqueidentifier
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column(),                         NotNull] public DateTime ModifiedDate     { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_BusinessEntityAddress_Address_AddressID
		/// </summary>
		[Association(ThisKey="AddressID", OtherKey="AddressID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_BusinessEntityAddress_Address_AddressID", BackReferenceName="BusinessEntityAddressAddressIds")]
		public Person_Address Address { get; set; }

		/// <summary>
		/// FK_BusinessEntityAddress_AddressType_AddressTypeID
		/// </summary>
		[Association(ThisKey="AddressTypeID", OtherKey="AddressTypeID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_BusinessEntityAddress_AddressType_AddressTypeID", BackReferenceName="BusinessEntityAddressAddressTypeIds")]
		public Person_AddressType AddressType { get; set; }

		/// <summary>
		/// FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID", BackReferenceName="BusinessEntityAddressBusinessEntityIds")]
		public Person_BusinessEntity BusinessEntity { get; set; }

		#endregion
	}

	/// <summary>
	/// Cross-reference table mapping stores, vendors, and employees to people
	/// </summary>
	[Table(Schema="Person", Name="BusinessEntityContact")]
	public partial class Person_BusinessEntityContact
	{
		/// <summary>
		/// Primary key. Foreign key to BusinessEntity.BusinessEntityID.
		/// </summary>
		[Column(),          PrimaryKey(1), NotNull] public int      BusinessEntityID { get; set; } // int
		/// <summary>
		/// Primary key. Foreign key to Person.BusinessEntityID.
		/// </summary>
		[Column(),          PrimaryKey(2), NotNull] public int      PersonID         { get; set; } // int
		/// <summary>
		/// Primary key.  Foreign key to ContactType.ContactTypeID.
		/// </summary>
		[Column(),          PrimaryKey(3), NotNull] public int      ContactTypeID    { get; set; } // int
		/// <summary>
		/// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		[Column("rowguid"),                NotNull] public Guid     Rowguid          { get; set; } // uniqueidentifier
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column(),                         NotNull] public DateTime ModifiedDate     { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_BusinessEntityContact_BusinessEntity_BusinessEntityID
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_BusinessEntityContact_BusinessEntity_BusinessEntityID", BackReferenceName="BusinessEntityContactBusinessEntityIds")]
		public Person_BusinessEntity BusinessEntity { get; set; }

		/// <summary>
		/// FK_BusinessEntityContact_ContactType_ContactTypeID
		/// </summary>
		[Association(ThisKey="ContactTypeID", OtherKey="ContactTypeID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_BusinessEntityContact_ContactType_ContactTypeID", BackReferenceName="BusinessEntityContactContactTypeIds")]
		public Person_ContactType ContactType { get; set; }

		/// <summary>
		/// FK_BusinessEntityContact_Person_PersonID
		/// </summary>
		[Association(ThisKey="PersonID", OtherKey="BusinessEntityID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_BusinessEntityContact_Person_PersonID", BackReferenceName="BusinessEntityContactPersonIds")]
		public Person_Person Person { get; set; }

		#endregion
	}

	/// <summary>
	/// Lookup table containing the types of business entity contacts.
	/// </summary>
	[Table(Schema="Person", Name="ContactType")]
	public partial class Person_ContactType
	{
		/// <summary>
		/// Primary key for ContactType records.
		/// </summary>
		[PrimaryKey, Identity] public int      ContactTypeID { get; set; } // int
		/// <summary>
		/// Contact type description.
		/// </summary>
		[Column,     NotNull ] public string   Name          { get; set; } // nvarchar(50)
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,     NotNull ] public DateTime ModifiedDate  { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_BusinessEntityContact_ContactType_ContactTypeID_BackReference
		/// </summary>
		[Association(ThisKey="ContactTypeID", OtherKey="ContactTypeID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Person_BusinessEntityContact> BusinessEntityContactContactTypeIds { get; set; }

		#endregion
	}

	/// <summary>
	/// Lookup table containing the ISO standard codes for countries and regions.
	/// </summary>
	[Table(Schema="Person", Name="CountryRegion")]
	public partial class Person_CountryRegion
	{
		/// <summary>
		/// ISO standard code for countries and regions.
		/// </summary>
		[PrimaryKey, NotNull] public string   CountryRegionCode { get; set; } // nvarchar(3)
		/// <summary>
		/// Country or region name.
		/// </summary>
		[Column,     NotNull] public string   Name              { get; set; } // nvarchar(50)
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,     NotNull] public DateTime ModifiedDate      { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_CountryRegionCurrency_CountryRegion_CountryRegionCode_BackReference
		/// </summary>
		[Association(ThisKey="CountryRegionCode", OtherKey="CountryRegionCode", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Sales_CountryRegionCurrency> CountryRegionCurrencyCountryRegionCodes { get; set; }

		/// <summary>
		/// FK_SalesTerritory_CountryRegion_CountryRegionCode_BackReference
		/// </summary>
		[Association(ThisKey="CountryRegionCode", OtherKey="CountryRegionCode", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Sales_SalesTerritory> SalesTerritoryCountryRegionCodes { get; set; }

		/// <summary>
		/// FK_StateProvince_CountryRegion_CountryRegionCode_BackReference
		/// </summary>
		[Association(ThisKey="CountryRegionCode", OtherKey="CountryRegionCode", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Person_StateProvince> StateProvinceCountryRegionCodes { get; set; }

		#endregion
	}

	/// <summary>
	/// Cross-reference table mapping ISO currency codes to a country or region.
	/// </summary>
	[Table(Schema="Sales", Name="CountryRegionCurrency")]
	public partial class Sales_CountryRegionCurrency
	{
		/// <summary>
		/// ISO code for countries and regions. Foreign key to CountryRegion.CountryRegionCode.
		/// </summary>
		[PrimaryKey(1), NotNull] public string   CountryRegionCode { get; set; } // nvarchar(3)
		/// <summary>
		/// ISO standard currency code. Foreign key to Currency.CurrencyCode.
		/// </summary>
		[PrimaryKey(2), NotNull] public string   CurrencyCode      { get; set; } // nchar(3)
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,        NotNull] public DateTime ModifiedDate      { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_CountryRegionCurrency_CountryRegion_CountryRegionCode
		/// </summary>
		[Association(ThisKey="CountryRegionCode", OtherKey="CountryRegionCode", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_CountryRegionCurrency_CountryRegion_CountryRegionCode", BackReferenceName="CountryRegionCurrencyCountryRegionCodes")]
		public Person_CountryRegion CountryRegionCountryRegionCode { get; set; }

		/// <summary>
		/// FK_CountryRegionCurrency_Currency_CurrencyCode
		/// </summary>
		[Association(ThisKey="CurrencyCode", OtherKey="CurrencyCode", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_CountryRegionCurrency_Currency_CurrencyCode", BackReferenceName="CountryRegionCurrencyCurrencyCodes")]
		public Sales_Currency CurrencyCurrencyCode { get; set; }

		#endregion
	}

	/// <summary>
	/// Customer credit card information.
	/// </summary>
	[Table(Schema="Sales", Name="CreditCard")]
	public partial class Sales_CreditCard
	{
		/// <summary>
		/// Primary key for CreditCard records.
		/// </summary>
		[PrimaryKey, Identity] public int      CreditCardID { get; set; } // int
		/// <summary>
		/// Credit card name.
		/// </summary>
		[Column,     NotNull ] public string   CardType     { get; set; } // nvarchar(50)
		/// <summary>
		/// Credit card number.
		/// </summary>
		[Column,     NotNull ] public string   CardNumber   { get; set; } // nvarchar(25)
		/// <summary>
		/// Credit card expiration month.
		/// </summary>
		[Column,     NotNull ] public byte     ExpMonth     { get; set; } // tinyint
		/// <summary>
		/// Credit card expiration year.
		/// </summary>
		[Column,     NotNull ] public short    ExpYear      { get; set; } // smallint
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,     NotNull ] public DateTime ModifiedDate { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_PersonCreditCard_CreditCard_CreditCardID_BackReference
		/// </summary>
		[Association(ThisKey="CreditCardID", OtherKey="CreditCardID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Sales_PersonCreditCard> PersonCreditCardCreditCardIds { get; set; }

		/// <summary>
		/// FK_SalesOrderHeader_CreditCard_CreditCardID_BackReference
		/// </summary>
		[Association(ThisKey="CreditCardID", OtherKey="CreditCardID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Sales_SalesOrderHeader> SalesOrderHeaderCreditCardIds { get; set; }

		#endregion
	}

	/// <summary>
	/// Lookup table containing the languages in which some AdventureWorks data is stored.
	/// </summary>
	[Table(Schema="Production", Name="Culture")]
	public partial class Production_Culture
	{
		/// <summary>
		/// Primary key for Culture records.
		/// </summary>
		[PrimaryKey, NotNull] public string   CultureID    { get; set; } // nchar(6)
		/// <summary>
		/// Culture description.
		/// </summary>
		[Column,     NotNull] public string   Name         { get; set; } // nvarchar(50)
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,     NotNull] public DateTime ModifiedDate { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_ProductModelProductDescriptionCulture_Culture_CultureID_BackReference
		/// </summary>
		[Association(ThisKey="CultureID", OtherKey="CultureID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Production_ProductModelProductDescriptionCulture> ProductModelProductDescriptionCultureCultureIds { get; set; }

		#endregion
	}

	/// <summary>
	/// Lookup table containing standard ISO currencies.
	/// </summary>
	[Table(Schema="Sales", Name="Currency")]
	public partial class Sales_Currency
	{
		/// <summary>
		/// The ISO code for the Currency.
		/// </summary>
		[PrimaryKey, NotNull] public string   CurrencyCode { get; set; } // nchar(3)
		/// <summary>
		/// Currency name.
		/// </summary>
		[Column,     NotNull] public string   Name         { get; set; } // nvarchar(50)
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,     NotNull] public DateTime ModifiedDate { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_CountryRegionCurrency_Currency_CurrencyCode_BackReference
		/// </summary>
		[Association(ThisKey="CurrencyCode", OtherKey="CurrencyCode", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Sales_CountryRegionCurrency> CountryRegionCurrencyCurrencyCodes { get; set; }

		/// <summary>
		/// FK_CurrencyRate_Currency_FromCurrencyCode_BackReference
		/// </summary>
		[Association(ThisKey="CurrencyCode", OtherKey="FromCurrencyCode", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Sales_CurrencyRate> CurrencyRateFromCurrencyCodes { get; set; }

		/// <summary>
		/// FK_CurrencyRate_Currency_ToCurrencyCode_BackReference
		/// </summary>
		[Association(ThisKey="CurrencyCode", OtherKey="ToCurrencyCode", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Sales_CurrencyRate> CurrencyRateToCurrencyCodes { get; set; }

		#endregion
	}

	/// <summary>
	/// Currency exchange rates.
	/// </summary>
	[Table(Schema="Sales", Name="CurrencyRate")]
	public partial class Sales_CurrencyRate
	{
		/// <summary>
		/// Primary key for CurrencyRate records.
		/// </summary>
		[PrimaryKey, Identity] public int      CurrencyRateID   { get; set; } // int
		/// <summary>
		/// Date and time the exchange rate was obtained.
		/// </summary>
		[Column,     NotNull ] public DateTime CurrencyRateDate { get; set; } // datetime
		/// <summary>
		/// Exchange rate was converted from this currency code.
		/// </summary>
		[Column,     NotNull ] public string   FromCurrencyCode { get; set; } // nchar(3)
		/// <summary>
		/// Exchange rate was converted to this currency code.
		/// </summary>
		[Column,     NotNull ] public string   ToCurrencyCode   { get; set; } // nchar(3)
		/// <summary>
		/// Average exchange rate for the day.
		/// </summary>
		[Column,     NotNull ] public decimal  AverageRate      { get; set; } // money
		/// <summary>
		/// Final exchange rate for the day.
		/// </summary>
		[Column,     NotNull ] public decimal  EndOfDayRate     { get; set; } // money
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,     NotNull ] public DateTime ModifiedDate     { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_CurrencyRate_Currency_FromCurrencyCode
		/// </summary>
		[Association(ThisKey="FromCurrencyCode", OtherKey="CurrencyCode", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_CurrencyRate_Currency_FromCurrencyCode", BackReferenceName="CurrencyRateFromCurrencyCodes")]
		public Sales_Currency CurrencyFromCurrencyCode { get; set; }

		/// <summary>
		/// FK_CurrencyRate_Currency_ToCurrencyCode
		/// </summary>
		[Association(ThisKey="ToCurrencyCode", OtherKey="CurrencyCode", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_CurrencyRate_Currency_ToCurrencyCode", BackReferenceName="CurrencyRateToCurrencyCodes")]
		public Sales_Currency CurrencyToCurrencyCode { get; set; }

		/// <summary>
		/// FK_SalesOrderHeader_CurrencyRate_CurrencyRateID_BackReference
		/// </summary>
		[Association(ThisKey="CurrencyRateID", OtherKey="CurrencyRateID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Sales_SalesOrderHeader> SalesOrderHeaderCurrencyRateIds { get; set; }

		#endregion
	}

	/// <summary>
	/// Current customer information. Also see the Person and Store tables.
	/// </summary>
	[Table(Schema="Sales", Name="Customer")]
	public partial class Sales_Customer
	{
		/// <summary>
		/// Primary key.
		/// </summary>
		[Column(),                                                PrimaryKey,  Identity] public int      CustomerID    { get; set; } // int
		/// <summary>
		/// Foreign key to Person.BusinessEntityID
		/// </summary>
		[Column(),                                                   Nullable          ] public int?     PersonID      { get; set; } // int
		/// <summary>
		/// Foreign key to Store.BusinessEntityID
		/// </summary>
		[Column(),                                                   Nullable          ] public int?     StoreID       { get; set; } // int
		/// <summary>
		/// ID of the territory in which the customer is located. Foreign key to SalesTerritory.SalesTerritoryID.
		/// </summary>
		[Column(),                                                   Nullable          ] public int?     TerritoryID   { get; set; } // int
		/// <summary>
		/// Unique number identifying the customer assigned by the accounting system.
		/// </summary>
		[Column(           SkipOnInsert=true, SkipOnUpdate=true), NotNull              ] public string   AccountNumber { get; set; } // varchar(10)
		/// <summary>
		/// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		[Column("rowguid"),                                       NotNull              ] public Guid     Rowguid       { get; set; } // uniqueidentifier
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column(),                                                NotNull              ] public DateTime ModifiedDate  { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_Customer_Person_PersonID
		/// </summary>
		[Association(ThisKey="PersonID", OtherKey="BusinessEntityID", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_Customer_Person_PersonID", BackReferenceName="CustomerPersonIds")]
		public Person_Person Person { get; set; }

		/// <summary>
		/// FK_SalesOrderHeader_Customer_CustomerID_BackReference
		/// </summary>
		[Association(ThisKey="CustomerID", OtherKey="CustomerID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Sales_SalesOrderHeader> SalesOrderHeaderCustomerIds { get; set; }

		/// <summary>
		/// FK_Customer_Store_StoreID
		/// </summary>
		[Association(ThisKey="StoreID", OtherKey="BusinessEntityID", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_Customer_Store_StoreID", BackReferenceName="CustomerStoreIds")]
		public Sales_Store Store { get; set; }

		/// <summary>
		/// FK_Customer_SalesTerritory_TerritoryID
		/// </summary>
		[Association(ThisKey="TerritoryID", OtherKey="TerritoryID", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_Customer_SalesTerritory_TerritoryID", BackReferenceName="CustomerTerritoryIds")]
		public Sales_SalesTerritory Territory { get; set; }

		#endregion
	}

	/// <summary>
	/// Audit table tracking all DDL changes made to the AdventureWorks database. Data is captured by the database trigger ddlDatabaseTriggerLog.
	/// </summary>
	[Table(Schema="dbo", Name="DatabaseLog")]
	public partial class DatabaseLog
	{
		/// <summary>
		/// Primary key for DatabaseLog records.
		/// </summary>
		[PrimaryKey, Identity   ] public int      DatabaseLogID { get; set; } // int
		/// <summary>
		/// The date and time the DDL change occurred.
		/// </summary>
		[Column,     NotNull    ] public DateTime PostTime      { get; set; } // datetime
		/// <summary>
		/// The user who implemented the DDL change.
		/// </summary>
		[Column,     NotNull    ] public string   DatabaseUser  { get; set; } // nvarchar(128)
		/// <summary>
		/// The type of DDL statement that was executed.
		/// </summary>
		[Column,     NotNull    ] public string   Event         { get; set; } // nvarchar(128)
		/// <summary>
		/// The schema to which the changed object belongs.
		/// </summary>
		[Column,        Nullable] public string   Schema        { get; set; } // nvarchar(128)
		/// <summary>
		/// The object that was changed by the DDL statment.
		/// </summary>
		[Column,        Nullable] public string   Object        { get; set; } // nvarchar(128)
		/// <summary>
		/// The exact Transact-SQL statement that was executed.
		/// </summary>
		[Column,     NotNull    ] public string   TSQL          { get; set; } // nvarchar(max)
		/// <summary>
		/// The raw XML data generated by database trigger.
		/// </summary>
		[Column,     NotNull    ] public string   XmlEvent      { get; set; } // xml
	}

	/// <summary>
	/// Lookup table containing the departments within the Adventure Works Cycles company.
	/// </summary>
	[Table(Schema="HumanResources", Name="Department")]
	public partial class HumanResources_Department
	{
		/// <summary>
		/// Primary key for Department records.
		/// </summary>
		[PrimaryKey, Identity] public short    DepartmentID { get; set; } // smallint
		/// <summary>
		/// Name of the department.
		/// </summary>
		[Column,     NotNull ] public string   Name         { get; set; } // nvarchar(50)
		/// <summary>
		/// Name of the group to which the department belongs.
		/// </summary>
		[Column,     NotNull ] public string   GroupName    { get; set; } // nvarchar(50)
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,     NotNull ] public DateTime ModifiedDate { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_EmployeeDepartmentHistory_Department_DepartmentID_BackReference
		/// </summary>
		[Association(ThisKey="DepartmentID", OtherKey="DepartmentID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<HumanResources_EmployeeDepartmentHistory> EmployeeDepartmentHistoryDepartmentIds { get; set; }

		#endregion
	}

	/// <summary>
	/// Product maintenance documents.
	/// </summary>
	[Table(Schema="Production", Name="Document")]
	public partial class Production_Document
	{
		/// <summary>
		/// Primary key for Document records.
		/// </summary>
		[Column(),                                                 PrimaryKey,  NotNull] public SqlHierarchyId DocumentNode    { get; set; } // hierarchyid
		/// <summary>
		/// Depth in the document hierarchy.
		/// </summary>
		[Column(            SkipOnInsert=true, SkipOnUpdate=true),    Nullable         ] public short?         DocumentLevel   { get; set; } // smallint
		/// <summary>
		/// Title of the document.
		/// </summary>
		[Column(),                                                              NotNull] public string         Title           { get; set; } // nvarchar(50)
		/// <summary>
		/// Employee who controls the document.  Foreign key to Employee.BusinessEntityID
		/// </summary>
		[Column(),                                                              NotNull] public int            Owner           { get; set; } // int
		/// <summary>
		/// 0 = This is a folder, 1 = This is a document.
		/// </summary>
		[Column(),                                                              NotNull] public bool           FolderFlag      { get; set; } // bit
		/// <summary>
		/// File name of the document
		/// </summary>
		[Column(),                                                              NotNull] public string         FileName        { get; set; } // nvarchar(400)
		/// <summary>
		/// File extension indicating the document type. For example, .doc or .txt.
		/// </summary>
		[Column(),                                                              NotNull] public string         FileExtension   { get; set; } // nvarchar(8)
		/// <summary>
		/// Revision number of the document.
		/// </summary>
		[Column(),                                                              NotNull] public string         Revision        { get; set; } // nchar(5)
		/// <summary>
		/// Engineering change approval number.
		/// </summary>
		[Column(),                                                              NotNull] public int            ChangeNumber    { get; set; } // int
		/// <summary>
		/// 1 = Pending approval, 2 = Approved, 3 = Obsolete
		/// </summary>
		[Column(),                                                              NotNull] public byte           Status          { get; set; } // tinyint
		/// <summary>
		/// Document abstract.
		/// </summary>
		[Column(),                                                    Nullable         ] public string         DocumentSummary { get; set; } // nvarchar(max)
		/// <summary>
		/// Complete document.
		/// </summary>
		[Column("Document"),                                          Nullable         ] public byte[]         Document_Column { get; set; } // varbinary(max)
		/// <summary>
		/// ROWGUIDCOL number uniquely identifying the record. Required for FileStream.
		/// </summary>
		[Column("rowguid"),                                                     NotNull] public Guid           Rowguid         { get; set; } // uniqueidentifier
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column(),                                                              NotNull] public DateTime       ModifiedDate    { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_Document_Employee_Owner
		/// </summary>
		[Association(ThisKey="Owner", OtherKey="BusinessEntityID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_Document_Employee_Owner", BackReferenceName="DocumentOwners")]
		public HumanResources_Employee EmployeeOwner { get; set; }

		/// <summary>
		/// FK_ProductDocument_Document_DocumentNode_BackReference
		/// </summary>
		[Association(ThisKey="DocumentNode", OtherKey="DocumentNode", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Production_ProductDocument> ProductDocumentDocumentNodes { get; set; }

		#endregion
	}

	/// <summary>
	/// Where to send a person email.
	/// </summary>
	[Table(Schema="Person", Name="EmailAddress")]
	public partial class Person_EmailAddress
	{
		/// <summary>
		/// Primary key. Person associated with this email address.  Foreign key to Person.BusinessEntityID
		/// </summary>
		[Column(),               PrimaryKey(1), NotNull ] public int      BusinessEntityID    { get; set; } // int
		/// <summary>
		/// Primary key. ID of this email address.
		/// </summary>
		[Column(),               PrimaryKey(2), Identity] public int      EmailAddressID      { get; set; } // int
		/// <summary>
		/// E-mail address for the person.
		/// </summary>
		[Column("EmailAddress"),    Nullable            ] public string   EmailAddress_Column { get; set; } // nvarchar(50)
		/// <summary>
		/// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		[Column("rowguid"),                     NotNull ] public Guid     Rowguid             { get; set; } // uniqueidentifier
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column(),                              NotNull ] public DateTime ModifiedDate        { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_EmailAddress_Person_BusinessEntityID
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_EmailAddress_Person_BusinessEntityID", BackReferenceName="EmailAddressBusinessEntityIds")]
		public Person_Person BusinessEntity { get; set; }

		#endregion
	}

	/// <summary>
	/// Employee information such as salary, department, and title.
	/// </summary>
	[Table(Schema="HumanResources", Name="Employee")]
	public partial class HumanResources_Employee
	{
		/// <summary>
		/// Primary key for Employee records.  Foreign key to BusinessEntity.BusinessEntityID.
		/// </summary>
		[Column(),                                                PrimaryKey,  NotNull] public int             BusinessEntityID  { get; set; } // int
		/// <summary>
		/// Unique national identification number such as a social security number.
		/// </summary>
		[Column(),                                                             NotNull] public string          NationalIDNumber  { get; set; } // nvarchar(15)
		/// <summary>
		/// Network login.
		/// </summary>
		[Column(),                                                             NotNull] public string          LoginID           { get; set; } // nvarchar(256)
		/// <summary>
		/// Where the employee is located in corporate hierarchy.
		/// </summary>
		[Column(),                                                   Nullable         ] public SqlHierarchyId? OrganizationNode  { get; set; } // hierarchyid
		/// <summary>
		/// The depth of the employee in the corporate hierarchy.
		/// </summary>
		[Column(           SkipOnInsert=true, SkipOnUpdate=true),    Nullable         ] public short?          OrganizationLevel { get; set; } // smallint
		/// <summary>
		/// Work title such as Buyer or Sales Representative.
		/// </summary>
		[Column(),                                                             NotNull] public string          JobTitle          { get; set; } // nvarchar(50)
		/// <summary>
		/// Date of birth.
		/// </summary>
		[Column(),                                                             NotNull] public DateTime        BirthDate         { get; set; } // date
		/// <summary>
		/// M = Married, S = Single
		/// </summary>
		[Column(),                                                             NotNull] public char            MaritalStatus     { get; set; } // nchar(1)
		/// <summary>
		/// M = Male, F = Female
		/// </summary>
		[Column(),                                                             NotNull] public char            Gender            { get; set; } // nchar(1)
		/// <summary>
		/// Employee hired on this date.
		/// </summary>
		[Column(),                                                             NotNull] public DateTime        HireDate          { get; set; } // date
		/// <summary>
		/// Job classification. 0 = Hourly, not exempt from collective bargaining. 1 = Salaried, exempt from collective bargaining.
		/// </summary>
		[Column(),                                                             NotNull] public bool            SalariedFlag      { get; set; } // bit
		/// <summary>
		/// Number of available vacation hours.
		/// </summary>
		[Column(),                                                             NotNull] public short           VacationHours     { get; set; } // smallint
		/// <summary>
		/// Number of available sick leave hours.
		/// </summary>
		[Column(),                                                             NotNull] public short           SickLeaveHours    { get; set; } // smallint
		/// <summary>
		/// 0 = Inactive, 1 = Active
		/// </summary>
		[Column(),                                                             NotNull] public bool            CurrentFlag       { get; set; } // bit
		/// <summary>
		/// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		[Column("rowguid"),                                                    NotNull] public Guid            Rowguid           { get; set; } // uniqueidentifier
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column(),                                                             NotNull] public DateTime        ModifiedDate      { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_Employee_Person_BusinessEntityID
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", CanBeNull=false, Relationship=Relationship.OneToOne, KeyName="FK_Employee_Person_BusinessEntityID", BackReferenceName="EmployeeBusinessEntityID")]
		public Person_Person BusinessEntity { get; set; }

		/// <summary>
		/// FK_Document_Employee_Owner_BackReference
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="Owner", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Production_Document> DocumentOwners { get; set; }

		/// <summary>
		/// FK_EmployeeDepartmentHistory_Employee_BusinessEntityID_BackReference
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<HumanResources_EmployeeDepartmentHistory> EmployeeDepartmentHistoryBusinessEntityIds { get; set; }

		/// <summary>
		/// FK_EmployeePayHistory_Employee_BusinessEntityID_BackReference
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<HumanResources_EmployeePayHistory> EmployeePayHistoryBusinessEntityIds { get; set; }

		/// <summary>
		/// FK_JobCandidate_Employee_BusinessEntityID_BackReference
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<HumanResources_JobCandidate> JobCandidateBusinessEntityIds { get; set; }

		/// <summary>
		/// FK_PurchaseOrderHeader_Employee_EmployeeID_BackReference
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="EmployeeID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Purchasing_PurchaseOrderHeader> PurchaseOrderHeaderEmployeeIds { get; set; }

		/// <summary>
		/// FK_SalesPerson_Employee_BusinessEntityID_BackReference
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", CanBeNull=true, Relationship=Relationship.OneToOne, IsBackReference=true)]
		public Sales_SalesPerson SalesPersonBusinessEntityID { get; set; }

		#endregion
	}

	/// <summary>
	/// Employee department transfers.
	/// </summary>
	[Table(Schema="HumanResources", Name="EmployeeDepartmentHistory")]
	public partial class HumanResources_EmployeeDepartmentHistory
	{
		/// <summary>
		/// Employee identification number. Foreign key to Employee.BusinessEntityID.
		/// </summary>
		[PrimaryKey(1), NotNull    ] public int       BusinessEntityID { get; set; } // int
		/// <summary>
		/// Department in which the employee worked including currently. Foreign key to Department.DepartmentID.
		/// </summary>
		[PrimaryKey(3), NotNull    ] public short     DepartmentID     { get; set; } // smallint
		/// <summary>
		/// Identifies which 8-hour shift the employee works. Foreign key to Shift.Shift.ID.
		/// </summary>
		[PrimaryKey(4), NotNull    ] public byte      ShiftID          { get; set; } // tinyint
		/// <summary>
		/// Date the employee started work in the department.
		/// </summary>
		[PrimaryKey(2), NotNull    ] public DateTime  StartDate        { get; set; } // date
		/// <summary>
		/// Date the employee left the department. NULL = Current department.
		/// </summary>
		[Column,           Nullable] public DateTime? EndDate          { get; set; } // date
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,        NotNull    ] public DateTime  ModifiedDate     { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_EmployeeDepartmentHistory_Employee_BusinessEntityID
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_EmployeeDepartmentHistory_Employee_BusinessEntityID", BackReferenceName="EmployeeDepartmentHistoryBusinessEntityIds")]
		public HumanResources_Employee BusinessEntity { get; set; }

		/// <summary>
		/// FK_EmployeeDepartmentHistory_Department_DepartmentID
		/// </summary>
		[Association(ThisKey="DepartmentID", OtherKey="DepartmentID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_EmployeeDepartmentHistory_Department_DepartmentID", BackReferenceName="EmployeeDepartmentHistoryDepartmentIds")]
		public HumanResources_Department Department { get; set; }

		/// <summary>
		/// FK_EmployeeDepartmentHistory_Shift_ShiftID
		/// </summary>
		[Association(ThisKey="ShiftID", OtherKey="ShiftID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_EmployeeDepartmentHistory_Shift_ShiftID", BackReferenceName="EmployeeDepartmentHistoryShiftIds")]
		public HumanResources_Shift Shift { get; set; }

		#endregion
	}

	/// <summary>
	/// Employee pay history.
	/// </summary>
	[Table(Schema="HumanResources", Name="EmployeePayHistory")]
	public partial class HumanResources_EmployeePayHistory
	{
		/// <summary>
		/// Employee identification number. Foreign key to Employee.BusinessEntityID.
		/// </summary>
		[PrimaryKey(1), NotNull] public int      BusinessEntityID { get; set; } // int
		/// <summary>
		/// Date the change in pay is effective
		/// </summary>
		[PrimaryKey(2), NotNull] public DateTime RateChangeDate   { get; set; } // datetime
		/// <summary>
		/// Salary hourly rate.
		/// </summary>
		[Column,        NotNull] public decimal  Rate             { get; set; } // money
		/// <summary>
		/// 1 = Salary received monthly, 2 = Salary received biweekly
		/// </summary>
		[Column,        NotNull] public byte     PayFrequency     { get; set; } // tinyint
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,        NotNull] public DateTime ModifiedDate     { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_EmployeePayHistory_Employee_BusinessEntityID
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_EmployeePayHistory_Employee_BusinessEntityID", BackReferenceName="EmployeePayHistoryBusinessEntityIds")]
		public HumanResources_Employee BusinessEntity { get; set; }

		#endregion
	}

	/// <summary>
	/// Audit table tracking errors in the the AdventureWorks database that are caught by the CATCH block of a TRY...CATCH construct. Data is inserted by stored procedure dbo.uspLogError when it is executed from inside the CATCH block of a TRY...CATCH construct.
	/// </summary>
	[Table(Schema="dbo", Name="ErrorLog")]
	public partial class ErrorLog
	{
		/// <summary>
		/// Primary key for ErrorLog records.
		/// </summary>
		[PrimaryKey, Identity   ] public int      ErrorLogID     { get; set; } // int
		/// <summary>
		/// The date and time at which the error occurred.
		/// </summary>
		[Column,     NotNull    ] public DateTime ErrorTime      { get; set; } // datetime
		/// <summary>
		/// The user who executed the batch in which the error occurred.
		/// </summary>
		[Column,     NotNull    ] public string   UserName       { get; set; } // nvarchar(128)
		/// <summary>
		/// The error number of the error that occurred.
		/// </summary>
		[Column,     NotNull    ] public int      ErrorNumber    { get; set; } // int
		/// <summary>
		/// The severity of the error that occurred.
		/// </summary>
		[Column,        Nullable] public int?     ErrorSeverity  { get; set; } // int
		/// <summary>
		/// The state number of the error that occurred.
		/// </summary>
		[Column,        Nullable] public int?     ErrorState     { get; set; } // int
		/// <summary>
		/// The name of the stored procedure or trigger where the error occurred.
		/// </summary>
		[Column,        Nullable] public string   ErrorProcedure { get; set; } // nvarchar(126)
		/// <summary>
		/// The line number at which the error occurred.
		/// </summary>
		[Column,        Nullable] public int?     ErrorLine      { get; set; } // int
		/// <summary>
		/// The message text of the error that occurred.
		/// </summary>
		[Column,     NotNull    ] public string   ErrorMessage   { get; set; } // nvarchar(4000)
	}

	/// <summary>
	/// Bicycle assembly diagrams.
	/// </summary>
	[Table(Schema="Production", Name="Illustration")]
	public partial class Production_Illustration
	{
		/// <summary>
		/// Primary key for Illustration records.
		/// </summary>
		[PrimaryKey, Identity   ] public int      IllustrationID { get; set; } // int
		/// <summary>
		/// Illustrations used in manufacturing instructions. Stored as XML.
		/// </summary>
		[Column,        Nullable] public string   Diagram        { get; set; } // xml
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,     NotNull    ] public DateTime ModifiedDate   { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_ProductModelIllustration_Illustration_IllustrationID_BackReference
		/// </summary>
		[Association(ThisKey="IllustrationID", OtherKey="IllustrationID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Production_ProductModelIllustration> ProductModelIllustrationIllustrationIds { get; set; }

		#endregion
	}

	/// <summary>
	/// Resumes submitted to Human Resources by job applicants.
	/// </summary>
	[Table(Schema="HumanResources", Name="JobCandidate")]
	public partial class HumanResources_JobCandidate
	{
		/// <summary>
		/// Primary key for JobCandidate records.
		/// </summary>
		[PrimaryKey, Identity   ] public int      JobCandidateID   { get; set; } // int
		/// <summary>
		/// Employee identification number if applicant was hired. Foreign key to Employee.BusinessEntityID.
		/// </summary>
		[Column,        Nullable] public int?     BusinessEntityID { get; set; } // int
		/// <summary>
		/// Resume in XML format.
		/// </summary>
		[Column,        Nullable] public string   Resume           { get; set; } // xml
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,     NotNull    ] public DateTime ModifiedDate     { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_JobCandidate_Employee_BusinessEntityID
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_JobCandidate_Employee_BusinessEntityID", BackReferenceName="JobCandidateBusinessEntityIds")]
		public HumanResources_Employee BusinessEntity { get; set; }

		#endregion
	}

	/// <summary>
	/// Product inventory and manufacturing locations.
	/// </summary>
	[Table(Schema="Production", Name="Location")]
	public partial class Production_Location
	{
		/// <summary>
		/// Primary key for Location records.
		/// </summary>
		[PrimaryKey, Identity] public short    LocationID   { get; set; } // smallint
		/// <summary>
		/// Location description.
		/// </summary>
		[Column,     NotNull ] public string   Name         { get; set; } // nvarchar(50)
		/// <summary>
		/// Standard hourly cost of the manufacturing location.
		/// </summary>
		[Column,     NotNull ] public decimal  CostRate     { get; set; } // smallmoney
		/// <summary>
		/// Work capacity (in hours) of the manufacturing location.
		/// </summary>
		[Column,     NotNull ] public decimal  Availability { get; set; } // decimal(8, 2)
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,     NotNull ] public DateTime ModifiedDate { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_ProductInventory_Location_LocationID_BackReference
		/// </summary>
		[Association(ThisKey="LocationID", OtherKey="LocationID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Production_ProductInventory> ProductInventoryLocationIds { get; set; }

		/// <summary>
		/// FK_WorkOrderRouting_Location_LocationID_BackReference
		/// </summary>
		[Association(ThisKey="LocationID", OtherKey="LocationID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Production_WorkOrderRouting> WorkOrderRoutingLocationIds { get; set; }

		#endregion
	}

	/// <summary>
	/// One way hashed authentication information
	/// </summary>
	[Table(Schema="Person", Name="Password")]
	public partial class Person_Password
	{
		[Column(),          PrimaryKey, NotNull] public int      BusinessEntityID { get; set; } // int
		/// <summary>
		/// Password for the e-mail account.
		/// </summary>
		[Column(),                      NotNull] public string   PasswordHash     { get; set; } // varchar(128)
		/// <summary>
		/// Random value concatenated with the password string before the password is hashed.
		/// </summary>
		[Column(),                      NotNull] public string   PasswordSalt     { get; set; } // varchar(10)
		/// <summary>
		/// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		[Column("rowguid"),             NotNull] public Guid     Rowguid          { get; set; } // uniqueidentifier
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column(),                      NotNull] public DateTime ModifiedDate     { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_Password_Person_BusinessEntityID
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", CanBeNull=false, Relationship=Relationship.OneToOne, KeyName="FK_Password_Person_BusinessEntityID", BackReferenceName="PasswordBusinessEntityID")]
		public Person_Person BusinessEntity { get; set; }

		#endregion
	}

	/// <summary>
	/// Human beings involved with AdventureWorks: employees, customer contacts, and vendor contacts.
	/// </summary>
	[Table(Schema="Person", Name="Person")]
	public partial class Person_Person
	{
		/// <summary>
		/// Primary key for Person records.
		/// </summary>
		[Column(),          PrimaryKey,  NotNull] public int      BusinessEntityID      { get; set; } // int
		/// <summary>
		/// Primary type of person: SC = Store Contact, IN = Individual (retail) customer, SP = Sales person, EM = Employee (non-sales), VC = Vendor contact, GC = General contact
		/// </summary>
		[Column(),                       NotNull] public string   PersonType            { get; set; } // nchar(2)
		/// <summary>
		/// 0 = The data in FirstName and LastName are stored in western style (first name, last name) order.  1 = Eastern style (last name, first name) order.
		/// </summary>
		[Column(),                       NotNull] public bool     NameStyle             { get; set; } // bit
		/// <summary>
		/// A courtesy title. For example, Mr. or Ms.
		/// </summary>
		[Column(),             Nullable         ] public string   Title                 { get; set; } // nvarchar(8)
		/// <summary>
		/// First name of the person.
		/// </summary>
		[Column(),                       NotNull] public string   FirstName             { get; set; } // nvarchar(50)
		/// <summary>
		/// Middle name or middle initial of the person.
		/// </summary>
		[Column(),             Nullable         ] public string   MiddleName            { get; set; } // nvarchar(50)
		/// <summary>
		/// Last name of the person.
		/// </summary>
		[Column(),                       NotNull] public string   LastName              { get; set; } // nvarchar(50)
		/// <summary>
		/// Surname suffix. For example, Sr. or Jr.
		/// </summary>
		[Column(),             Nullable         ] public string   Suffix                { get; set; } // nvarchar(10)
		/// <summary>
		/// 0 = Contact does not wish to receive e-mail promotions, 1 = Contact does wish to receive e-mail promotions from AdventureWorks, 2 = Contact does wish to receive e-mail promotions from AdventureWorks and selected partners.
		/// </summary>
		[Column(),                       NotNull] public int      EmailPromotion        { get; set; } // int
		/// <summary>
		/// Additional contact information about the person stored in xml format.
		/// </summary>
		[Column(),             Nullable         ] public string   AdditionalContactInfo { get; set; } // xml
		/// <summary>
		/// Personal information such as hobbies, and income collected from online shoppers. Used for sales analysis.
		/// </summary>
		[Column(),             Nullable         ] public string   Demographics          { get; set; } // xml
		/// <summary>
		/// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		[Column("rowguid"),              NotNull] public Guid     Rowguid               { get; set; } // uniqueidentifier
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column(),                       NotNull] public DateTime ModifiedDate          { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_Person_BusinessEntity_BusinessEntityID
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", CanBeNull=false, Relationship=Relationship.OneToOne, KeyName="FK_Person_BusinessEntity_BusinessEntityID", BackReferenceName="FkPersonBusinessEntityBusinessEntityIDBackReference")]
		public Person_BusinessEntity BusinessEntity { get; set; }

		/// <summary>
		/// FK_BusinessEntityContact_Person_PersonID_BackReference
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="PersonID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Person_BusinessEntityContact> BusinessEntityContactPersonIds { get; set; }

		/// <summary>
		/// FK_Customer_Person_PersonID_BackReference
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="PersonID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Sales_Customer> CustomerPersonIds { get; set; }

		/// <summary>
		/// FK_EmailAddress_Person_BusinessEntityID_BackReference
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Person_EmailAddress> EmailAddressBusinessEntityIds { get; set; }

		/// <summary>
		/// FK_Employee_Person_BusinessEntityID_BackReference
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", CanBeNull=true, Relationship=Relationship.OneToOne, IsBackReference=true)]
		public HumanResources_Employee EmployeeBusinessEntityID { get; set; }

		/// <summary>
		/// FK_Password_Person_BusinessEntityID_BackReference
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", CanBeNull=true, Relationship=Relationship.OneToOne, IsBackReference=true)]
		public Person_Password PasswordBusinessEntityID { get; set; }

		/// <summary>
		/// FK_PersonCreditCard_Person_BusinessEntityID_BackReference
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Sales_PersonCreditCard> PersonCreditCardBusinessEntityIds { get; set; }

		/// <summary>
		/// FK_PersonPhone_Person_BusinessEntityID_BackReference
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Person_PersonPhone> PersonPhoneBusinessEntityIds { get; set; }

		#endregion
	}

	/// <summary>
	/// Cross-reference table mapping people to their credit card information in the CreditCard table.
	/// </summary>
	[Table(Schema="Sales", Name="PersonCreditCard")]
	public partial class Sales_PersonCreditCard
	{
		/// <summary>
		/// Business entity identification number. Foreign key to Person.BusinessEntityID.
		/// </summary>
		[PrimaryKey(1), NotNull] public int      BusinessEntityID { get; set; } // int
		/// <summary>
		/// Credit card identification number. Foreign key to CreditCard.CreditCardID.
		/// </summary>
		[PrimaryKey(2), NotNull] public int      CreditCardID     { get; set; } // int
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,        NotNull] public DateTime ModifiedDate     { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_PersonCreditCard_Person_BusinessEntityID
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_PersonCreditCard_Person_BusinessEntityID", BackReferenceName="PersonCreditCardBusinessEntityIds")]
		public Person_Person BusinessEntity { get; set; }

		/// <summary>
		/// FK_PersonCreditCard_CreditCard_CreditCardID
		/// </summary>
		[Association(ThisKey="CreditCardID", OtherKey="CreditCardID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_PersonCreditCard_CreditCard_CreditCardID", BackReferenceName="PersonCreditCardCreditCardIds")]
		public Sales_CreditCard CreditCard { get; set; }

		#endregion
	}

	/// <summary>
	/// Telephone number and type of a person.
	/// </summary>
	[Table(Schema="Person", Name="PersonPhone")]
	public partial class Person_PersonPhone
	{
		/// <summary>
		/// Business entity identification number. Foreign key to Person.BusinessEntityID.
		/// </summary>
		[PrimaryKey(1), NotNull] public int      BusinessEntityID  { get; set; } // int
		/// <summary>
		/// Telephone number identification number.
		/// </summary>
		[PrimaryKey(2), NotNull] public string   PhoneNumber       { get; set; } // nvarchar(25)
		/// <summary>
		/// Kind of phone number. Foreign key to PhoneNumberType.PhoneNumberTypeID.
		/// </summary>
		[PrimaryKey(3), NotNull] public int      PhoneNumberTypeID { get; set; } // int
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,        NotNull] public DateTime ModifiedDate      { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_PersonPhone_Person_BusinessEntityID
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_PersonPhone_Person_BusinessEntityID", BackReferenceName="PersonPhoneBusinessEntityIds")]
		public Person_Person BusinessEntity { get; set; }

		/// <summary>
		/// FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID
		/// </summary>
		[Association(ThisKey="PhoneNumberTypeID", OtherKey="PhoneNumberTypeID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID", BackReferenceName="PersonPhonePhoneNumberTypeIds")]
		public Person_PhoneNumberType PhoneNumberType { get; set; }

		#endregion
	}

	/// <summary>
	/// Type of phone number of a person.
	/// </summary>
	[Table(Schema="Person", Name="PhoneNumberType")]
	public partial class Person_PhoneNumberType
	{
		/// <summary>
		/// Primary key for telephone number type records.
		/// </summary>
		[PrimaryKey, Identity] public int      PhoneNumberTypeID { get; set; } // int
		/// <summary>
		/// Name of the telephone number type
		/// </summary>
		[Column,     NotNull ] public string   Name              { get; set; } // nvarchar(50)
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,     NotNull ] public DateTime ModifiedDate      { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID_BackReference
		/// </summary>
		[Association(ThisKey="PhoneNumberTypeID", OtherKey="PhoneNumberTypeID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Person_PersonPhone> PersonPhonePhoneNumberTypeIds { get; set; }

		#endregion
	}

	/// <summary>
	/// Products sold or used in the manfacturing of sold products.
	/// </summary>
	[Table(Schema="Production", Name="Product")]
	public partial class Production_Product
	{
		/// <summary>
		/// Primary key for Product records.
		/// </summary>
		[Column(),          PrimaryKey,  Identity] public int       ProductID             { get; set; } // int
		/// <summary>
		/// Name of the product.
		/// </summary>
		[Column(),          NotNull              ] public string    Name                  { get; set; } // nvarchar(50)
		/// <summary>
		/// Unique product identification number.
		/// </summary>
		[Column(),          NotNull              ] public string    ProductNumber         { get; set; } // nvarchar(25)
		/// <summary>
		/// 0 = Product is purchased, 1 = Product is manufactured in-house.
		/// </summary>
		[Column(),          NotNull              ] public bool      MakeFlag              { get; set; } // bit
		/// <summary>
		/// 0 = Product is not a salable item. 1 = Product is salable.
		/// </summary>
		[Column(),          NotNull              ] public bool      FinishedGoodsFlag     { get; set; } // bit
		/// <summary>
		/// Product color.
		/// </summary>
		[Column(),             Nullable          ] public string    Color                 { get; set; } // nvarchar(15)
		/// <summary>
		/// Minimum inventory quantity.
		/// </summary>
		[Column(),          NotNull              ] public short     SafetyStockLevel      { get; set; } // smallint
		/// <summary>
		/// Inventory level that triggers a purchase order or work order.
		/// </summary>
		[Column(),          NotNull              ] public short     ReorderPoint          { get; set; } // smallint
		/// <summary>
		/// Standard cost of the product.
		/// </summary>
		[Column(),          NotNull              ] public decimal   StandardCost          { get; set; } // money
		/// <summary>
		/// Selling price.
		/// </summary>
		[Column(),          NotNull              ] public decimal   ListPrice             { get; set; } // money
		/// <summary>
		/// Product size.
		/// </summary>
		[Column(),             Nullable          ] public string    Size                  { get; set; } // nvarchar(5)
		/// <summary>
		/// Unit of measure for Size column.
		/// </summary>
		[Column(),             Nullable          ] public string    SizeUnitMeasureCode   { get; set; } // nchar(3)
		/// <summary>
		/// Unit of measure for Weight column.
		/// </summary>
		[Column(),             Nullable          ] public string    WeightUnitMeasureCode { get; set; } // nchar(3)
		/// <summary>
		/// Product weight.
		/// </summary>
		[Column(),             Nullable          ] public decimal?  Weight                { get; set; } // decimal(8, 2)
		/// <summary>
		/// Number of days required to manufacture the product.
		/// </summary>
		[Column(),          NotNull              ] public int       DaysToManufacture     { get; set; } // int
		/// <summary>
		/// R = Road, M = Mountain, T = Touring, S = Standard
		/// </summary>
		[Column(),             Nullable          ] public string    ProductLine           { get; set; } // nchar(2)
		/// <summary>
		/// H = High, M = Medium, L = Low
		/// </summary>
		[Column(),             Nullable          ] public string    Class                 { get; set; } // nchar(2)
		/// <summary>
		/// W = Womens, M = Mens, U = Universal
		/// </summary>
		[Column(),             Nullable          ] public string    Style                 { get; set; } // nchar(2)
		/// <summary>
		/// Product is a member of this product subcategory. Foreign key to ProductSubCategory.ProductSubCategoryID.
		/// </summary>
		[Column(),             Nullable          ] public int?      ProductSubcategoryID  { get; set; } // int
		/// <summary>
		/// Product is a member of this product model. Foreign key to ProductModel.ProductModelID.
		/// </summary>
		[Column(),             Nullable          ] public int?      ProductModelID        { get; set; } // int
		/// <summary>
		/// Date the product was available for sale.
		/// </summary>
		[Column(),          NotNull              ] public DateTime  SellStartDate         { get; set; } // datetime
		/// <summary>
		/// Date the product was no longer available for sale.
		/// </summary>
		[Column(),             Nullable          ] public DateTime? SellEndDate           { get; set; } // datetime
		/// <summary>
		/// Date the product was discontinued.
		/// </summary>
		[Column(),             Nullable          ] public DateTime? DiscontinuedDate      { get; set; } // datetime
		/// <summary>
		/// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		[Column("rowguid"), NotNull              ] public Guid      Rowguid               { get; set; } // uniqueidentifier
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column(),          NotNull              ] public DateTime  ModifiedDate          { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_BillOfMaterials_Product_ComponentID_BackReference
		/// </summary>
		[Association(ThisKey="ProductID", OtherKey="ComponentID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Production_BillOfMaterial> BillOfMaterialsComponentIds { get; set; }

		/// <summary>
		/// FK_BillOfMaterials_Product_ProductAssemblyID_BackReference
		/// </summary>
		[Association(ThisKey="ProductID", OtherKey="ProductAssemblyID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Production_BillOfMaterial> BillOfMaterialsProductAssemblyIds { get; set; }

		/// <summary>
		/// FK_ProductCostHistory_Product_ProductID_BackReference
		/// </summary>
		[Association(ThisKey="ProductID", OtherKey="ProductID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Production_ProductCostHistory> ProductCostHistoryProductIds { get; set; }

		/// <summary>
		/// FK_ProductDocument_Product_ProductID_BackReference
		/// </summary>
		[Association(ThisKey="ProductID", OtherKey="ProductID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Production_ProductDocument> ProductDocumentProductIds { get; set; }

		/// <summary>
		/// FK_ProductInventory_Product_ProductID_BackReference
		/// </summary>
		[Association(ThisKey="ProductID", OtherKey="ProductID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Production_ProductInventory> ProductInventoryProductIds { get; set; }

		/// <summary>
		/// FK_ProductListPriceHistory_Product_ProductID_BackReference
		/// </summary>
		[Association(ThisKey="ProductID", OtherKey="ProductID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Production_ProductListPriceHistory> ProductListPriceHistoryProductIds { get; set; }

		/// <summary>
		/// FK_Product_ProductModel_ProductModelID
		/// </summary>
		[Association(ThisKey="ProductModelID", OtherKey="ProductModelID", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_Product_ProductModel_ProductModelID", BackReferenceName="ProductProductModelIds")]
		public Production_ProductModel ProductModel { get; set; }

		/// <summary>
		/// FK_ProductProductPhoto_Product_ProductID_BackReference
		/// </summary>
		[Association(ThisKey="ProductID", OtherKey="ProductID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Production_ProductProductPhoto> ProductProductPhotoProductIds { get; set; }

		/// <summary>
		/// FK_ProductReview_Product_ProductID_BackReference
		/// </summary>
		[Association(ThisKey="ProductID", OtherKey="ProductID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Production_ProductReview> ProductReviewProductIds { get; set; }

		/// <summary>
		/// FK_Product_ProductSubcategory_ProductSubcategoryID
		/// </summary>
		[Association(ThisKey="ProductSubcategoryID", OtherKey="ProductSubcategoryID", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_Product_ProductSubcategory_ProductSubcategoryID", BackReferenceName="ProductProductSubcategoryIds")]
		public Production_ProductSubcategory ProductSubcategory { get; set; }

		/// <summary>
		/// FK_ProductVendor_Product_ProductID_BackReference
		/// </summary>
		[Association(ThisKey="ProductID", OtherKey="ProductID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Purchasing_ProductVendor> ProductVendorProductIds { get; set; }

		/// <summary>
		/// FK_PurchaseOrderDetail_Product_ProductID_BackReference
		/// </summary>
		[Association(ThisKey="ProductID", OtherKey="ProductID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Purchasing_PurchaseOrderDetail> PurchaseOrderDetailProductIds { get; set; }

		/// <summary>
		/// FK_ShoppingCartItem_Product_ProductID_BackReference
		/// </summary>
		[Association(ThisKey="ProductID", OtherKey="ProductID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Sales_ShoppingCartItem> ShoppingCartItemProductIds { get; set; }

		/// <summary>
		/// FK_SpecialOfferProduct_Product_ProductID_BackReference
		/// </summary>
		[Association(ThisKey="ProductID", OtherKey="ProductID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Sales_SpecialOfferProduct> SpecialOfferProductProductIds { get; set; }

		/// <summary>
		/// FK_TransactionHistory_Product_ProductID_BackReference
		/// </summary>
		[Association(ThisKey="ProductID", OtherKey="ProductID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Production_TransactionHistory> TransactionHistoryProductIds { get; set; }

		/// <summary>
		/// FK_Product_UnitMeasure_SizeUnitMeasureCode
		/// </summary>
		[Association(ThisKey="SizeUnitMeasureCode", OtherKey="UnitMeasureCode", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_Product_UnitMeasure_SizeUnitMeasureCode", BackReferenceName="ProductSizeUnitMeasureCodes")]
		public Production_UnitMeasure UnitMeasureSizeUnitMeasureCode { get; set; }

		/// <summary>
		/// FK_Product_UnitMeasure_WeightUnitMeasureCode
		/// </summary>
		[Association(ThisKey="WeightUnitMeasureCode", OtherKey="UnitMeasureCode", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_Product_UnitMeasure_WeightUnitMeasureCode", BackReferenceName="ProductWeightUnitMeasureCodes")]
		public Production_UnitMeasure UnitMeasureWeightUnitMeasureCode { get; set; }

		/// <summary>
		/// FK_WorkOrder_Product_ProductID_BackReference
		/// </summary>
		[Association(ThisKey="ProductID", OtherKey="ProductID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Production_WorkOrder> WorkOrderProductIds { get; set; }

		#endregion
	}

	/// <summary>
	/// High-level product categorization.
	/// </summary>
	[Table(Schema="Production", Name="ProductCategory")]
	public partial class Production_ProductCategory
	{
		/// <summary>
		/// Primary key for ProductCategory records.
		/// </summary>
		[Column(),          PrimaryKey, Identity] public int      ProductCategoryID { get; set; } // int
		/// <summary>
		/// Category description.
		/// </summary>
		[Column(),          NotNull             ] public string   Name              { get; set; } // nvarchar(50)
		/// <summary>
		/// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		[Column("rowguid"), NotNull             ] public Guid     Rowguid           { get; set; } // uniqueidentifier
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column(),          NotNull             ] public DateTime ModifiedDate      { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_ProductSubcategory_ProductCategory_ProductCategoryID_BackReference
		/// </summary>
		[Association(ThisKey="ProductCategoryID", OtherKey="ProductCategoryID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Production_ProductSubcategory> ProductSubcategoryProductCategoryIds { get; set; }

		#endregion
	}

	/// <summary>
	/// Changes in the cost of a product over time.
	/// </summary>
	[Table(Schema="Production", Name="ProductCostHistory")]
	public partial class Production_ProductCostHistory
	{
		/// <summary>
		/// Product identification number. Foreign key to Product.ProductID
		/// </summary>
		[PrimaryKey(1), NotNull    ] public int       ProductID    { get; set; } // int
		/// <summary>
		/// Product cost start date.
		/// </summary>
		[PrimaryKey(2), NotNull    ] public DateTime  StartDate    { get; set; } // datetime
		/// <summary>
		/// Product cost end date.
		/// </summary>
		[Column,           Nullable] public DateTime? EndDate      { get; set; } // datetime
		/// <summary>
		/// Standard cost of the product.
		/// </summary>
		[Column,        NotNull    ] public decimal   StandardCost { get; set; } // money
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,        NotNull    ] public DateTime  ModifiedDate { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_ProductCostHistory_Product_ProductID
		/// </summary>
		[Association(ThisKey="ProductID", OtherKey="ProductID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_ProductCostHistory_Product_ProductID", BackReferenceName="ProductCostHistoryProductIds")]
		public Production_Product Product { get; set; }

		#endregion
	}

	/// <summary>
	/// Product descriptions in several languages.
	/// </summary>
	[Table(Schema="Production", Name="ProductDescription")]
	public partial class Production_ProductDescription
	{
		/// <summary>
		/// Primary key for ProductDescription records.
		/// </summary>
		[Column(),          PrimaryKey, Identity] public int      ProductDescriptionID { get; set; } // int
		/// <summary>
		/// Description of the product.
		/// </summary>
		[Column(),          NotNull             ] public string   Description          { get; set; } // nvarchar(400)
		/// <summary>
		/// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		[Column("rowguid"), NotNull             ] public Guid     Rowguid              { get; set; } // uniqueidentifier
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column(),          NotNull             ] public DateTime ModifiedDate         { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_ProductModelProductDescriptionCulture_ProductDescription_ProductDescriptionID_BackReference
		/// </summary>
		[Association(ThisKey="ProductDescriptionID", OtherKey="ProductDescriptionID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Production_ProductModelProductDescriptionCulture> ProductModelProductDescriptionCultureProductDescriptionIds { get; set; }

		#endregion
	}

	/// <summary>
	/// Cross-reference table mapping products to related product documents.
	/// </summary>
	[Table(Schema="Production", Name="ProductDocument")]
	public partial class Production_ProductDocument
	{
		/// <summary>
		/// Product identification number. Foreign key to Product.ProductID.
		/// </summary>
		[PrimaryKey(1), NotNull] public int            ProductID    { get; set; } // int
		/// <summary>
		/// Document identification number. Foreign key to Document.DocumentNode.
		/// </summary>
		[PrimaryKey(2), NotNull] public SqlHierarchyId DocumentNode { get; set; } // hierarchyid
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,        NotNull] public DateTime       ModifiedDate { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_ProductDocument_Document_DocumentNode
		/// </summary>
		[Association(ThisKey="DocumentNode", OtherKey="DocumentNode", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_ProductDocument_Document_DocumentNode", BackReferenceName="ProductDocumentDocumentNodes")]
		public Production_Document DocumentDocumentNode { get; set; }

		/// <summary>
		/// FK_ProductDocument_Product_ProductID
		/// </summary>
		[Association(ThisKey="ProductID", OtherKey="ProductID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_ProductDocument_Product_ProductID", BackReferenceName="ProductDocumentProductIds")]
		public Production_Product Product { get; set; }

		#endregion
	}

	/// <summary>
	/// Product inventory information.
	/// </summary>
	[Table(Schema="Production", Name="ProductInventory")]
	public partial class Production_ProductInventory
	{
		/// <summary>
		/// Product identification number. Foreign key to Product.ProductID.
		/// </summary>
		[Column(),          PrimaryKey(1), NotNull] public int      ProductID    { get; set; } // int
		/// <summary>
		/// Inventory location identification number. Foreign key to Location.LocationID.
		/// </summary>
		[Column(),          PrimaryKey(2), NotNull] public short    LocationID   { get; set; } // smallint
		/// <summary>
		/// Storage compartment within an inventory location.
		/// </summary>
		[Column(),                         NotNull] public string   Shelf        { get; set; } // nvarchar(10)
		/// <summary>
		/// Storage container on a shelf in an inventory location.
		/// </summary>
		[Column(),                         NotNull] public byte     Bin          { get; set; } // tinyint
		/// <summary>
		/// Quantity of products in the inventory location.
		/// </summary>
		[Column(),                         NotNull] public short    Quantity     { get; set; } // smallint
		/// <summary>
		/// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		[Column("rowguid"),                NotNull] public Guid     Rowguid      { get; set; } // uniqueidentifier
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column(),                         NotNull] public DateTime ModifiedDate { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_ProductInventory_Location_LocationID
		/// </summary>
		[Association(ThisKey="LocationID", OtherKey="LocationID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_ProductInventory_Location_LocationID", BackReferenceName="ProductInventoryLocationIds")]
		public Production_Location Location { get; set; }

		/// <summary>
		/// FK_ProductInventory_Product_ProductID
		/// </summary>
		[Association(ThisKey="ProductID", OtherKey="ProductID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_ProductInventory_Product_ProductID", BackReferenceName="ProductInventoryProductIds")]
		public Production_Product Product { get; set; }

		#endregion
	}

	/// <summary>
	/// Changes in the list price of a product over time.
	/// </summary>
	[Table(Schema="Production", Name="ProductListPriceHistory")]
	public partial class Production_ProductListPriceHistory
	{
		/// <summary>
		/// Product identification number. Foreign key to Product.ProductID
		/// </summary>
		[PrimaryKey(1), NotNull    ] public int       ProductID    { get; set; } // int
		/// <summary>
		/// List price start date.
		/// </summary>
		[PrimaryKey(2), NotNull    ] public DateTime  StartDate    { get; set; } // datetime
		/// <summary>
		/// List price end date
		/// </summary>
		[Column,           Nullable] public DateTime? EndDate      { get; set; } // datetime
		/// <summary>
		/// Product list price.
		/// </summary>
		[Column,        NotNull    ] public decimal   ListPrice    { get; set; } // money
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,        NotNull    ] public DateTime  ModifiedDate { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_ProductListPriceHistory_Product_ProductID
		/// </summary>
		[Association(ThisKey="ProductID", OtherKey="ProductID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_ProductListPriceHistory_Product_ProductID", BackReferenceName="ProductListPriceHistoryProductIds")]
		public Production_Product Product { get; set; }

		#endregion
	}

	/// <summary>
	/// Product model classification.
	/// </summary>
	[Table(Schema="Production", Name="ProductModel")]
	public partial class Production_ProductModel
	{
		/// <summary>
		/// Primary key for ProductModel records.
		/// </summary>
		[Column(),          PrimaryKey,  Identity] public int      ProductModelID     { get; set; } // int
		/// <summary>
		/// Product model description.
		/// </summary>
		[Column(),          NotNull              ] public string   Name               { get; set; } // nvarchar(50)
		/// <summary>
		/// Detailed product catalog information in xml format.
		/// </summary>
		[Column(),             Nullable          ] public string   CatalogDescription { get; set; } // xml
		/// <summary>
		/// Manufacturing instructions in xml format.
		/// </summary>
		[Column(),             Nullable          ] public string   Instructions       { get; set; } // xml
		/// <summary>
		/// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		[Column("rowguid"), NotNull              ] public Guid     Rowguid            { get; set; } // uniqueidentifier
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column(),          NotNull              ] public DateTime ModifiedDate       { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_ProductModelIllustration_ProductModel_ProductModelID_BackReference
		/// </summary>
		[Association(ThisKey="ProductModelID", OtherKey="ProductModelID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Production_ProductModelIllustration> ProductModelIllustrationProductModelIds { get; set; }

		/// <summary>
		/// FK_ProductModelProductDescriptionCulture_ProductModel_ProductModelID_BackReference
		/// </summary>
		[Association(ThisKey="ProductModelID", OtherKey="ProductModelID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Production_ProductModelProductDescriptionCulture> ProductModelProductDescriptionCultureProductModelIds { get; set; }

		/// <summary>
		/// FK_Product_ProductModel_ProductModelID_BackReference
		/// </summary>
		[Association(ThisKey="ProductModelID", OtherKey="ProductModelID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Production_Product> ProductProductModelIds { get; set; }

		#endregion
	}

	/// <summary>
	/// Cross-reference table mapping product models and illustrations.
	/// </summary>
	[Table(Schema="Production", Name="ProductModelIllustration")]
	public partial class Production_ProductModelIllustration
	{
		/// <summary>
		/// Primary key. Foreign key to ProductModel.ProductModelID.
		/// </summary>
		[PrimaryKey(1), NotNull] public int      ProductModelID { get; set; } // int
		/// <summary>
		/// Primary key. Foreign key to Illustration.IllustrationID.
		/// </summary>
		[PrimaryKey(2), NotNull] public int      IllustrationID { get; set; } // int
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,        NotNull] public DateTime ModifiedDate   { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_ProductModelIllustration_Illustration_IllustrationID
		/// </summary>
		[Association(ThisKey="IllustrationID", OtherKey="IllustrationID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_ProductModelIllustration_Illustration_IllustrationID", BackReferenceName="ProductModelIllustrationIllustrationIds")]
		public Production_Illustration Illustration { get; set; }

		/// <summary>
		/// FK_ProductModelIllustration_ProductModel_ProductModelID
		/// </summary>
		[Association(ThisKey="ProductModelID", OtherKey="ProductModelID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_ProductModelIllustration_ProductModel_ProductModelID", BackReferenceName="ProductModelIllustrationProductModelIds")]
		public Production_ProductModel ProductModel { get; set; }

		#endregion
	}

	/// <summary>
	/// Cross-reference table mapping product descriptions and the language the description is written in.
	/// </summary>
	[Table(Schema="Production", Name="ProductModelProductDescriptionCulture")]
	public partial class Production_ProductModelProductDescriptionCulture
	{
		/// <summary>
		/// Primary key. Foreign key to ProductModel.ProductModelID.
		/// </summary>
		[PrimaryKey(1), NotNull] public int      ProductModelID       { get; set; } // int
		/// <summary>
		/// Primary key. Foreign key to ProductDescription.ProductDescriptionID.
		/// </summary>
		[PrimaryKey(2), NotNull] public int      ProductDescriptionID { get; set; } // int
		/// <summary>
		/// Culture identification number. Foreign key to Culture.CultureID.
		/// </summary>
		[PrimaryKey(3), NotNull] public string   CultureID            { get; set; } // nchar(6)
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,        NotNull] public DateTime ModifiedDate         { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_ProductModelProductDescriptionCulture_Culture_CultureID
		/// </summary>
		[Association(ThisKey="CultureID", OtherKey="CultureID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_ProductModelProductDescriptionCulture_Culture_CultureID", BackReferenceName="ProductModelProductDescriptionCultureCultureIds")]
		public Production_Culture Culture { get; set; }

		/// <summary>
		/// FK_ProductModelProductDescriptionCulture_ProductDescription_ProductDescriptionID
		/// </summary>
		[Association(ThisKey="ProductDescriptionID", OtherKey="ProductDescriptionID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_ProductModelProductDescriptionCulture_ProductDescription_ProductDescriptionID", BackReferenceName="ProductModelProductDescriptionCultureProductDescriptionIds")]
		public Production_ProductDescription ProductDescription { get; set; }

		/// <summary>
		/// FK_ProductModelProductDescriptionCulture_ProductModel_ProductModelID
		/// </summary>
		[Association(ThisKey="ProductModelID", OtherKey="ProductModelID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_ProductModelProductDescriptionCulture_ProductModel_ProductModelID", BackReferenceName="ProductModelProductDescriptionCultureProductModelIds")]
		public Production_ProductModel ProductModel { get; set; }

		#endregion
	}

	/// <summary>
	/// Product images.
	/// </summary>
	[Table(Schema="Production", Name="ProductPhoto")]
	public partial class Production_ProductPhoto
	{
		/// <summary>
		/// Primary key for ProductPhoto records.
		/// </summary>
		[PrimaryKey, Identity   ] public int      ProductPhotoID         { get; set; } // int
		/// <summary>
		/// Small image of the product.
		/// </summary>
		[Column,        Nullable] public byte[]   ThumbNailPhoto         { get; set; } // varbinary(max)
		/// <summary>
		/// Small image file name.
		/// </summary>
		[Column,        Nullable] public string   ThumbnailPhotoFileName { get; set; } // nvarchar(50)
		/// <summary>
		/// Large image of the product.
		/// </summary>
		[Column,        Nullable] public byte[]   LargePhoto             { get; set; } // varbinary(max)
		/// <summary>
		/// Large image file name.
		/// </summary>
		[Column,        Nullable] public string   LargePhotoFileName     { get; set; } // nvarchar(50)
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,     NotNull    ] public DateTime ModifiedDate           { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_ProductProductPhoto_ProductPhoto_ProductPhotoID_BackReference
		/// </summary>
		[Association(ThisKey="ProductPhotoID", OtherKey="ProductPhotoID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Production_ProductProductPhoto> ProductProductPhotoProductPhotoIds { get; set; }

		#endregion
	}

	/// <summary>
	/// Cross-reference table mapping products and product photos.
	/// </summary>
	[Table(Schema="Production", Name="ProductProductPhoto")]
	public partial class Production_ProductProductPhoto
	{
		/// <summary>
		/// Product identification number. Foreign key to Product.ProductID.
		/// </summary>
		[PrimaryKey(1), NotNull] public int      ProductID      { get; set; } // int
		/// <summary>
		/// Product photo identification number. Foreign key to ProductPhoto.ProductPhotoID.
		/// </summary>
		[PrimaryKey(2), NotNull] public int      ProductPhotoID { get; set; } // int
		/// <summary>
		/// 0 = Photo is not the principal image. 1 = Photo is the principal image.
		/// </summary>
		[Column,        NotNull] public bool     Primary        { get; set; } // bit
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,        NotNull] public DateTime ModifiedDate   { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_ProductProductPhoto_Product_ProductID
		/// </summary>
		[Association(ThisKey="ProductID", OtherKey="ProductID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_ProductProductPhoto_Product_ProductID", BackReferenceName="ProductProductPhotoProductIds")]
		public Production_Product Product { get; set; }

		/// <summary>
		/// FK_ProductProductPhoto_ProductPhoto_ProductPhotoID
		/// </summary>
		[Association(ThisKey="ProductPhotoID", OtherKey="ProductPhotoID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_ProductProductPhoto_ProductPhoto_ProductPhotoID", BackReferenceName="ProductProductPhotoProductPhotoIds")]
		public Production_ProductPhoto ProductPhoto { get; set; }

		#endregion
	}

	/// <summary>
	/// Customer reviews of products they have purchased.
	/// </summary>
	[Table(Schema="Production", Name="ProductReview")]
	public partial class Production_ProductReview
	{
		/// <summary>
		/// Primary key for ProductReview records.
		/// </summary>
		[PrimaryKey, Identity   ] public int      ProductReviewID { get; set; } // int
		/// <summary>
		/// Product identification number. Foreign key to Product.ProductID.
		/// </summary>
		[Column,     NotNull    ] public int      ProductID       { get; set; } // int
		/// <summary>
		/// Name of the reviewer.
		/// </summary>
		[Column,     NotNull    ] public string   ReviewerName    { get; set; } // nvarchar(50)
		/// <summary>
		/// Date review was submitted.
		/// </summary>
		[Column,     NotNull    ] public DateTime ReviewDate      { get; set; } // datetime
		/// <summary>
		/// Reviewer's e-mail address.
		/// </summary>
		[Column,     NotNull    ] public string   EmailAddress    { get; set; } // nvarchar(50)
		/// <summary>
		/// Product rating given by the reviewer. Scale is 1 to 5 with 5 as the highest rating.
		/// </summary>
		[Column,     NotNull    ] public int      Rating          { get; set; } // int
		/// <summary>
		/// Reviewer's comments
		/// </summary>
		[Column,        Nullable] public string   Comments        { get; set; } // nvarchar(3850)
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,     NotNull    ] public DateTime ModifiedDate    { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_ProductReview_Product_ProductID
		/// </summary>
		[Association(ThisKey="ProductID", OtherKey="ProductID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_ProductReview_Product_ProductID", BackReferenceName="ProductReviewProductIds")]
		public Production_Product Product { get; set; }

		#endregion
	}

	/// <summary>
	/// Product subcategories. See ProductCategory table.
	/// </summary>
	[Table(Schema="Production", Name="ProductSubcategory")]
	public partial class Production_ProductSubcategory
	{
		/// <summary>
		/// Primary key for ProductSubcategory records.
		/// </summary>
		[Column(),          PrimaryKey, Identity] public int      ProductSubcategoryID { get; set; } // int
		/// <summary>
		/// Product category identification number. Foreign key to ProductCategory.ProductCategoryID.
		/// </summary>
		[Column(),          NotNull             ] public int      ProductCategoryID    { get; set; } // int
		/// <summary>
		/// Subcategory description.
		/// </summary>
		[Column(),          NotNull             ] public string   Name                 { get; set; } // nvarchar(50)
		/// <summary>
		/// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		[Column("rowguid"), NotNull             ] public Guid     Rowguid              { get; set; } // uniqueidentifier
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column(),          NotNull             ] public DateTime ModifiedDate         { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_ProductSubcategory_ProductCategory_ProductCategoryID
		/// </summary>
		[Association(ThisKey="ProductCategoryID", OtherKey="ProductCategoryID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_ProductSubcategory_ProductCategory_ProductCategoryID", BackReferenceName="ProductSubcategoryProductCategoryIds")]
		public Production_ProductCategory ProductCategory { get; set; }

		/// <summary>
		/// FK_Product_ProductSubcategory_ProductSubcategoryID_BackReference
		/// </summary>
		[Association(ThisKey="ProductSubcategoryID", OtherKey="ProductSubcategoryID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Production_Product> ProductProductSubcategoryIds { get; set; }

		#endregion
	}

	/// <summary>
	/// Cross-reference table mapping vendors with the products they supply.
	/// </summary>
	[Table(Schema="Purchasing", Name="ProductVendor")]
	public partial class Purchasing_ProductVendor
	{
		/// <summary>
		/// Primary key. Foreign key to Product.ProductID.
		/// </summary>
		[PrimaryKey(1), NotNull    ] public int       ProductID        { get; set; } // int
		/// <summary>
		/// Primary key. Foreign key to Vendor.BusinessEntityID.
		/// </summary>
		[PrimaryKey(2), NotNull    ] public int       BusinessEntityID { get; set; } // int
		/// <summary>
		/// The average span of time (in days) between placing an order with the vendor and receiving the purchased product.
		/// </summary>
		[Column,        NotNull    ] public int       AverageLeadTime  { get; set; } // int
		/// <summary>
		/// The vendor's usual selling price.
		/// </summary>
		[Column,        NotNull    ] public decimal   StandardPrice    { get; set; } // money
		/// <summary>
		/// The selling price when last purchased.
		/// </summary>
		[Column,           Nullable] public decimal?  LastReceiptCost  { get; set; } // money
		/// <summary>
		/// Date the product was last received by the vendor.
		/// </summary>
		[Column,           Nullable] public DateTime? LastReceiptDate  { get; set; } // datetime
		/// <summary>
		/// The maximum quantity that should be ordered.
		/// </summary>
		[Column,        NotNull    ] public int       MinOrderQty      { get; set; } // int
		/// <summary>
		/// The minimum quantity that should be ordered.
		/// </summary>
		[Column,        NotNull    ] public int       MaxOrderQty      { get; set; } // int
		/// <summary>
		/// The quantity currently on order.
		/// </summary>
		[Column,           Nullable] public int?      OnOrderQty       { get; set; } // int
		/// <summary>
		/// The product's unit of measure.
		/// </summary>
		[Column,        NotNull    ] public string    UnitMeasureCode  { get; set; } // nchar(3)
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,        NotNull    ] public DateTime  ModifiedDate     { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_ProductVendor_Vendor_BusinessEntityID
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_ProductVendor_Vendor_BusinessEntityID", BackReferenceName="ProductVendorBusinessEntityIds")]
		public Purchasing_Vendor BusinessEntity { get; set; }

		/// <summary>
		/// FK_ProductVendor_Product_ProductID
		/// </summary>
		[Association(ThisKey="ProductID", OtherKey="ProductID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_ProductVendor_Product_ProductID", BackReferenceName="ProductVendorProductIds")]
		public Production_Product Product { get; set; }

		/// <summary>
		/// FK_ProductVendor_UnitMeasure_UnitMeasureCode
		/// </summary>
		[Association(ThisKey="UnitMeasureCode", OtherKey="UnitMeasureCode", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_ProductVendor_UnitMeasure_UnitMeasureCode", BackReferenceName="ProductVendorUnitMeasureCodes")]
		public Production_UnitMeasure UnitMeasureUnitMeasureCode { get; set; }

		#endregion
	}

	/// <summary>
	/// Individual products associated with a specific purchase order. See PurchaseOrderHeader.
	/// </summary>
	[Table(Schema="Purchasing", Name="PurchaseOrderDetail")]
	public partial class Purchasing_PurchaseOrderDetail
	{
		/// <summary>
		/// Primary key. Foreign key to PurchaseOrderHeader.PurchaseOrderID.
		/// </summary>
		[PrimaryKey(1),                                NotNull ] public int      PurchaseOrderID       { get; set; } // int
		/// <summary>
		/// Primary key. One line number per purchased product.
		/// </summary>
		[PrimaryKey(2),                                Identity] public int      PurchaseOrderDetailID { get; set; } // int
		/// <summary>
		/// Date the product is expected to be received.
		/// </summary>
		[Column,                                       NotNull ] public DateTime DueDate               { get; set; } // datetime
		/// <summary>
		/// Quantity ordered.
		/// </summary>
		[Column,                                       NotNull ] public short    OrderQty              { get; set; } // smallint
		/// <summary>
		/// Product identification number. Foreign key to Product.ProductID.
		/// </summary>
		[Column,                                       NotNull ] public int      ProductID             { get; set; } // int
		/// <summary>
		/// Vendor's selling price of a single product.
		/// </summary>
		[Column,                                       NotNull ] public decimal  UnitPrice             { get; set; } // money
		/// <summary>
		/// Per product subtotal. Computed as OrderQty * UnitPrice.
		/// </summary>
		[Column(SkipOnInsert=true, SkipOnUpdate=true), NotNull ] public decimal  LineTotal             { get; set; } // money
		/// <summary>
		/// Quantity actually received from the vendor.
		/// </summary>
		[Column,                                       NotNull ] public decimal  ReceivedQty           { get; set; } // decimal(8, 2)
		/// <summary>
		/// Quantity rejected during inspection.
		/// </summary>
		[Column,                                       NotNull ] public decimal  RejectedQty           { get; set; } // decimal(8, 2)
		/// <summary>
		/// Quantity accepted into inventory. Computed as ReceivedQty - RejectedQty.
		/// </summary>
		[Column(SkipOnInsert=true, SkipOnUpdate=true), NotNull ] public decimal  StockedQty            { get; set; } // decimal(9, 2)
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,                                       NotNull ] public DateTime ModifiedDate          { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_PurchaseOrderDetail_Product_ProductID
		/// </summary>
		[Association(ThisKey="ProductID", OtherKey="ProductID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_PurchaseOrderDetail_Product_ProductID", BackReferenceName="PurchaseOrderDetailProductIds")]
		public Production_Product Product { get; set; }

		/// <summary>
		/// FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID
		/// </summary>
		[Association(ThisKey="PurchaseOrderID", OtherKey="PurchaseOrderID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID", BackReferenceName="PurchaseOrderDetailPurchaseOrderIds")]
		public Purchasing_PurchaseOrderHeader PurchaseOrder { get; set; }

		#endregion
	}

	/// <summary>
	/// General purchase order information. See PurchaseOrderDetail.
	/// </summary>
	[Table(Schema="Purchasing", Name="PurchaseOrderHeader")]
	public partial class Purchasing_PurchaseOrderHeader
	{
		/// <summary>
		/// Primary key.
		/// </summary>
		[PrimaryKey,                                   Identity   ] public int       PurchaseOrderID { get; set; } // int
		/// <summary>
		/// Incremental number to track changes to the purchase order over time.
		/// </summary>
		[Column,                                       NotNull    ] public byte      RevisionNumber  { get; set; } // tinyint
		/// <summary>
		/// Order current status. 1 = Pending; 2 = Approved; 3 = Rejected; 4 = Complete
		/// </summary>
		[Column,                                       NotNull    ] public byte      Status          { get; set; } // tinyint
		/// <summary>
		/// Employee who created the purchase order. Foreign key to Employee.BusinessEntityID.
		/// </summary>
		[Column,                                       NotNull    ] public int       EmployeeID      { get; set; } // int
		/// <summary>
		/// Vendor with whom the purchase order is placed. Foreign key to Vendor.BusinessEntityID.
		/// </summary>
		[Column,                                       NotNull    ] public int       VendorID        { get; set; } // int
		/// <summary>
		/// Shipping method. Foreign key to ShipMethod.ShipMethodID.
		/// </summary>
		[Column,                                       NotNull    ] public int       ShipMethodID    { get; set; } // int
		/// <summary>
		/// Purchase order creation date.
		/// </summary>
		[Column,                                       NotNull    ] public DateTime  OrderDate       { get; set; } // datetime
		/// <summary>
		/// Estimated shipment date from the vendor.
		/// </summary>
		[Column,                                          Nullable] public DateTime? ShipDate        { get; set; } // datetime
		/// <summary>
		/// Purchase order subtotal. Computed as SUM(PurchaseOrderDetail.LineTotal)for the appropriate PurchaseOrderID.
		/// </summary>
		[Column,                                       NotNull    ] public decimal   SubTotal        { get; set; } // money
		/// <summary>
		/// Tax amount.
		/// </summary>
		[Column,                                       NotNull    ] public decimal   TaxAmt          { get; set; } // money
		/// <summary>
		/// Shipping cost.
		/// </summary>
		[Column,                                       NotNull    ] public decimal   Freight         { get; set; } // money
		/// <summary>
		/// Total due to vendor. Computed as Subtotal + TaxAmt + Freight.
		/// </summary>
		[Column(SkipOnInsert=true, SkipOnUpdate=true), NotNull    ] public decimal   TotalDue        { get; set; } // money
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,                                       NotNull    ] public DateTime  ModifiedDate    { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_PurchaseOrderHeader_Employee_EmployeeID
		/// </summary>
		[Association(ThisKey="EmployeeID", OtherKey="BusinessEntityID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_PurchaseOrderHeader_Employee_EmployeeID", BackReferenceName="PurchaseOrderHeaderEmployeeIds")]
		public HumanResources_Employee Employee { get; set; }

		/// <summary>
		/// FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID_BackReference
		/// </summary>
		[Association(ThisKey="PurchaseOrderID", OtherKey="PurchaseOrderID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Purchasing_PurchaseOrderDetail> PurchaseOrderDetailPurchaseOrderIds { get; set; }

		/// <summary>
		/// FK_PurchaseOrderHeader_ShipMethod_ShipMethodID
		/// </summary>
		[Association(ThisKey="ShipMethodID", OtherKey="ShipMethodID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_PurchaseOrderHeader_ShipMethod_ShipMethodID", BackReferenceName="PurchaseOrderHeaderShipMethodIds")]
		public Purchasing_ShipMethod ShipMethod { get; set; }

		/// <summary>
		/// FK_PurchaseOrderHeader_Vendor_VendorID
		/// </summary>
		[Association(ThisKey="VendorID", OtherKey="BusinessEntityID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_PurchaseOrderHeader_Vendor_VendorID", BackReferenceName="PurchaseOrderHeaderVendorIds")]
		public Purchasing_Vendor Vendor { get; set; }

		#endregion
	}

	/// <summary>
	/// Individual products associated with a specific sales order. See SalesOrderHeader.
	/// </summary>
	[Table(Schema="Sales", Name="SalesOrderDetail")]
	public partial class Sales_SalesOrderDetail
	{
		/// <summary>
		/// Primary key. Foreign key to SalesOrderHeader.SalesOrderID.
		/// </summary>
		[Column(),                                                PrimaryKey(1), NotNull ] public int      SalesOrderID          { get; set; } // int
		/// <summary>
		/// Primary key. One incremental unique number per product sold.
		/// </summary>
		[Column(),                                                PrimaryKey(2), Identity] public int      SalesOrderDetailID    { get; set; } // int
		/// <summary>
		/// Shipment tracking number supplied by the shipper.
		/// </summary>
		[Column(),                                                   Nullable            ] public string   CarrierTrackingNumber { get; set; } // nvarchar(25)
		/// <summary>
		/// Quantity ordered per product.
		/// </summary>
		[Column(),                                                               NotNull ] public short    OrderQty              { get; set; } // smallint
		/// <summary>
		/// Product sold to customer. Foreign key to Product.ProductID.
		/// </summary>
		[Column(),                                                               NotNull ] public int      ProductID             { get; set; } // int
		/// <summary>
		/// Promotional code. Foreign key to SpecialOffer.SpecialOfferID.
		/// </summary>
		[Column(),                                                               NotNull ] public int      SpecialOfferID        { get; set; } // int
		/// <summary>
		/// Selling price of a single product.
		/// </summary>
		[Column(),                                                               NotNull ] public decimal  UnitPrice             { get; set; } // money
		/// <summary>
		/// Discount amount.
		/// </summary>
		[Column(),                                                               NotNull ] public decimal  UnitPriceDiscount     { get; set; } // money
		/// <summary>
		/// Per product subtotal. Computed as UnitPrice * (1 - UnitPriceDiscount) * OrderQty.
		/// </summary>
		[Column(           SkipOnInsert=true, SkipOnUpdate=true),                NotNull ] public decimal  LineTotal             { get; set; } // numeric(38, 6)
		/// <summary>
		/// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		[Column("rowguid"),                                                      NotNull ] public Guid     Rowguid               { get; set; } // uniqueidentifier
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column(),                                                               NotNull ] public DateTime ModifiedDate          { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID
		/// </summary>
		[Association(ThisKey="SalesOrderID", OtherKey="SalesOrderID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID", BackReferenceName="SalesOrderDetailSalesOrderIds")]
		public Sales_SalesOrderHeader SalesOrder { get; set; }

		/// <summary>
		/// FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID
		/// </summary>
		[Association(ThisKey="SpecialOfferID, ProductID", OtherKey="SpecialOfferID, ProductID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID", BackReferenceName="SalesOrderDetailSpecialOfferIDProductIds")]
		public Sales_SpecialOfferProduct SpecialOfferProductSpecialOfferIDProductID { get; set; }

		#endregion
	}

	/// <summary>
	/// General sales order information.
	/// </summary>
	[Table(Schema="Sales", Name="SalesOrderHeader")]
	public partial class Sales_SalesOrderHeader
	{
		/// <summary>
		/// Primary key.
		/// </summary>
		[Column(),                                                PrimaryKey,  Identity] public int       SalesOrderID           { get; set; } // int
		/// <summary>
		/// Incremental number to track changes to the sales order over time.
		/// </summary>
		[Column(),                                                NotNull              ] public byte      RevisionNumber         { get; set; } // tinyint
		/// <summary>
		/// Dates the sales order was created.
		/// </summary>
		[Column(),                                                NotNull              ] public DateTime  OrderDate              { get; set; } // datetime
		/// <summary>
		/// Date the order is due to the customer.
		/// </summary>
		[Column(),                                                NotNull              ] public DateTime  DueDate                { get; set; } // datetime
		/// <summary>
		/// Date the order was shipped to the customer.
		/// </summary>
		[Column(),                                                   Nullable          ] public DateTime? ShipDate               { get; set; } // datetime
		/// <summary>
		/// Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled
		/// </summary>
		[Column(),                                                NotNull              ] public byte      Status                 { get; set; } // tinyint
		/// <summary>
		/// 0 = Order placed by sales person. 1 = Order placed online by customer.
		/// </summary>
		[Column(),                                                NotNull              ] public bool      OnlineOrderFlag        { get; set; } // bit
		/// <summary>
		/// Unique sales order identification number.
		/// </summary>
		[Column(           SkipOnInsert=true, SkipOnUpdate=true), NotNull              ] public string    SalesOrderNumber       { get; set; } // nvarchar(25)
		/// <summary>
		/// Customer purchase order number reference.
		/// </summary>
		[Column(),                                                   Nullable          ] public string    PurchaseOrderNumber    { get; set; } // nvarchar(25)
		/// <summary>
		/// Financial accounting number reference.
		/// </summary>
		[Column(),                                                   Nullable          ] public string    AccountNumber          { get; set; } // nvarchar(15)
		/// <summary>
		/// Customer identification number. Foreign key to Customer.BusinessEntityID.
		/// </summary>
		[Column(),                                                NotNull              ] public int       CustomerID             { get; set; } // int
		/// <summary>
		/// Sales person who created the sales order. Foreign key to SalesPerson.BusinessEntityID.
		/// </summary>
		[Column(),                                                   Nullable          ] public int?      SalesPersonID          { get; set; } // int
		/// <summary>
		/// Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.
		/// </summary>
		[Column(),                                                   Nullable          ] public int?      TerritoryID            { get; set; } // int
		/// <summary>
		/// Customer billing address. Foreign key to Address.AddressID.
		/// </summary>
		[Column(),                                                NotNull              ] public int       BillToAddressID        { get; set; } // int
		/// <summary>
		/// Customer shipping address. Foreign key to Address.AddressID.
		/// </summary>
		[Column(),                                                NotNull              ] public int       ShipToAddressID        { get; set; } // int
		/// <summary>
		/// Shipping method. Foreign key to ShipMethod.ShipMethodID.
		/// </summary>
		[Column(),                                                NotNull              ] public int       ShipMethodID           { get; set; } // int
		/// <summary>
		/// Credit card identification number. Foreign key to CreditCard.CreditCardID.
		/// </summary>
		[Column(),                                                   Nullable          ] public int?      CreditCardID           { get; set; } // int
		/// <summary>
		/// Approval code provided by the credit card company.
		/// </summary>
		[Column(),                                                   Nullable          ] public string    CreditCardApprovalCode { get; set; } // varchar(15)
		/// <summary>
		/// Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.
		/// </summary>
		[Column(),                                                   Nullable          ] public int?      CurrencyRateID         { get; set; } // int
		/// <summary>
		/// Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal)for the appropriate SalesOrderID.
		/// </summary>
		[Column(),                                                NotNull              ] public decimal   SubTotal               { get; set; } // money
		/// <summary>
		/// Tax amount.
		/// </summary>
		[Column(),                                                NotNull              ] public decimal   TaxAmt                 { get; set; } // money
		/// <summary>
		/// Shipping cost.
		/// </summary>
		[Column(),                                                NotNull              ] public decimal   Freight                { get; set; } // money
		/// <summary>
		/// Total due from customer. Computed as Subtotal + TaxAmt + Freight.
		/// </summary>
		[Column(           SkipOnInsert=true, SkipOnUpdate=true), NotNull              ] public decimal   TotalDue               { get; set; } // money
		/// <summary>
		/// Sales representative comments.
		/// </summary>
		[Column(),                                                   Nullable          ] public string    Comment                { get; set; } // nvarchar(128)
		/// <summary>
		/// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		[Column("rowguid"),                                       NotNull              ] public Guid      Rowguid                { get; set; } // uniqueidentifier
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column(),                                                NotNull              ] public DateTime  ModifiedDate           { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_SalesOrderHeader_Address_BillToAddressID
		/// </summary>
		[Association(ThisKey="BillToAddressID", OtherKey="AddressID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_SalesOrderHeader_Address_BillToAddressID", BackReferenceName="SalesOrderHeaderBillToAddressIds")]
		public Person_Address BillToAddress { get; set; }

		/// <summary>
		/// FK_SalesOrderHeader_CreditCard_CreditCardID
		/// </summary>
		[Association(ThisKey="CreditCardID", OtherKey="CreditCardID", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_SalesOrderHeader_CreditCard_CreditCardID", BackReferenceName="SalesOrderHeaderCreditCardIds")]
		public Sales_CreditCard CreditCard { get; set; }

		/// <summary>
		/// FK_SalesOrderHeader_CurrencyRate_CurrencyRateID
		/// </summary>
		[Association(ThisKey="CurrencyRateID", OtherKey="CurrencyRateID", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_SalesOrderHeader_CurrencyRate_CurrencyRateID", BackReferenceName="SalesOrderHeaderCurrencyRateIds")]
		public Sales_CurrencyRate CurrencyRate { get; set; }

		/// <summary>
		/// FK_SalesOrderHeader_Customer_CustomerID
		/// </summary>
		[Association(ThisKey="CustomerID", OtherKey="CustomerID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_SalesOrderHeader_Customer_CustomerID", BackReferenceName="SalesOrderHeaderCustomerIds")]
		public Sales_Customer Customer { get; set; }

		/// <summary>
		/// FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID_BackReference
		/// </summary>
		[Association(ThisKey="SalesOrderID", OtherKey="SalesOrderID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Sales_SalesOrderDetail> SalesOrderDetailSalesOrderIds { get; set; }

		/// <summary>
		/// FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID_BackReference
		/// </summary>
		[Association(ThisKey="SalesOrderID", OtherKey="SalesOrderID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Sales_SalesOrderHeaderSalesReason> SalesOrderHeaderSalesReasonSalesOrderIds { get; set; }

		/// <summary>
		/// FK_SalesOrderHeader_SalesPerson_SalesPersonID
		/// </summary>
		[Association(ThisKey="SalesPersonID", OtherKey="BusinessEntityID", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_SalesOrderHeader_SalesPerson_SalesPersonID", BackReferenceName="SalesOrderHeaderSalesPersonIds")]
		public Sales_SalesPerson SalesPerson { get; set; }

		/// <summary>
		/// FK_SalesOrderHeader_ShipMethod_ShipMethodID
		/// </summary>
		[Association(ThisKey="ShipMethodID", OtherKey="ShipMethodID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_SalesOrderHeader_ShipMethod_ShipMethodID", BackReferenceName="SalesOrderHeaderShipMethodIds")]
		public Purchasing_ShipMethod ShipMethod { get; set; }

		/// <summary>
		/// FK_SalesOrderHeader_Address_ShipToAddressID
		/// </summary>
		[Association(ThisKey="ShipToAddressID", OtherKey="AddressID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_SalesOrderHeader_Address_ShipToAddressID", BackReferenceName="SalesOrderHeaderShipToAddressIds")]
		public Person_Address ShipToAddress { get; set; }

		/// <summary>
		/// FK_SalesOrderHeader_SalesTerritory_TerritoryID
		/// </summary>
		[Association(ThisKey="TerritoryID", OtherKey="TerritoryID", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_SalesOrderHeader_SalesTerritory_TerritoryID", BackReferenceName="SalesOrderHeaderTerritoryIds")]
		public Sales_SalesTerritory Territory { get; set; }

		#endregion
	}

	/// <summary>
	/// Cross-reference table mapping sales orders to sales reason codes.
	/// </summary>
	[Table(Schema="Sales", Name="SalesOrderHeaderSalesReason")]
	public partial class Sales_SalesOrderHeaderSalesReason
	{
		/// <summary>
		/// Primary key. Foreign key to SalesOrderHeader.SalesOrderID.
		/// </summary>
		[PrimaryKey(1), NotNull] public int      SalesOrderID  { get; set; } // int
		/// <summary>
		/// Primary key. Foreign key to SalesReason.SalesReasonID.
		/// </summary>
		[PrimaryKey(2), NotNull] public int      SalesReasonID { get; set; } // int
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,        NotNull] public DateTime ModifiedDate  { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID
		/// </summary>
		[Association(ThisKey="SalesOrderID", OtherKey="SalesOrderID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID", BackReferenceName="SalesOrderHeaderSalesReasonSalesOrderIds")]
		public Sales_SalesOrderHeader SalesOrder { get; set; }

		/// <summary>
		/// FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID
		/// </summary>
		[Association(ThisKey="SalesReasonID", OtherKey="SalesReasonID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID", BackReferenceName="SalesOrderHeaderSalesReasonSalesReasonIds")]
		public Sales_SalesReason SalesReason { get; set; }

		#endregion
	}

	/// <summary>
	/// Sales representative current information.
	/// </summary>
	[Table(Schema="Sales", Name="SalesPerson")]
	public partial class Sales_SalesPerson
	{
		/// <summary>
		/// Primary key for SalesPerson records. Foreign key to Employee.BusinessEntityID
		/// </summary>
		[Column(),          PrimaryKey,  NotNull] public int      BusinessEntityID { get; set; } // int
		/// <summary>
		/// Territory currently assigned to. Foreign key to SalesTerritory.SalesTerritoryID.
		/// </summary>
		[Column(),             Nullable         ] public int?     TerritoryID      { get; set; } // int
		/// <summary>
		/// Projected yearly sales.
		/// </summary>
		[Column(),             Nullable         ] public decimal? SalesQuota       { get; set; } // money
		/// <summary>
		/// Bonus due if quota is met.
		/// </summary>
		[Column(),                       NotNull] public decimal  Bonus            { get; set; } // money
		/// <summary>
		/// Commision percent received per sale.
		/// </summary>
		[Column(),                       NotNull] public decimal  CommissionPct    { get; set; } // smallmoney
		/// <summary>
		/// Sales total year to date.
		/// </summary>
		[Column(),                       NotNull] public decimal  SalesYTD         { get; set; } // money
		/// <summary>
		/// Sales total of previous year.
		/// </summary>
		[Column(),                       NotNull] public decimal  SalesLastYear    { get; set; } // money
		/// <summary>
		/// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		[Column("rowguid"),              NotNull] public Guid     Rowguid          { get; set; } // uniqueidentifier
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column(),                       NotNull] public DateTime ModifiedDate     { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_SalesPerson_Employee_BusinessEntityID
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", CanBeNull=false, Relationship=Relationship.OneToOne, KeyName="FK_SalesPerson_Employee_BusinessEntityID", BackReferenceName="SalesPersonBusinessEntityID")]
		public HumanResources_Employee BusinessEntity { get; set; }

		/// <summary>
		/// FK_SalesOrderHeader_SalesPerson_SalesPersonID_BackReference
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="SalesPersonID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Sales_SalesOrderHeader> SalesOrderHeaderSalesPersonIds { get; set; }

		/// <summary>
		/// FK_SalesPersonQuotaHistory_SalesPerson_BusinessEntityID_BackReference
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Sales_SalesPersonQuotaHistory> SalesPersonQuotaHistoryBusinessEntityIds { get; set; }

		/// <summary>
		/// FK_SalesTerritoryHistory_SalesPerson_BusinessEntityID_BackReference
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Sales_SalesTerritoryHistory> SalesTerritoryHistoryBusinessEntityIds { get; set; }

		/// <summary>
		/// FK_Store_SalesPerson_SalesPersonID_BackReference
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="SalesPersonID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Sales_Store> StoreSalesPersonIds { get; set; }

		/// <summary>
		/// FK_SalesPerson_SalesTerritory_TerritoryID
		/// </summary>
		[Association(ThisKey="TerritoryID", OtherKey="TerritoryID", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_SalesPerson_SalesTerritory_TerritoryID", BackReferenceName="SalesPersonTerritoryIds")]
		public Sales_SalesTerritory Territory { get; set; }

		#endregion
	}

	/// <summary>
	/// Sales performance tracking.
	/// </summary>
	[Table(Schema="Sales", Name="SalesPersonQuotaHistory")]
	public partial class Sales_SalesPersonQuotaHistory
	{
		/// <summary>
		/// Sales person identification number. Foreign key to SalesPerson.BusinessEntityID.
		/// </summary>
		[Column(),          PrimaryKey(1), NotNull] public int      BusinessEntityID { get; set; } // int
		/// <summary>
		/// Sales quota date.
		/// </summary>
		[Column(),          PrimaryKey(2), NotNull] public DateTime QuotaDate        { get; set; } // datetime
		/// <summary>
		/// Sales quota amount.
		/// </summary>
		[Column(),                         NotNull] public decimal  SalesQuota       { get; set; } // money
		/// <summary>
		/// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		[Column("rowguid"),                NotNull] public Guid     Rowguid          { get; set; } // uniqueidentifier
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column(),                         NotNull] public DateTime ModifiedDate     { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_SalesPersonQuotaHistory_SalesPerson_BusinessEntityID
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_SalesPersonQuotaHistory_SalesPerson_BusinessEntityID", BackReferenceName="SalesPersonQuotaHistoryBusinessEntityIds")]
		public Sales_SalesPerson BusinessEntity { get; set; }

		#endregion
	}

	/// <summary>
	/// Lookup table of customer purchase reasons.
	/// </summary>
	[Table(Schema="Sales", Name="SalesReason")]
	public partial class Sales_SalesReason
	{
		/// <summary>
		/// Primary key for SalesReason records.
		/// </summary>
		[PrimaryKey, Identity] public int      SalesReasonID { get; set; } // int
		/// <summary>
		/// Sales reason description.
		/// </summary>
		[Column,     NotNull ] public string   Name          { get; set; } // nvarchar(50)
		/// <summary>
		/// Category the sales reason belongs to.
		/// </summary>
		[Column,     NotNull ] public string   ReasonType    { get; set; } // nvarchar(50)
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,     NotNull ] public DateTime ModifiedDate  { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID_BackReference
		/// </summary>
		[Association(ThisKey="SalesReasonID", OtherKey="SalesReasonID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Sales_SalesOrderHeaderSalesReason> SalesOrderHeaderSalesReasonSalesReasonIds { get; set; }

		#endregion
	}

	/// <summary>
	/// Tax rate lookup table.
	/// </summary>
	[Table(Schema="Sales", Name="SalesTaxRate")]
	public partial class Sales_SalesTaxRate
	{
		/// <summary>
		/// Primary key for SalesTaxRate records.
		/// </summary>
		[Column(),          PrimaryKey, Identity] public int      SalesTaxRateID  { get; set; } // int
		/// <summary>
		/// State, province, or country/region the sales tax applies to.
		/// </summary>
		[Column(),          NotNull             ] public int      StateProvinceID { get; set; } // int
		/// <summary>
		/// 1 = Tax applied to retail transactions, 2 = Tax applied to wholesale transactions, 3 = Tax applied to all sales (retail and wholesale) transactions.
		/// </summary>
		[Column(),          NotNull             ] public byte     TaxType         { get; set; } // tinyint
		/// <summary>
		/// Tax rate amount.
		/// </summary>
		[Column(),          NotNull             ] public decimal  TaxRate         { get; set; } // smallmoney
		/// <summary>
		/// Tax rate description.
		/// </summary>
		[Column(),          NotNull             ] public string   Name            { get; set; } // nvarchar(50)
		/// <summary>
		/// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		[Column("rowguid"), NotNull             ] public Guid     Rowguid         { get; set; } // uniqueidentifier
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column(),          NotNull             ] public DateTime ModifiedDate    { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_SalesTaxRate_StateProvince_StateProvinceID
		/// </summary>
		[Association(ThisKey="StateProvinceID", OtherKey="StateProvinceID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_SalesTaxRate_StateProvince_StateProvinceID", BackReferenceName="SalesTaxRateStateProvinceIds")]
		public Person_StateProvince StateProvince { get; set; }

		#endregion
	}

	/// <summary>
	/// Sales territory lookup table.
	/// </summary>
	[Table(Schema="Sales", Name="SalesTerritory")]
	public partial class Sales_SalesTerritory
	{
		/// <summary>
		/// Primary key for SalesTerritory records.
		/// </summary>
		[Column(),          PrimaryKey, Identity] public int      TerritoryID       { get; set; } // int
		/// <summary>
		/// Sales territory description
		/// </summary>
		[Column(),          NotNull             ] public string   Name              { get; set; } // nvarchar(50)
		/// <summary>
		/// ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode.
		/// </summary>
		[Column(),          NotNull             ] public string   CountryRegionCode { get; set; } // nvarchar(3)
		/// <summary>
		/// Geographic area to which the sales territory belong.
		/// </summary>
		[Column(),          NotNull             ] public string   Group             { get; set; } // nvarchar(50)
		/// <summary>
		/// Sales in the territory year to date.
		/// </summary>
		[Column(),          NotNull             ] public decimal  SalesYTD          { get; set; } // money
		/// <summary>
		/// Sales in the territory the previous year.
		/// </summary>
		[Column(),          NotNull             ] public decimal  SalesLastYear     { get; set; } // money
		/// <summary>
		/// Business costs in the territory year to date.
		/// </summary>
		[Column(),          NotNull             ] public decimal  CostYTD           { get; set; } // money
		/// <summary>
		/// Business costs in the territory the previous year.
		/// </summary>
		[Column(),          NotNull             ] public decimal  CostLastYear      { get; set; } // money
		/// <summary>
		/// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		[Column("rowguid"), NotNull             ] public Guid     Rowguid           { get; set; } // uniqueidentifier
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column(),          NotNull             ] public DateTime ModifiedDate      { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_SalesTerritory_CountryRegion_CountryRegionCode
		/// </summary>
		[Association(ThisKey="CountryRegionCode", OtherKey="CountryRegionCode", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_SalesTerritory_CountryRegion_CountryRegionCode", BackReferenceName="SalesTerritoryCountryRegionCodes")]
		public Person_CountryRegion CountryRegionCountryRegionCode { get; set; }

		/// <summary>
		/// FK_Customer_SalesTerritory_TerritoryID_BackReference
		/// </summary>
		[Association(ThisKey="TerritoryID", OtherKey="TerritoryID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Sales_Customer> CustomerTerritoryIds { get; set; }

		/// <summary>
		/// FK_SalesOrderHeader_SalesTerritory_TerritoryID_BackReference
		/// </summary>
		[Association(ThisKey="TerritoryID", OtherKey="TerritoryID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Sales_SalesOrderHeader> SalesOrderHeaderTerritoryIds { get; set; }

		/// <summary>
		/// FK_SalesPerson_SalesTerritory_TerritoryID_BackReference
		/// </summary>
		[Association(ThisKey="TerritoryID", OtherKey="TerritoryID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Sales_SalesPerson> SalesPersonTerritoryIds { get; set; }

		/// <summary>
		/// FK_SalesTerritoryHistory_SalesTerritory_TerritoryID_BackReference
		/// </summary>
		[Association(ThisKey="TerritoryID", OtherKey="TerritoryID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Sales_SalesTerritoryHistory> SalesTerritoryHistoryTerritoryIds { get; set; }

		/// <summary>
		/// FK_StateProvince_SalesTerritory_TerritoryID_BackReference
		/// </summary>
		[Association(ThisKey="TerritoryID", OtherKey="TerritoryID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Person_StateProvince> StateProvinceTerritoryIds { get; set; }

		#endregion
	}

	/// <summary>
	/// Sales representative transfers to other sales territories.
	/// </summary>
	[Table(Schema="Sales", Name="SalesTerritoryHistory")]
	public partial class Sales_SalesTerritoryHistory
	{
		/// <summary>
		/// Primary key. The sales rep.  Foreign key to SalesPerson.BusinessEntityID.
		/// </summary>
		[Column(),          PrimaryKey(1), NotNull] public int       BusinessEntityID { get; set; } // int
		/// <summary>
		/// Primary key. Territory identification number. Foreign key to SalesTerritory.SalesTerritoryID.
		/// </summary>
		[Column(),          PrimaryKey(3), NotNull] public int       TerritoryID      { get; set; } // int
		/// <summary>
		/// Primary key. Date the sales representive started work in the territory.
		/// </summary>
		[Column(),          PrimaryKey(2), NotNull] public DateTime  StartDate        { get; set; } // datetime
		/// <summary>
		/// Date the sales representative left work in the territory.
		/// </summary>
		[Column(),             Nullable           ] public DateTime? EndDate          { get; set; } // datetime
		/// <summary>
		/// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		[Column("rowguid"),                NotNull] public Guid      Rowguid          { get; set; } // uniqueidentifier
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column(),                         NotNull] public DateTime  ModifiedDate     { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_SalesTerritoryHistory_SalesPerson_BusinessEntityID
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_SalesTerritoryHistory_SalesPerson_BusinessEntityID", BackReferenceName="SalesTerritoryHistoryBusinessEntityIds")]
		public Sales_SalesPerson BusinessEntity { get; set; }

		/// <summary>
		/// FK_SalesTerritoryHistory_SalesTerritory_TerritoryID
		/// </summary>
		[Association(ThisKey="TerritoryID", OtherKey="TerritoryID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_SalesTerritoryHistory_SalesTerritory_TerritoryID", BackReferenceName="SalesTerritoryHistoryTerritoryIds")]
		public Sales_SalesTerritory Territory { get; set; }

		#endregion
	}

	/// <summary>
	/// Manufacturing failure reasons lookup table.
	/// </summary>
	[Table(Schema="Production", Name="ScrapReason")]
	public partial class Production_ScrapReason
	{
		/// <summary>
		/// Primary key for ScrapReason records.
		/// </summary>
		[PrimaryKey, Identity] public short    ScrapReasonID { get; set; } // smallint
		/// <summary>
		/// Failure description.
		/// </summary>
		[Column,     NotNull ] public string   Name          { get; set; } // nvarchar(50)
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,     NotNull ] public DateTime ModifiedDate  { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_WorkOrder_ScrapReason_ScrapReasonID_BackReference
		/// </summary>
		[Association(ThisKey="ScrapReasonID", OtherKey="ScrapReasonID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Production_WorkOrder> WorkOrderScrapReasonIds { get; set; }

		#endregion
	}

	/// <summary>
	/// Work shift lookup table.
	/// </summary>
	[Table(Schema="HumanResources", Name="Shift")]
	public partial class HumanResources_Shift
	{
		/// <summary>
		/// Primary key for Shift records.
		/// </summary>
		[PrimaryKey, Identity] public byte     ShiftID      { get; set; } // tinyint
		/// <summary>
		/// Shift description.
		/// </summary>
		[Column,     NotNull ] public string   Name         { get; set; } // nvarchar(50)
		/// <summary>
		/// Shift start time.
		/// </summary>
		[Column,     NotNull ] public TimeSpan StartTime    { get; set; } // time(7)
		/// <summary>
		/// Shift end time.
		/// </summary>
		[Column,     NotNull ] public TimeSpan EndTime      { get; set; } // time(7)
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,     NotNull ] public DateTime ModifiedDate { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_EmployeeDepartmentHistory_Shift_ShiftID_BackReference
		/// </summary>
		[Association(ThisKey="ShiftID", OtherKey="ShiftID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<HumanResources_EmployeeDepartmentHistory> EmployeeDepartmentHistoryShiftIds { get; set; }

		#endregion
	}

	/// <summary>
	/// Shipping company lookup table.
	/// </summary>
	[Table(Schema="Purchasing", Name="ShipMethod")]
	public partial class Purchasing_ShipMethod
	{
		/// <summary>
		/// Primary key for ShipMethod records.
		/// </summary>
		[Column(),          PrimaryKey, Identity] public int      ShipMethodID { get; set; } // int
		/// <summary>
		/// Shipping company name.
		/// </summary>
		[Column(),          NotNull             ] public string   Name         { get; set; } // nvarchar(50)
		/// <summary>
		/// Minimum shipping charge.
		/// </summary>
		[Column(),          NotNull             ] public decimal  ShipBase     { get; set; } // money
		/// <summary>
		/// Shipping charge per pound.
		/// </summary>
		[Column(),          NotNull             ] public decimal  ShipRate     { get; set; } // money
		/// <summary>
		/// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		[Column("rowguid"), NotNull             ] public Guid     Rowguid      { get; set; } // uniqueidentifier
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column(),          NotNull             ] public DateTime ModifiedDate { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_PurchaseOrderHeader_ShipMethod_ShipMethodID_BackReference
		/// </summary>
		[Association(ThisKey="ShipMethodID", OtherKey="ShipMethodID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Purchasing_PurchaseOrderHeader> PurchaseOrderHeaderShipMethodIds { get; set; }

		/// <summary>
		/// FK_SalesOrderHeader_ShipMethod_ShipMethodID_BackReference
		/// </summary>
		[Association(ThisKey="ShipMethodID", OtherKey="ShipMethodID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Sales_SalesOrderHeader> SalesOrderHeaderShipMethodIds { get; set; }

		#endregion
	}

	/// <summary>
	/// Contains online customer orders until the order is submitted or cancelled.
	/// </summary>
	[Table(Schema="Sales", Name="ShoppingCartItem")]
	public partial class Sales_ShoppingCartItem
	{
		/// <summary>
		/// Primary key for ShoppingCartItem records.
		/// </summary>
		[PrimaryKey, Identity] public int      ShoppingCartItemID { get; set; } // int
		/// <summary>
		/// Shopping cart identification number.
		/// </summary>
		[Column,     NotNull ] public string   ShoppingCartID     { get; set; } // nvarchar(50)
		/// <summary>
		/// Product quantity ordered.
		/// </summary>
		[Column,     NotNull ] public int      Quantity           { get; set; } // int
		/// <summary>
		/// Product ordered. Foreign key to Product.ProductID.
		/// </summary>
		[Column,     NotNull ] public int      ProductID          { get; set; } // int
		/// <summary>
		/// Date the time the record was created.
		/// </summary>
		[Column,     NotNull ] public DateTime DateCreated        { get; set; } // datetime
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,     NotNull ] public DateTime ModifiedDate       { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_ShoppingCartItem_Product_ProductID
		/// </summary>
		[Association(ThisKey="ProductID", OtherKey="ProductID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_ShoppingCartItem_Product_ProductID", BackReferenceName="ShoppingCartItemProductIds")]
		public Production_Product Product { get; set; }

		#endregion
	}

	/// <summary>
	/// Sale discounts lookup table.
	/// </summary>
	[Table(Schema="Sales", Name="SpecialOffer")]
	public partial class Sales_SpecialOffer
	{
		/// <summary>
		/// Primary key for SpecialOffer records.
		/// </summary>
		[Column(),          PrimaryKey,  Identity] public int      SpecialOfferID { get; set; } // int
		/// <summary>
		/// Discount description.
		/// </summary>
		[Column(),          NotNull              ] public string   Description    { get; set; } // nvarchar(255)
		/// <summary>
		/// Discount precentage.
		/// </summary>
		[Column(),          NotNull              ] public decimal  DiscountPct    { get; set; } // smallmoney
		/// <summary>
		/// Discount type category.
		/// </summary>
		[Column(),          NotNull              ] public string   Type           { get; set; } // nvarchar(50)
		/// <summary>
		/// Group the discount applies to such as Reseller or Customer.
		/// </summary>
		[Column(),          NotNull              ] public string   Category       { get; set; } // nvarchar(50)
		/// <summary>
		/// Discount start date.
		/// </summary>
		[Column(),          NotNull              ] public DateTime StartDate      { get; set; } // datetime
		/// <summary>
		/// Discount end date.
		/// </summary>
		[Column(),          NotNull              ] public DateTime EndDate        { get; set; } // datetime
		/// <summary>
		/// Minimum discount percent allowed.
		/// </summary>
		[Column(),          NotNull              ] public int      MinQty         { get; set; } // int
		/// <summary>
		/// Maximum discount percent allowed.
		/// </summary>
		[Column(),             Nullable          ] public int?     MaxQty         { get; set; } // int
		/// <summary>
		/// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		[Column("rowguid"), NotNull              ] public Guid     Rowguid        { get; set; } // uniqueidentifier
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column(),          NotNull              ] public DateTime ModifiedDate   { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID_BackReference
		/// </summary>
		[Association(ThisKey="SpecialOfferID", OtherKey="SpecialOfferID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Sales_SpecialOfferProduct> SpecialOfferProductSpecialOfferIds { get; set; }

		#endregion
	}

	/// <summary>
	/// Cross-reference table mapping products to special offer discounts.
	/// </summary>
	[Table(Schema="Sales", Name="SpecialOfferProduct")]
	public partial class Sales_SpecialOfferProduct
	{
		/// <summary>
		/// Primary key for SpecialOfferProduct records.
		/// </summary>
		[Column(),          PrimaryKey(1), NotNull] public int      SpecialOfferID { get; set; } // int
		/// <summary>
		/// Product identification number. Foreign key to Product.ProductID.
		/// </summary>
		[Column(),          PrimaryKey(2), NotNull] public int      ProductID      { get; set; } // int
		/// <summary>
		/// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		[Column("rowguid"),                NotNull] public Guid     Rowguid        { get; set; } // uniqueidentifier
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column(),                         NotNull] public DateTime ModifiedDate   { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_SpecialOfferProduct_Product_ProductID
		/// </summary>
		[Association(ThisKey="ProductID", OtherKey="ProductID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_SpecialOfferProduct_Product_ProductID", BackReferenceName="SpecialOfferProductProductIds")]
		public Production_Product Product { get; set; }

		/// <summary>
		/// FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID_BackReference
		/// </summary>
		[Association(ThisKey="SpecialOfferID, ProductID", OtherKey="SpecialOfferID, ProductID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Sales_SalesOrderDetail> SalesOrderDetailSpecialOfferIDProductIds { get; set; }

		/// <summary>
		/// FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID
		/// </summary>
		[Association(ThisKey="SpecialOfferID", OtherKey="SpecialOfferID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID", BackReferenceName="SpecialOfferProductSpecialOfferIds")]
		public Sales_SpecialOffer SpecialOffer { get; set; }

		#endregion
	}

	/// <summary>
	/// State and province lookup table.
	/// </summary>
	[Table(Schema="Person", Name="StateProvince")]
	public partial class Person_StateProvince
	{
		/// <summary>
		/// Primary key for StateProvince records.
		/// </summary>
		[Column(),          PrimaryKey, Identity] public int      StateProvinceID         { get; set; } // int
		/// <summary>
		/// ISO standard state or province code.
		/// </summary>
		[Column(),          NotNull             ] public string   StateProvinceCode       { get; set; } // nchar(3)
		/// <summary>
		/// ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode.
		/// </summary>
		[Column(),          NotNull             ] public string   CountryRegionCode       { get; set; } // nvarchar(3)
		/// <summary>
		/// 0 = StateProvinceCode exists. 1 = StateProvinceCode unavailable, using CountryRegionCode.
		/// </summary>
		[Column(),          NotNull             ] public bool     IsOnlyStateProvinceFlag { get; set; } // bit
		/// <summary>
		/// State or province description.
		/// </summary>
		[Column(),          NotNull             ] public string   Name                    { get; set; } // nvarchar(50)
		/// <summary>
		/// ID of the territory in which the state or province is located. Foreign key to SalesTerritory.SalesTerritoryID.
		/// </summary>
		[Column(),          NotNull             ] public int      TerritoryID             { get; set; } // int
		/// <summary>
		/// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		[Column("rowguid"), NotNull             ] public Guid     Rowguid                 { get; set; } // uniqueidentifier
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column(),          NotNull             ] public DateTime ModifiedDate            { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_Address_StateProvince_StateProvinceID_BackReference
		/// </summary>
		[Association(ThisKey="StateProvinceID", OtherKey="StateProvinceID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Person_Address> AddressStateProvinceIds { get; set; }

		/// <summary>
		/// FK_StateProvince_CountryRegion_CountryRegionCode
		/// </summary>
		[Association(ThisKey="CountryRegionCode", OtherKey="CountryRegionCode", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_StateProvince_CountryRegion_CountryRegionCode", BackReferenceName="StateProvinceCountryRegionCodes")]
		public Person_CountryRegion CountryRegionCountryRegionCode { get; set; }

		/// <summary>
		/// FK_SalesTaxRate_StateProvince_StateProvinceID_BackReference
		/// </summary>
		[Association(ThisKey="StateProvinceID", OtherKey="StateProvinceID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Sales_SalesTaxRate> SalesTaxRateStateProvinceIds { get; set; }

		/// <summary>
		/// FK_StateProvince_SalesTerritory_TerritoryID
		/// </summary>
		[Association(ThisKey="TerritoryID", OtherKey="TerritoryID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_StateProvince_SalesTerritory_TerritoryID", BackReferenceName="StateProvinceTerritoryIds")]
		public Sales_SalesTerritory Territory { get; set; }

		#endregion
	}

	/// <summary>
	/// Customers (resellers) of Adventure Works products.
	/// </summary>
	[Table(Schema="Sales", Name="Store")]
	public partial class Sales_Store
	{
		/// <summary>
		/// Primary key. Foreign key to Customer.BusinessEntityID.
		/// </summary>
		[Column(),          PrimaryKey,  NotNull] public int      BusinessEntityID { get; set; } // int
		/// <summary>
		/// Name of the store.
		/// </summary>
		[Column(),                       NotNull] public string   Name             { get; set; } // nvarchar(50)
		/// <summary>
		/// ID of the sales person assigned to the customer. Foreign key to SalesPerson.BusinessEntityID.
		/// </summary>
		[Column(),             Nullable         ] public int?     SalesPersonID    { get; set; } // int
		/// <summary>
		/// Demographic informationg about the store such as the number of employees, annual sales and store type.
		/// </summary>
		[Column(),             Nullable         ] public string   Demographics     { get; set; } // xml
		/// <summary>
		/// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		[Column("rowguid"),              NotNull] public Guid     Rowguid          { get; set; } // uniqueidentifier
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column(),                       NotNull] public DateTime ModifiedDate     { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_Store_BusinessEntity_BusinessEntityID
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", CanBeNull=false, Relationship=Relationship.OneToOne, KeyName="FK_Store_BusinessEntity_BusinessEntityID", BackReferenceName="StoreBusinessEntityID")]
		public Person_BusinessEntity BusinessEntity { get; set; }

		/// <summary>
		/// FK_Customer_Store_StoreID_BackReference
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="StoreID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Sales_Customer> CustomerStoreIds { get; set; }

		/// <summary>
		/// FK_Store_SalesPerson_SalesPersonID
		/// </summary>
		[Association(ThisKey="SalesPersonID", OtherKey="BusinessEntityID", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_Store_SalesPerson_SalesPersonID", BackReferenceName="StoreSalesPersonIds")]
		public Sales_SalesPerson SalesPerson { get; set; }

		#endregion
	}

	/// <summary>
	/// Record of each purchase order, sales order, or work order transaction year to date.
	/// </summary>
	[Table(Schema="Production", Name="TransactionHistory")]
	public partial class Production_TransactionHistory
	{
		/// <summary>
		/// Primary key for TransactionHistory records.
		/// </summary>
		[PrimaryKey, Identity] public int      TransactionID        { get; set; } // int
		/// <summary>
		/// Product identification number. Foreign key to Product.ProductID.
		/// </summary>
		[Column,     NotNull ] public int      ProductID            { get; set; } // int
		/// <summary>
		/// Purchase order, sales order, or work order identification number.
		/// </summary>
		[Column,     NotNull ] public int      ReferenceOrderID     { get; set; } // int
		/// <summary>
		/// Line number associated with the purchase order, sales order, or work order.
		/// </summary>
		[Column,     NotNull ] public int      ReferenceOrderLineID { get; set; } // int
		/// <summary>
		/// Date and time of the transaction.
		/// </summary>
		[Column,     NotNull ] public DateTime TransactionDate      { get; set; } // datetime
		/// <summary>
		/// W = WorkOrder, S = SalesOrder, P = PurchaseOrder
		/// </summary>
		[Column,     NotNull ] public char     TransactionType      { get; set; } // nchar(1)
		/// <summary>
		/// Product quantity.
		/// </summary>
		[Column,     NotNull ] public int      Quantity             { get; set; } // int
		/// <summary>
		/// Product cost.
		/// </summary>
		[Column,     NotNull ] public decimal  ActualCost           { get; set; } // money
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,     NotNull ] public DateTime ModifiedDate         { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_TransactionHistory_Product_ProductID
		/// </summary>
		[Association(ThisKey="ProductID", OtherKey="ProductID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_TransactionHistory_Product_ProductID", BackReferenceName="TransactionHistoryProductIds")]
		public Production_Product Product { get; set; }

		#endregion
	}

	/// <summary>
	/// Transactions for previous years.
	/// </summary>
	[Table(Schema="Production", Name="TransactionHistoryArchive")]
	public partial class Production_TransactionHistoryArchive
	{
		/// <summary>
		/// Primary key for TransactionHistoryArchive records.
		/// </summary>
		[PrimaryKey, NotNull] public int      TransactionID        { get; set; } // int
		/// <summary>
		/// Product identification number. Foreign key to Product.ProductID.
		/// </summary>
		[Column,     NotNull] public int      ProductID            { get; set; } // int
		/// <summary>
		/// Purchase order, sales order, or work order identification number.
		/// </summary>
		[Column,     NotNull] public int      ReferenceOrderID     { get; set; } // int
		/// <summary>
		/// Line number associated with the purchase order, sales order, or work order.
		/// </summary>
		[Column,     NotNull] public int      ReferenceOrderLineID { get; set; } // int
		/// <summary>
		/// Date and time of the transaction.
		/// </summary>
		[Column,     NotNull] public DateTime TransactionDate      { get; set; } // datetime
		/// <summary>
		/// W = Work Order, S = Sales Order, P = Purchase Order
		/// </summary>
		[Column,     NotNull] public char     TransactionType      { get; set; } // nchar(1)
		/// <summary>
		/// Product quantity.
		/// </summary>
		[Column,     NotNull] public int      Quantity             { get; set; } // int
		/// <summary>
		/// Product cost.
		/// </summary>
		[Column,     NotNull] public decimal  ActualCost           { get; set; } // money
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,     NotNull] public DateTime ModifiedDate         { get; set; } // datetime
	}

	/// <summary>
	/// Unit of measure lookup table.
	/// </summary>
	[Table(Schema="Production", Name="UnitMeasure")]
	public partial class Production_UnitMeasure
	{
		/// <summary>
		/// Primary key.
		/// </summary>
		[PrimaryKey, NotNull] public string   UnitMeasureCode { get; set; } // nchar(3)
		/// <summary>
		/// Unit of measure description.
		/// </summary>
		[Column,     NotNull] public string   Name            { get; set; } // nvarchar(50)
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,     NotNull] public DateTime ModifiedDate    { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_BillOfMaterials_UnitMeasure_UnitMeasureCode_BackReference
		/// </summary>
		[Association(ThisKey="UnitMeasureCode", OtherKey="UnitMeasureCode", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Production_BillOfMaterial> BillOfMaterialsUnitMeasureCodes { get; set; }

		/// <summary>
		/// FK_Product_UnitMeasure_SizeUnitMeasureCode_BackReference
		/// </summary>
		[Association(ThisKey="UnitMeasureCode", OtherKey="SizeUnitMeasureCode", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Production_Product> ProductSizeUnitMeasureCodes { get; set; }

		/// <summary>
		/// FK_ProductVendor_UnitMeasure_UnitMeasureCode_BackReference
		/// </summary>
		[Association(ThisKey="UnitMeasureCode", OtherKey="UnitMeasureCode", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Purchasing_ProductVendor> ProductVendorUnitMeasureCodes { get; set; }

		/// <summary>
		/// FK_Product_UnitMeasure_WeightUnitMeasureCode_BackReference
		/// </summary>
		[Association(ThisKey="UnitMeasureCode", OtherKey="WeightUnitMeasureCode", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Production_Product> ProductWeightUnitMeasureCodes { get; set; }

		#endregion
	}

	/// <summary>
	/// Displays the contact name and content from each element in the xml column AdditionalContactInfo for that person.
	/// </summary>
	[Table(Schema="Person", Name="vAdditionalContactInfo", IsView=true)]
	public partial class Person_VAdditionalContactInfo
	{
		[Column(),          NotNull    ] public int      BusinessEntityID               { get; set; } // int
		[Column(),          NotNull    ] public string   FirstName                      { get; set; } // nvarchar(50)
		[Column(),             Nullable] public string   MiddleName                     { get; set; } // nvarchar(50)
		[Column(),          NotNull    ] public string   LastName                       { get; set; } // nvarchar(50)
		[Column(),             Nullable] public string   TelephoneNumber                { get; set; } // nvarchar(50)
		[Column(),             Nullable] public string   TelephoneSpecialInstructions   { get; set; } // nvarchar(max)
		[Column(),             Nullable] public string   Street                         { get; set; } // nvarchar(50)
		[Column(),             Nullable] public string   City                           { get; set; } // nvarchar(50)
		[Column(),             Nullable] public string   StateProvince                  { get; set; } // nvarchar(50)
		[Column(),             Nullable] public string   PostalCode                     { get; set; } // nvarchar(50)
		[Column(),             Nullable] public string   CountryRegion                  { get; set; } // nvarchar(50)
		[Column(),             Nullable] public string   HomeAddressSpecialInstructions { get; set; } // nvarchar(max)
		[Column(),             Nullable] public string   EMailAddress                   { get; set; } // nvarchar(128)
		[Column(),             Nullable] public string   EMailSpecialInstructions       { get; set; } // nvarchar(max)
		[Column(),             Nullable] public string   EMailTelephoneNumber           { get; set; } // nvarchar(50)
		[Column("rowguid"), NotNull    ] public Guid     Rowguid                        { get; set; } // uniqueidentifier
		[Column(),          NotNull    ] public DateTime ModifiedDate                   { get; set; } // datetime
	}

	/// <summary>
	/// Employee names and addresses.
	/// </summary>
	[Table(Schema="HumanResources", Name="vEmployee", IsView=true)]
	public partial class HumanResources_VEmployee
	{
		[Column, NotNull    ] public int    BusinessEntityID      { get; set; } // int
		[Column,    Nullable] public string Title                 { get; set; } // nvarchar(8)
		[Column, NotNull    ] public string FirstName             { get; set; } // nvarchar(50)
		[Column,    Nullable] public string MiddleName            { get; set; } // nvarchar(50)
		[Column, NotNull    ] public string LastName              { get; set; } // nvarchar(50)
		[Column,    Nullable] public string Suffix                { get; set; } // nvarchar(10)
		[Column, NotNull    ] public string JobTitle              { get; set; } // nvarchar(50)
		[Column,    Nullable] public string PhoneNumber           { get; set; } // nvarchar(25)
		[Column,    Nullable] public string PhoneNumberType       { get; set; } // nvarchar(50)
		[Column,    Nullable] public string EmailAddress          { get; set; } // nvarchar(50)
		[Column, NotNull    ] public int    EmailPromotion        { get; set; } // int
		[Column, NotNull    ] public string AddressLine1          { get; set; } // nvarchar(60)
		[Column,    Nullable] public string AddressLine2          { get; set; } // nvarchar(60)
		[Column, NotNull    ] public string City                  { get; set; } // nvarchar(30)
		[Column, NotNull    ] public string StateProvinceName     { get; set; } // nvarchar(50)
		[Column, NotNull    ] public string PostalCode            { get; set; } // nvarchar(15)
		[Column, NotNull    ] public string CountryRegionName     { get; set; } // nvarchar(50)
		[Column,    Nullable] public string AdditionalContactInfo { get; set; } // xml
	}

	/// <summary>
	/// Returns employee name, title, and current department.
	/// </summary>
	[Table(Schema="HumanResources", Name="vEmployeeDepartment", IsView=true)]
	public partial class HumanResources_VEmployeeDepartment
	{
		[Column, NotNull    ] public int      BusinessEntityID { get; set; } // int
		[Column,    Nullable] public string   Title            { get; set; } // nvarchar(8)
		[Column, NotNull    ] public string   FirstName        { get; set; } // nvarchar(50)
		[Column,    Nullable] public string   MiddleName       { get; set; } // nvarchar(50)
		[Column, NotNull    ] public string   LastName         { get; set; } // nvarchar(50)
		[Column,    Nullable] public string   Suffix           { get; set; } // nvarchar(10)
		[Column, NotNull    ] public string   JobTitle         { get; set; } // nvarchar(50)
		[Column, NotNull    ] public string   Department       { get; set; } // nvarchar(50)
		[Column, NotNull    ] public string   GroupName        { get; set; } // nvarchar(50)
		[Column, NotNull    ] public DateTime StartDate        { get; set; } // date
	}

	/// <summary>
	/// Returns employee name and current and previous departments.
	/// </summary>
	[Table(Schema="HumanResources", Name="vEmployeeDepartmentHistory", IsView=true)]
	public partial class HumanResources_VEmployeeDepartmentHistory
	{
		[Column, NotNull    ] public int       BusinessEntityID { get; set; } // int
		[Column,    Nullable] public string    Title            { get; set; } // nvarchar(8)
		[Column, NotNull    ] public string    FirstName        { get; set; } // nvarchar(50)
		[Column,    Nullable] public string    MiddleName       { get; set; } // nvarchar(50)
		[Column, NotNull    ] public string    LastName         { get; set; } // nvarchar(50)
		[Column,    Nullable] public string    Suffix           { get; set; } // nvarchar(10)
		[Column, NotNull    ] public string    Shift            { get; set; } // nvarchar(50)
		[Column, NotNull    ] public string    Department       { get; set; } // nvarchar(50)
		[Column, NotNull    ] public string    GroupName        { get; set; } // nvarchar(50)
		[Column, NotNull    ] public DateTime  StartDate        { get; set; } // date
		[Column,    Nullable] public DateTime? EndDate          { get; set; } // date
	}

	/// <summary>
	/// Companies from whom Adventure Works Cycles purchases parts or other goods.
	/// </summary>
	[Table(Schema="Purchasing", Name="Vendor")]
	public partial class Purchasing_Vendor
	{
		/// <summary>
		/// Primary key for Vendor records.  Foreign key to BusinessEntity.BusinessEntityID
		/// </summary>
		[PrimaryKey, NotNull    ] public int      BusinessEntityID        { get; set; } // int
		/// <summary>
		/// Vendor account (identification) number.
		/// </summary>
		[Column,     NotNull    ] public string   AccountNumber           { get; set; } // nvarchar(15)
		/// <summary>
		/// Company name.
		/// </summary>
		[Column,     NotNull    ] public string   Name                    { get; set; } // nvarchar(50)
		/// <summary>
		/// 1 = Superior, 2 = Excellent, 3 = Above average, 4 = Average, 5 = Below average
		/// </summary>
		[Column,     NotNull    ] public byte     CreditRating            { get; set; } // tinyint
		/// <summary>
		/// 0 = Do not use if another vendor is available. 1 = Preferred over other vendors supplying the same product.
		/// </summary>
		[Column,     NotNull    ] public bool     PreferredVendorStatus   { get; set; } // bit
		/// <summary>
		/// 0 = Vendor no longer used. 1 = Vendor is actively used.
		/// </summary>
		[Column,     NotNull    ] public bool     ActiveFlag              { get; set; } // bit
		/// <summary>
		/// Vendor URL.
		/// </summary>
		[Column,        Nullable] public string   PurchasingWebServiceURL { get; set; } // nvarchar(1024)
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,     NotNull    ] public DateTime ModifiedDate            { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_Vendor_BusinessEntity_BusinessEntityID
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", CanBeNull=false, Relationship=Relationship.OneToOne, KeyName="FK_Vendor_BusinessEntity_BusinessEntityID", BackReferenceName="VendorBusinessEntityID")]
		public Person_BusinessEntity BusinessEntity { get; set; }

		/// <summary>
		/// FK_ProductVendor_Vendor_BusinessEntityID_BackReference
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Purchasing_ProductVendor> ProductVendorBusinessEntityIds { get; set; }

		/// <summary>
		/// FK_PurchaseOrderHeader_Vendor_VendorID_BackReference
		/// </summary>
		[Association(ThisKey="BusinessEntityID", OtherKey="VendorID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Purchasing_PurchaseOrderHeader> PurchaseOrderHeaderVendorIds { get; set; }

		#endregion
	}

	/// <summary>
	/// Individual customers (names and addresses) that purchase Adventure Works Cycles products online.
	/// </summary>
	[Table(Schema="Sales", Name="vIndividualCustomer", IsView=true)]
	public partial class Sales_VIndividualCustomer
	{
		[Column, NotNull    ] public int    BusinessEntityID  { get; set; } // int
		[Column,    Nullable] public string Title             { get; set; } // nvarchar(8)
		[Column, NotNull    ] public string FirstName         { get; set; } // nvarchar(50)
		[Column,    Nullable] public string MiddleName        { get; set; } // nvarchar(50)
		[Column, NotNull    ] public string LastName          { get; set; } // nvarchar(50)
		[Column,    Nullable] public string Suffix            { get; set; } // nvarchar(10)
		[Column,    Nullable] public string PhoneNumber       { get; set; } // nvarchar(25)
		[Column,    Nullable] public string PhoneNumberType   { get; set; } // nvarchar(50)
		[Column,    Nullable] public string EmailAddress      { get; set; } // nvarchar(50)
		[Column, NotNull    ] public int    EmailPromotion    { get; set; } // int
		[Column, NotNull    ] public string AddressType       { get; set; } // nvarchar(50)
		[Column, NotNull    ] public string AddressLine1      { get; set; } // nvarchar(60)
		[Column,    Nullable] public string AddressLine2      { get; set; } // nvarchar(60)
		[Column, NotNull    ] public string City              { get; set; } // nvarchar(30)
		[Column, NotNull    ] public string StateProvinceName { get; set; } // nvarchar(50)
		[Column, NotNull    ] public string PostalCode        { get; set; } // nvarchar(15)
		[Column, NotNull    ] public string CountryRegionName { get; set; } // nvarchar(50)
		[Column,    Nullable] public string Demographics      { get; set; } // xml
	}

	/// <summary>
	/// Job candidate names and resumes.
	/// </summary>
	[Table(Schema="HumanResources", Name="vJobCandidate", IsView=true)]
	public partial class HumanResources_VJobCandidate
	{
		[Column(),                         Identity   ] public int      JobCandidateID       { get; set; } // int
		[Column(),                            Nullable] public int?     BusinessEntityID     { get; set; } // int
		[Column("Name.Prefix"),               Nullable] public string   NamePrefix           { get; set; } // nvarchar(30)
		[Column("Name.First"),                Nullable] public string   NameFirst            { get; set; } // nvarchar(30)
		[Column("Name.Middle"),               Nullable] public string   NameMiddle           { get; set; } // nvarchar(30)
		[Column("Name.Last"),                 Nullable] public string   NameLast             { get; set; } // nvarchar(30)
		[Column("Name.Suffix"),               Nullable] public string   NameSuffix           { get; set; } // nvarchar(30)
		[Column(),                            Nullable] public string   Skills               { get; set; } // nvarchar(max)
		[Column("Addr.Type"),                 Nullable] public string   AddrType             { get; set; } // nvarchar(30)
		[Column("Addr.Loc.CountryRegion"),    Nullable] public string   AddrLocCountryRegion { get; set; } // nvarchar(100)
		[Column("Addr.Loc.State"),            Nullable] public string   AddrLocState         { get; set; } // nvarchar(100)
		[Column("Addr.Loc.City"),             Nullable] public string   AddrLocCity          { get; set; } // nvarchar(100)
		[Column("Addr.PostalCode"),           Nullable] public string   AddrPostalCode       { get; set; } // nvarchar(20)
		[Column(),                            Nullable] public string   EMail                { get; set; } // nvarchar(max)
		[Column(),                            Nullable] public string   WebSite              { get; set; } // nvarchar(max)
		[Column(),                         NotNull    ] public DateTime ModifiedDate         { get; set; } // datetime
	}

	/// <summary>
	/// Displays the content from each education related element in the xml column Resume in the HumanResources.JobCandidate table. The content has been localized into French, Simplified Chinese and Thai. Some data may not display correctly unless supplemental language support is installed.
	/// </summary>
	[Table(Schema="HumanResources", Name="vJobCandidateEducation", IsView=true)]
	public partial class HumanResources_VJobCandidateEducation
	{
		[Column(),                        Identity] public int       JobCandidateID      { get; set; } // int
		[Column("Edu.Level"),             Nullable] public string    EduLevel            { get; set; } // nvarchar(max)
		[Column("Edu.StartDate"),         Nullable] public DateTime? EduStartDate        { get; set; } // datetime
		[Column("Edu.EndDate"),           Nullable] public DateTime? EduEndDate          { get; set; } // datetime
		[Column("Edu.Degree"),            Nullable] public string    EduDegree           { get; set; } // nvarchar(50)
		[Column("Edu.Major"),             Nullable] public string    EduMajor            { get; set; } // nvarchar(50)
		[Column("Edu.Minor"),             Nullable] public string    EduMinor            { get; set; } // nvarchar(50)
		[Column("Edu.GPA"),               Nullable] public string    EduGpa              { get; set; } // nvarchar(5)
		[Column("Edu.GPAScale"),          Nullable] public string    EduGPAScale         { get; set; } // nvarchar(5)
		[Column("Edu.School"),            Nullable] public string    EduSchool           { get; set; } // nvarchar(100)
		[Column("Edu.Loc.CountryRegion"), Nullable] public string    EduLocCountryRegion { get; set; } // nvarchar(100)
		[Column("Edu.Loc.State"),         Nullable] public string    EduLocState         { get; set; } // nvarchar(100)
		[Column("Edu.Loc.City"),          Nullable] public string    EduLocCity          { get; set; } // nvarchar(100)
	}

	/// <summary>
	/// Displays the content from each employement history related element in the xml column Resume in the HumanResources.JobCandidate table. The content has been localized into French, Simplified Chinese and Thai. Some data may not display correctly unless supplemental language support is installed.
	/// </summary>
	[Table(Schema="HumanResources", Name="vJobCandidateEmployment", IsView=true)]
	public partial class HumanResources_VJobCandidateEmployment
	{
		[Column(),                        Identity] public int       JobCandidateID      { get; set; } // int
		[Column("Emp.StartDate"),         Nullable] public DateTime? EmpStartDate        { get; set; } // datetime
		[Column("Emp.EndDate"),           Nullable] public DateTime? EmpEndDate          { get; set; } // datetime
		[Column("Emp.OrgName"),           Nullable] public string    EmpOrgName          { get; set; } // nvarchar(100)
		[Column("Emp.JobTitle"),          Nullable] public string    EmpJobTitle         { get; set; } // nvarchar(100)
		[Column("Emp.Responsibility"),    Nullable] public string    EmpResponsibility   { get; set; } // nvarchar(max)
		[Column("Emp.FunctionCategory"),  Nullable] public string    EmpFunctionCategory { get; set; } // nvarchar(max)
		[Column("Emp.IndustryCategory"),  Nullable] public string    EmpIndustryCategory { get; set; } // nvarchar(max)
		[Column("Emp.Loc.CountryRegion"), Nullable] public string    EmpLocCountryRegion { get; set; } // nvarchar(max)
		[Column("Emp.Loc.State"),         Nullable] public string    EmpLocState         { get; set; } // nvarchar(max)
		[Column("Emp.Loc.City"),          Nullable] public string    EmpLocCity          { get; set; } // nvarchar(max)
	}

	/// <summary>
	/// Displays the content from each element in the xml column Demographics for each customer in the Person.Person table.
	/// </summary>
	[Table(Schema="Sales", Name="vPersonDemographics", IsView=true)]
	public partial class Sales_VPersonDemographic
	{
		[Column, NotNull    ] public int       BusinessEntityID     { get; set; } // int
		[Column,    Nullable] public decimal?  TotalPurchaseYTD     { get; set; } // money
		[Column,    Nullable] public DateTime? DateFirstPurchase    { get; set; } // datetime
		[Column,    Nullable] public DateTime? BirthDate            { get; set; } // datetime
		[Column,    Nullable] public char?     MaritalStatus        { get; set; } // nvarchar(1)
		[Column,    Nullable] public string    YearlyIncome         { get; set; } // nvarchar(30)
		[Column,    Nullable] public char?     Gender               { get; set; } // nvarchar(1)
		[Column,    Nullable] public int?      TotalChildren        { get; set; } // int
		[Column,    Nullable] public int?      NumberChildrenAtHome { get; set; } // int
		[Column,    Nullable] public string    Education            { get; set; } // nvarchar(30)
		[Column,    Nullable] public string    Occupation           { get; set; } // nvarchar(30)
		[Column,    Nullable] public bool?     HomeOwnerFlag        { get; set; } // bit
		[Column,    Nullable] public int?      NumberCarsOwned      { get; set; } // int
	}

	/// <summary>
	/// Product names and descriptions. Product descriptions are provided in multiple languages.
	/// </summary>
	[Table(Schema="Production", Name="vProductAndDescription", IsView=true)]
	public partial class Production_VProductAndDescription
	{
		[Column, NotNull] public int    ProductID    { get; set; } // int
		[Column, NotNull] public string Name         { get; set; } // nvarchar(50)
		[Column, NotNull] public string ProductModel { get; set; } // nvarchar(50)
		[Column, NotNull] public string CultureID    { get; set; } // nchar(6)
		[Column, NotNull] public string Description  { get; set; } // nvarchar(400)
	}

	/// <summary>
	/// Displays the content from each element in the xml column CatalogDescription for each product in the Production.ProductModel table that has catalog data.
	/// </summary>
	[Table(Schema="Production", Name="vProductModelCatalogDescription", IsView=true)]
	public partial class Production_VProductModelCatalogDescription
	{
		[Column(),          Identity   ] public int      ProductModelID         { get; set; } // int
		[Column(),          NotNull    ] public string   Name                   { get; set; } // nvarchar(50)
		[Column(),             Nullable] public string   Summary                { get; set; } // nvarchar(max)
		[Column(),             Nullable] public string   Manufacturer           { get; set; } // nvarchar(max)
		[Column(),             Nullable] public string   Copyright              { get; set; } // nvarchar(30)
		[Column(),             Nullable] public string   ProductURL             { get; set; } // nvarchar(256)
		[Column(),             Nullable] public string   WarrantyPeriod         { get; set; } // nvarchar(256)
		[Column(),             Nullable] public string   WarrantyDescription    { get; set; } // nvarchar(256)
		[Column(),             Nullable] public string   NoOfYears              { get; set; } // nvarchar(256)
		[Column(),             Nullable] public string   MaintenanceDescription { get; set; } // nvarchar(256)
		[Column(),             Nullable] public string   Wheel                  { get; set; } // nvarchar(256)
		[Column(),             Nullable] public string   Saddle                 { get; set; } // nvarchar(256)
		[Column(),             Nullable] public string   Pedal                  { get; set; } // nvarchar(256)
		[Column(),             Nullable] public string   BikeFrame              { get; set; } // nvarchar(max)
		[Column(),             Nullable] public string   Crankset               { get; set; } // nvarchar(256)
		[Column(),             Nullable] public string   PictureAngle           { get; set; } // nvarchar(256)
		[Column(),             Nullable] public string   PictureSize            { get; set; } // nvarchar(256)
		[Column(),             Nullable] public string   ProductPhotoID         { get; set; } // nvarchar(256)
		[Column(),             Nullable] public string   Material               { get; set; } // nvarchar(256)
		[Column(),             Nullable] public string   Color                  { get; set; } // nvarchar(256)
		[Column(),             Nullable] public string   ProductLine            { get; set; } // nvarchar(256)
		[Column(),             Nullable] public string   Style                  { get; set; } // nvarchar(256)
		[Column(),             Nullable] public string   RiderExperience        { get; set; } // nvarchar(1024)
		[Column("rowguid"), NotNull    ] public Guid     Rowguid                { get; set; } // uniqueidentifier
		[Column(),          NotNull    ] public DateTime ModifiedDate           { get; set; } // datetime
	}

	/// <summary>
	/// Displays the content from each element in the xml column Instructions for each product in the Production.ProductModel table that has manufacturing instructions.
	/// </summary>
	[Table(Schema="Production", Name="vProductModelInstructions", IsView=true)]
	public partial class Production_VProductModelInstruction
	{
		[Column(),          Identity   ] public int      ProductModelID { get; set; } // int
		[Column(),          NotNull    ] public string   Name           { get; set; } // nvarchar(50)
		[Column(),             Nullable] public string   Instructions   { get; set; } // nvarchar(max)
		[Column(),             Nullable] public int?     LocationID     { get; set; } // int
		[Column(),             Nullable] public decimal? SetupHours     { get; set; } // decimal(9, 4)
		[Column(),             Nullable] public decimal? MachineHours   { get; set; } // decimal(9, 4)
		[Column(),             Nullable] public decimal? LaborHours     { get; set; } // decimal(9, 4)
		[Column(),             Nullable] public int?     LotSize        { get; set; } // int
		[Column(),             Nullable] public string   Step           { get; set; } // nvarchar(1024)
		[Column("rowguid"), NotNull    ] public Guid     Rowguid        { get; set; } // uniqueidentifier
		[Column(),          NotNull    ] public DateTime ModifiedDate   { get; set; } // datetime
	}

	/// <summary>
	/// Sales representiatives (names and addresses) and their sales-related information.
	/// </summary>
	[Table(Schema="Sales", Name="vSalesPerson", IsView=true)]
	public partial class Sales_VSalesPerson
	{
		[Column, NotNull    ] public int      BusinessEntityID  { get; set; } // int
		[Column,    Nullable] public string   Title             { get; set; } // nvarchar(8)
		[Column, NotNull    ] public string   FirstName         { get; set; } // nvarchar(50)
		[Column,    Nullable] public string   MiddleName        { get; set; } // nvarchar(50)
		[Column, NotNull    ] public string   LastName          { get; set; } // nvarchar(50)
		[Column,    Nullable] public string   Suffix            { get; set; } // nvarchar(10)
		[Column, NotNull    ] public string   JobTitle          { get; set; } // nvarchar(50)
		[Column,    Nullable] public string   PhoneNumber       { get; set; } // nvarchar(25)
		[Column,    Nullable] public string   PhoneNumberType   { get; set; } // nvarchar(50)
		[Column,    Nullable] public string   EmailAddress      { get; set; } // nvarchar(50)
		[Column, NotNull    ] public int      EmailPromotion    { get; set; } // int
		[Column, NotNull    ] public string   AddressLine1      { get; set; } // nvarchar(60)
		[Column,    Nullable] public string   AddressLine2      { get; set; } // nvarchar(60)
		[Column, NotNull    ] public string   City              { get; set; } // nvarchar(30)
		[Column, NotNull    ] public string   StateProvinceName { get; set; } // nvarchar(50)
		[Column, NotNull    ] public string   PostalCode        { get; set; } // nvarchar(15)
		[Column, NotNull    ] public string   CountryRegionName { get; set; } // nvarchar(50)
		[Column,    Nullable] public string   TerritoryName     { get; set; } // nvarchar(50)
		[Column,    Nullable] public string   TerritoryGroup    { get; set; } // nvarchar(50)
		[Column,    Nullable] public decimal? SalesQuota        { get; set; } // money
		[Column, NotNull    ] public decimal  SalesYTD          { get; set; } // money
		[Column, NotNull    ] public decimal  SalesLastYear     { get; set; } // money
	}

	/// <summary>
	/// Uses PIVOT to return aggregated sales information for each sales representative.
	/// </summary>
	[Table(Schema="Sales", Name="vSalesPersonSalesByFiscalYears", IsView=true)]
	public partial class Sales_VSalesPersonSalesByFiscalYear
	{
		[Column(),          Nullable] public int?     SalesPersonID  { get; set; } // int
		[Column(),          Nullable] public string   FullName       { get; set; } // nvarchar(152)
		[Column(),       NotNull    ] public string   JobTitle       { get; set; } // nvarchar(50)
		[Column(),       NotNull    ] public string   SalesTerritory { get; set; } // nvarchar(50)
		[Column("2002"),    Nullable] public decimal? _2002          { get; set; } // money
		[Column("2003"),    Nullable] public decimal? _2003          { get; set; } // money
		[Column("2004"),    Nullable] public decimal? _2004          { get; set; } // money
	}

	/// <summary>
	/// Joins StateProvince table with CountryRegion table.
	/// </summary>
	[Table(Schema="Person", Name="vStateProvinceCountryRegion", IsView=true)]
	public partial class Person_VStateProvinceCountryRegion
	{
		[Column, NotNull] public int    StateProvinceID         { get; set; } // int
		[Column, NotNull] public string StateProvinceCode       { get; set; } // nchar(3)
		[Column, NotNull] public bool   IsOnlyStateProvinceFlag { get; set; } // bit
		[Column, NotNull] public string StateProvinceName       { get; set; } // nvarchar(50)
		[Column, NotNull] public int    TerritoryID             { get; set; } // int
		[Column, NotNull] public string CountryRegionCode       { get; set; } // nvarchar(3)
		[Column, NotNull] public string CountryRegionName       { get; set; } // nvarchar(50)
	}

	/// <summary>
	/// Stores (including store addresses) that sell Adventure Works Cycles products to consumers.
	/// </summary>
	[Table(Schema="Sales", Name="vStoreWithAddresses", IsView=true)]
	public partial class Sales_VStoreWithAddress
	{
		[Column, NotNull    ] public int    BusinessEntityID  { get; set; } // int
		[Column, NotNull    ] public string Name              { get; set; } // nvarchar(50)
		[Column, NotNull    ] public string AddressType       { get; set; } // nvarchar(50)
		[Column, NotNull    ] public string AddressLine1      { get; set; } // nvarchar(60)
		[Column,    Nullable] public string AddressLine2      { get; set; } // nvarchar(60)
		[Column, NotNull    ] public string City              { get; set; } // nvarchar(30)
		[Column, NotNull    ] public string StateProvinceName { get; set; } // nvarchar(50)
		[Column, NotNull    ] public string PostalCode        { get; set; } // nvarchar(15)
		[Column, NotNull    ] public string CountryRegionName { get; set; } // nvarchar(50)
	}

	/// <summary>
	/// Stores (including store contacts) that sell Adventure Works Cycles products to consumers.
	/// </summary>
	[Table(Schema="Sales", Name="vStoreWithContacts", IsView=true)]
	public partial class Sales_VStoreWithContact
	{
		[Column, NotNull    ] public int    BusinessEntityID { get; set; } // int
		[Column, NotNull    ] public string Name             { get; set; } // nvarchar(50)
		[Column, NotNull    ] public string ContactType      { get; set; } // nvarchar(50)
		[Column,    Nullable] public string Title            { get; set; } // nvarchar(8)
		[Column, NotNull    ] public string FirstName        { get; set; } // nvarchar(50)
		[Column,    Nullable] public string MiddleName       { get; set; } // nvarchar(50)
		[Column, NotNull    ] public string LastName         { get; set; } // nvarchar(50)
		[Column,    Nullable] public string Suffix           { get; set; } // nvarchar(10)
		[Column,    Nullable] public string PhoneNumber      { get; set; } // nvarchar(25)
		[Column,    Nullable] public string PhoneNumberType  { get; set; } // nvarchar(50)
		[Column,    Nullable] public string EmailAddress     { get; set; } // nvarchar(50)
		[Column, NotNull    ] public int    EmailPromotion   { get; set; } // int
	}

	/// <summary>
	/// Stores (including demographics) that sell Adventure Works Cycles products to consumers.
	/// </summary>
	[Table(Schema="Sales", Name="vStoreWithDemographics", IsView=true)]
	public partial class Sales_VStoreWithDemographic
	{
		[Column, NotNull    ] public int      BusinessEntityID { get; set; } // int
		[Column, NotNull    ] public string   Name             { get; set; } // nvarchar(50)
		[Column,    Nullable] public decimal? AnnualSales      { get; set; } // money
		[Column,    Nullable] public decimal? AnnualRevenue    { get; set; } // money
		[Column,    Nullable] public string   BankName         { get; set; } // nvarchar(50)
		[Column,    Nullable] public string   BusinessType     { get; set; } // nvarchar(5)
		[Column,    Nullable] public int?     YearOpened       { get; set; } // int
		[Column,    Nullable] public string   Specialty        { get; set; } // nvarchar(50)
		[Column,    Nullable] public int?     SquareFeet       { get; set; } // int
		[Column,    Nullable] public string   Brands           { get; set; } // nvarchar(30)
		[Column,    Nullable] public string   Internet         { get; set; } // nvarchar(30)
		[Column,    Nullable] public int?     NumberEmployees  { get; set; } // int
	}

	/// <summary>
	/// Vendor (company) names and addresses .
	/// </summary>
	[Table(Schema="Purchasing", Name="vVendorWithAddresses", IsView=true)]
	public partial class Purchasing_VVendorWithAddress
	{
		[Column, NotNull    ] public int    BusinessEntityID  { get; set; } // int
		[Column, NotNull    ] public string Name              { get; set; } // nvarchar(50)
		[Column, NotNull    ] public string AddressType       { get; set; } // nvarchar(50)
		[Column, NotNull    ] public string AddressLine1      { get; set; } // nvarchar(60)
		[Column,    Nullable] public string AddressLine2      { get; set; } // nvarchar(60)
		[Column, NotNull    ] public string City              { get; set; } // nvarchar(30)
		[Column, NotNull    ] public string StateProvinceName { get; set; } // nvarchar(50)
		[Column, NotNull    ] public string PostalCode        { get; set; } // nvarchar(15)
		[Column, NotNull    ] public string CountryRegionName { get; set; } // nvarchar(50)
	}

	/// <summary>
	/// Vendor (company) names  and the names of vendor employees to contact.
	/// </summary>
	[Table(Schema="Purchasing", Name="vVendorWithContacts", IsView=true)]
	public partial class Purchasing_VVendorWithContact
	{
		[Column, NotNull    ] public int    BusinessEntityID { get; set; } // int
		[Column, NotNull    ] public string Name             { get; set; } // nvarchar(50)
		[Column, NotNull    ] public string ContactType      { get; set; } // nvarchar(50)
		[Column,    Nullable] public string Title            { get; set; } // nvarchar(8)
		[Column, NotNull    ] public string FirstName        { get; set; } // nvarchar(50)
		[Column,    Nullable] public string MiddleName       { get; set; } // nvarchar(50)
		[Column, NotNull    ] public string LastName         { get; set; } // nvarchar(50)
		[Column,    Nullable] public string Suffix           { get; set; } // nvarchar(10)
		[Column,    Nullable] public string PhoneNumber      { get; set; } // nvarchar(25)
		[Column,    Nullable] public string PhoneNumberType  { get; set; } // nvarchar(50)
		[Column,    Nullable] public string EmailAddress     { get; set; } // nvarchar(50)
		[Column, NotNull    ] public int    EmailPromotion   { get; set; } // int
	}

	/// <summary>
	/// Manufacturing work orders.
	/// </summary>
	[Table(Schema="Production", Name="WorkOrder")]
	public partial class Production_WorkOrder
	{
		/// <summary>
		/// Primary key for WorkOrder records.
		/// </summary>
		[PrimaryKey,                                   Identity   ] public int       WorkOrderID   { get; set; } // int
		/// <summary>
		/// Product identification number. Foreign key to Product.ProductID.
		/// </summary>
		[Column,                                       NotNull    ] public int       ProductID     { get; set; } // int
		/// <summary>
		/// Product quantity to build.
		/// </summary>
		[Column,                                       NotNull    ] public int       OrderQty      { get; set; } // int
		/// <summary>
		/// Quantity built and put in inventory.
		/// </summary>
		[Column(SkipOnInsert=true, SkipOnUpdate=true), NotNull    ] public int       StockedQty    { get; set; } // int
		/// <summary>
		/// Quantity that failed inspection.
		/// </summary>
		[Column,                                       NotNull    ] public short     ScrappedQty   { get; set; } // smallint
		/// <summary>
		/// Work order start date.
		/// </summary>
		[Column,                                       NotNull    ] public DateTime  StartDate     { get; set; } // datetime
		/// <summary>
		/// Work order end date.
		/// </summary>
		[Column,                                          Nullable] public DateTime? EndDate       { get; set; } // datetime
		/// <summary>
		/// Work order due date.
		/// </summary>
		[Column,                                       NotNull    ] public DateTime  DueDate       { get; set; } // datetime
		/// <summary>
		/// Reason for inspection failure.
		/// </summary>
		[Column,                                          Nullable] public short?    ScrapReasonID { get; set; } // smallint
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,                                       NotNull    ] public DateTime  ModifiedDate  { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_WorkOrder_Product_ProductID
		/// </summary>
		[Association(ThisKey="ProductID", OtherKey="ProductID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_WorkOrder_Product_ProductID", BackReferenceName="WorkOrderProductIds")]
		public Production_Product Product { get; set; }

		/// <summary>
		/// FK_WorkOrder_ScrapReason_ScrapReasonID
		/// </summary>
		[Association(ThisKey="ScrapReasonID", OtherKey="ScrapReasonID", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_WorkOrder_ScrapReason_ScrapReasonID", BackReferenceName="WorkOrderScrapReasonIds")]
		public Production_ScrapReason ScrapReason { get; set; }

		/// <summary>
		/// FK_WorkOrderRouting_WorkOrder_WorkOrderID_BackReference
		/// </summary>
		[Association(ThisKey="WorkOrderID", OtherKey="WorkOrderID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Production_WorkOrderRouting> WorkOrderRoutingWorkOrderIds { get; set; }

		#endregion
	}

	/// <summary>
	/// Work order details.
	/// </summary>
	[Table(Schema="Production", Name="WorkOrderRouting")]
	public partial class Production_WorkOrderRouting
	{
		/// <summary>
		/// Primary key. Foreign key to WorkOrder.WorkOrderID.
		/// </summary>
		[PrimaryKey(1), NotNull    ] public int       WorkOrderID        { get; set; } // int
		/// <summary>
		/// Primary key. Foreign key to Product.ProductID.
		/// </summary>
		[PrimaryKey(2), NotNull    ] public int       ProductID          { get; set; } // int
		/// <summary>
		/// Primary key. Indicates the manufacturing process sequence.
		/// </summary>
		[PrimaryKey(3), NotNull    ] public short     OperationSequence  { get; set; } // smallint
		/// <summary>
		/// Manufacturing location where the part is processed. Foreign key to Location.LocationID.
		/// </summary>
		[Column,        NotNull    ] public short     LocationID         { get; set; } // smallint
		/// <summary>
		/// Planned manufacturing start date.
		/// </summary>
		[Column,        NotNull    ] public DateTime  ScheduledStartDate { get; set; } // datetime
		/// <summary>
		/// Planned manufacturing end date.
		/// </summary>
		[Column,        NotNull    ] public DateTime  ScheduledEndDate   { get; set; } // datetime
		/// <summary>
		/// Actual start date.
		/// </summary>
		[Column,           Nullable] public DateTime? ActualStartDate    { get; set; } // datetime
		/// <summary>
		/// Actual end date.
		/// </summary>
		[Column,           Nullable] public DateTime? ActualEndDate      { get; set; } // datetime
		/// <summary>
		/// Number of manufacturing hours used.
		/// </summary>
		[Column,           Nullable] public decimal?  ActualResourceHrs  { get; set; } // decimal(9, 4)
		/// <summary>
		/// Estimated manufacturing cost.
		/// </summary>
		[Column,        NotNull    ] public decimal   PlannedCost        { get; set; } // money
		/// <summary>
		/// Actual manufacturing cost.
		/// </summary>
		[Column,           Nullable] public decimal?  ActualCost         { get; set; } // money
		/// <summary>
		/// Date and time the record was last updated.
		/// </summary>
		[Column,        NotNull    ] public DateTime  ModifiedDate       { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_WorkOrderRouting_Location_LocationID
		/// </summary>
		[Association(ThisKey="LocationID", OtherKey="LocationID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_WorkOrderRouting_Location_LocationID", BackReferenceName="WorkOrderRoutingLocationIds")]
		public Production_Location Location { get; set; }

		/// <summary>
		/// FK_WorkOrderRouting_WorkOrder_WorkOrderID
		/// </summary>
		[Association(ThisKey="WorkOrderID", OtherKey="WorkOrderID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_WorkOrderRouting_WorkOrder_WorkOrderID", BackReferenceName="WorkOrderRoutingWorkOrderIds")]
		public Production_WorkOrder WorkOrder { get; set; }

		#endregion
	}

	public static partial class AdventureWorks2016DBStoredProcedures
	{
		#region UspGetBillOfMaterials

		public static IEnumerable<UspGetBillOfMaterialsResult> UspGetBillOfMaterials(this DataConnection dataConnection, int? @StartProductID, DateTime? @CheckDate)
		{
			return dataConnection.QueryProc<UspGetBillOfMaterialsResult>("[dbo].[uspGetBillOfMaterials]",
				new DataParameter("@StartProductID", @StartProductID, DataType.Int32),
				new DataParameter("@CheckDate",      @CheckDate,      DataType.DateTime));
		}

		public partial class UspGetBillOfMaterialsResult
		{
			public int?     ProductAssemblyID { get; set; }
			public int?     ComponentID       { get; set; }
			public string   ComponentDesc     { get; set; }
			public decimal? TotalQuantity     { get; set; }
			public decimal? StandardCost      { get; set; }
			public decimal? ListPrice         { get; set; }
			public short?   BOMLevel          { get; set; }
			public int?     RecursionLevel    { get; set; }
		}

		#endregion

		#region UspGetEmployeeManagers

		public static IEnumerable<UspGetEmployeeManagersResult> UspGetEmployeeManagers(this DataConnection dataConnection, int? @BusinessEntityID)
		{
			return dataConnection.QueryProc<UspGetEmployeeManagersResult>("[dbo].[uspGetEmployeeManagers]",
				new DataParameter("@BusinessEntityID", @BusinessEntityID, DataType.Int32));
		}

		public partial class UspGetEmployeeManagersResult
		{
			public int?   RecursionLevel   { get; set; }
			public int?   BusinessEntityID { get; set; }
			public string FirstName        { get; set; }
			public string LastName         { get; set; }
			public string OrganizationNode { get; set; }
			public string ManagerFirstName { get; set; }
			public string ManagerLastName  { get; set; }
		}

		#endregion

		#region UspGetManagerEmployees

		public static IEnumerable<UspGetManagerEmployeesResult> UspGetManagerEmployees(this DataConnection dataConnection, int? @BusinessEntityID)
		{
			return dataConnection.QueryProc<UspGetManagerEmployeesResult>("[dbo].[uspGetManagerEmployees]",
				new DataParameter("@BusinessEntityID", @BusinessEntityID, DataType.Int32));
		}

		public partial class UspGetManagerEmployeesResult
		{
			public int?   RecursionLevel   { get; set; }
			public string OrganizationNode { get; set; }
			public string ManagerFirstName { get; set; }
			public string ManagerLastName  { get; set; }
			public int?   BusinessEntityID { get; set; }
			public string FirstName        { get; set; }
			public string LastName         { get; set; }
		}

		#endregion

		#region UspGetWhereUsedProductID

		public static IEnumerable<UspGetWhereUsedProductIDResult> UspGetWhereUsedProductID(this DataConnection dataConnection, int? @StartProductID, DateTime? @CheckDate)
		{
			return dataConnection.QueryProc<UspGetWhereUsedProductIDResult>("[dbo].[uspGetWhereUsedProductID]",
				new DataParameter("@StartProductID", @StartProductID, DataType.Int32),
				new DataParameter("@CheckDate",      @CheckDate,      DataType.DateTime));
		}

		public partial class UspGetWhereUsedProductIDResult
		{
			public int?     ProductAssemblyID { get; set; }
			public int?     ComponentID       { get; set; }
			public string   ComponentDesc     { get; set; }
			public decimal? TotalQuantity     { get; set; }
			public decimal? StandardCost      { get; set; }
			public decimal? ListPrice         { get; set; }
			public short?   BOMLevel          { get; set; }
			public int?     RecursionLevel    { get; set; }
		}

		#endregion

		#region UspLogError

		public static int UspLogError(this DataConnection dataConnection, ref int? @ErrorLogID)
		{
			var ret = dataConnection.ExecuteProc("[dbo].[uspLogError]",
				new DataParameter("@ErrorLogID", @ErrorLogID, DataType.Int32) { Direction = ParameterDirection.InputOutput });

			@ErrorLogID = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["@ErrorLogID"]).Value);

			return ret;
		}

		#endregion

		#region UspPrintError

		public static int UspPrintError(this DataConnection dataConnection)
		{
			return dataConnection.ExecuteProc("[dbo].[uspPrintError]");
		}

		#endregion

		#region UspUpdateEmployeeHireInfo

		public static int UspUpdateEmployeeHireInfo(this DataConnection dataConnection, int? @BusinessEntityID, string @JobTitle, DateTime? @HireDate, DateTime? @RateChangeDate, decimal? @Rate, byte? @PayFrequency, bool? @CurrentFlag)
		{
			return dataConnection.ExecuteProc("[HumanResources].[uspUpdateEmployeeHireInfo]",
				new DataParameter("@BusinessEntityID", @BusinessEntityID, DataType.Int32),
				new DataParameter("@JobTitle",         @JobTitle,         DataType.NVarChar),
				new DataParameter("@HireDate",         @HireDate,         DataType.DateTime),
				new DataParameter("@RateChangeDate",   @RateChangeDate,   DataType.DateTime),
				new DataParameter("@Rate",             @Rate,             DataType.Money),
				new DataParameter("@PayFrequency",     @PayFrequency,     DataType.Byte),
				new DataParameter("@CurrentFlag",      @CurrentFlag,      DataType.Boolean));
		}

		#endregion

		#region UspUpdateEmployeeLogin

		public static int UspUpdateEmployeeLogin(this DataConnection dataConnection, int? @BusinessEntityID, SqlHierarchyId? @OrganizationNode, string @LoginID, string @JobTitle, DateTime? @HireDate, bool? @CurrentFlag)
		{
			return dataConnection.ExecuteProc("[HumanResources].[uspUpdateEmployeeLogin]",
				new DataParameter("@BusinessEntityID", @BusinessEntityID, DataType.Int32),
				new DataParameter("@OrganizationNode", @OrganizationNode, DataType.Udt),
				new DataParameter("@LoginID",          @LoginID,          DataType.NVarChar),
				new DataParameter("@JobTitle",         @JobTitle,         DataType.NVarChar),
				new DataParameter("@HireDate",         @HireDate,         DataType.DateTime),
				new DataParameter("@CurrentFlag",      @CurrentFlag,      DataType.Boolean));
		}

		#endregion

		#region UspUpdateEmployeePersonalInfo

		public static int UspUpdateEmployeePersonalInfo(this DataConnection dataConnection, int? @BusinessEntityID, string @NationalIDNumber, DateTime? @BirthDate, char? @MaritalStatus, char? @Gender)
		{
			return dataConnection.ExecuteProc("[HumanResources].[uspUpdateEmployeePersonalInfo]",
				new DataParameter("@BusinessEntityID", @BusinessEntityID, DataType.Int32),
				new DataParameter("@NationalIDNumber", @NationalIDNumber, DataType.NVarChar),
				new DataParameter("@BirthDate",        @BirthDate,        DataType.DateTime),
				new DataParameter("@MaritalStatus",    @MaritalStatus,    DataType.NChar),
				new DataParameter("@Gender",           @Gender,           DataType.NChar));
		}

		#endregion
	}

	public static partial class SqlFunctions
	{
		#region UfnGetAccountingEndDate

		[Sql.Function(Name="dbo.ufnGetAccountingEndDate", ServerSideOnly=true)]
		public static DateTime? UfnGetAccountingEndDate()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UfnGetAccountingStartDate

		[Sql.Function(Name="dbo.ufnGetAccountingStartDate", ServerSideOnly=true)]
		public static DateTime? UfnGetAccountingStartDate()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UfnGetDocumentStatusText

		[Sql.Function(Name="dbo.ufnGetDocumentStatusText", ServerSideOnly=true)]
		public static string UfnGetDocumentStatusText(byte? @Status)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UfnGetProductDealerPrice

		[Sql.Function(Name="dbo.ufnGetProductDealerPrice", ServerSideOnly=true)]
		public static decimal? UfnGetProductDealerPrice(int? @ProductID, DateTime? @OrderDate)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UfnGetProductListPrice

		[Sql.Function(Name="dbo.ufnGetProductListPrice", ServerSideOnly=true)]
		public static decimal? UfnGetProductListPrice(int? @ProductID, DateTime? @OrderDate)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UfnGetProductStandardCost

		[Sql.Function(Name="dbo.ufnGetProductStandardCost", ServerSideOnly=true)]
		public static decimal? UfnGetProductStandardCost(int? @ProductID, DateTime? @OrderDate)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UfnGetPurchaseOrderStatusText

		[Sql.Function(Name="dbo.ufnGetPurchaseOrderStatusText", ServerSideOnly=true)]
		public static string UfnGetPurchaseOrderStatusText(byte? @Status)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UfnGetSalesOrderStatusText

		[Sql.Function(Name="dbo.ufnGetSalesOrderStatusText", ServerSideOnly=true)]
		public static string UfnGetSalesOrderStatusText(byte? @Status)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UfnGetStock

		[Sql.Function(Name="dbo.ufnGetStock", ServerSideOnly=true)]
		public static int? UfnGetStock(int? @ProductID)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UfnLeadingZeros

		[Sql.Function(Name="dbo.ufnLeadingZeros", ServerSideOnly=true)]
		public static string UfnLeadingZeros(int? @Value)
		{
			throw new InvalidOperationException();
		}

		#endregion
	}

	public static partial class TableExtensions
	{
		public static Person_Address Find(this ITable<Person_Address> table, int AddressID)
		{
			return table.FirstOrDefault(t =>
				t.AddressID == AddressID);
		}

		public static Person_AddressType Find(this ITable<Person_AddressType> table, int AddressTypeID)
		{
			return table.FirstOrDefault(t =>
				t.AddressTypeID == AddressTypeID);
		}

		public static AWBuildVersion Find(this ITable<AWBuildVersion> table, byte SystemInformationID)
		{
			return table.FirstOrDefault(t =>
				t.SystemInformationID == SystemInformationID);
		}

		public static Production_BillOfMaterial Find(this ITable<Production_BillOfMaterial> table, int BillOfMaterialsID)
		{
			return table.FirstOrDefault(t =>
				t.BillOfMaterialsID == BillOfMaterialsID);
		}

		public static Person_BusinessEntity Find(this ITable<Person_BusinessEntity> table, int BusinessEntityID)
		{
			return table.FirstOrDefault(t =>
				t.BusinessEntityID == BusinessEntityID);
		}

		public static Person_BusinessEntityAddress Find(this ITable<Person_BusinessEntityAddress> table, int BusinessEntityID, int AddressID, int AddressTypeID)
		{
			return table.FirstOrDefault(t =>
				t.BusinessEntityID == BusinessEntityID &&
				t.AddressID        == AddressID        &&
				t.AddressTypeID    == AddressTypeID);
		}

		public static Person_BusinessEntityContact Find(this ITable<Person_BusinessEntityContact> table, int BusinessEntityID, int PersonID, int ContactTypeID)
		{
			return table.FirstOrDefault(t =>
				t.BusinessEntityID == BusinessEntityID &&
				t.PersonID         == PersonID         &&
				t.ContactTypeID    == ContactTypeID);
		}

		public static Person_ContactType Find(this ITable<Person_ContactType> table, int ContactTypeID)
		{
			return table.FirstOrDefault(t =>
				t.ContactTypeID == ContactTypeID);
		}

		public static Person_CountryRegion Find(this ITable<Person_CountryRegion> table, string CountryRegionCode)
		{
			return table.FirstOrDefault(t =>
				t.CountryRegionCode == CountryRegionCode);
		}

		public static Sales_CountryRegionCurrency Find(this ITable<Sales_CountryRegionCurrency> table, string CountryRegionCode, string CurrencyCode)
		{
			return table.FirstOrDefault(t =>
				t.CountryRegionCode == CountryRegionCode &&
				t.CurrencyCode      == CurrencyCode);
		}

		public static Sales_CreditCard Find(this ITable<Sales_CreditCard> table, int CreditCardID)
		{
			return table.FirstOrDefault(t =>
				t.CreditCardID == CreditCardID);
		}

		public static Production_Culture Find(this ITable<Production_Culture> table, string CultureID)
		{
			return table.FirstOrDefault(t =>
				t.CultureID == CultureID);
		}

		public static Sales_Currency Find(this ITable<Sales_Currency> table, string CurrencyCode)
		{
			return table.FirstOrDefault(t =>
				t.CurrencyCode == CurrencyCode);
		}

		public static Sales_CurrencyRate Find(this ITable<Sales_CurrencyRate> table, int CurrencyRateID)
		{
			return table.FirstOrDefault(t =>
				t.CurrencyRateID == CurrencyRateID);
		}

		public static Sales_Customer Find(this ITable<Sales_Customer> table, int CustomerID)
		{
			return table.FirstOrDefault(t =>
				t.CustomerID == CustomerID);
		}

		public static DatabaseLog Find(this ITable<DatabaseLog> table, int DatabaseLogID)
		{
			return table.FirstOrDefault(t =>
				t.DatabaseLogID == DatabaseLogID);
		}

		public static HumanResources_Department Find(this ITable<HumanResources_Department> table, short DepartmentID)
		{
			return table.FirstOrDefault(t =>
				t.DepartmentID == DepartmentID);
		}

		public static Production_Document Find(this ITable<Production_Document> table, SqlHierarchyId DocumentNode)
		{
			return table.FirstOrDefault(t =>
				(bool)(t.DocumentNode == DocumentNode));
		}

		public static Person_EmailAddress Find(this ITable<Person_EmailAddress> table, int BusinessEntityID, int EmailAddressID)
		{
			return table.FirstOrDefault(t =>
				t.BusinessEntityID == BusinessEntityID &&
				t.EmailAddressID   == EmailAddressID);
		}

		public static HumanResources_Employee Find(this ITable<HumanResources_Employee> table, int BusinessEntityID)
		{
			return table.FirstOrDefault(t =>
				t.BusinessEntityID == BusinessEntityID);
		}

		public static HumanResources_EmployeeDepartmentHistory Find(this ITable<HumanResources_EmployeeDepartmentHistory> table, int BusinessEntityID, short DepartmentID, byte ShiftID, DateTime StartDate)
		{
			return table.FirstOrDefault(t =>
				t.BusinessEntityID == BusinessEntityID &&
				t.DepartmentID     == DepartmentID     &&
				t.ShiftID          == ShiftID          &&
				t.StartDate        == StartDate);
		}

		public static HumanResources_EmployeePayHistory Find(this ITable<HumanResources_EmployeePayHistory> table, int BusinessEntityID, DateTime RateChangeDate)
		{
			return table.FirstOrDefault(t =>
				t.BusinessEntityID == BusinessEntityID &&
				t.RateChangeDate   == RateChangeDate);
		}

		public static ErrorLog Find(this ITable<ErrorLog> table, int ErrorLogID)
		{
			return table.FirstOrDefault(t =>
				t.ErrorLogID == ErrorLogID);
		}

		public static Production_Illustration Find(this ITable<Production_Illustration> table, int IllustrationID)
		{
			return table.FirstOrDefault(t =>
				t.IllustrationID == IllustrationID);
		}

		public static HumanResources_JobCandidate Find(this ITable<HumanResources_JobCandidate> table, int JobCandidateID)
		{
			return table.FirstOrDefault(t =>
				t.JobCandidateID == JobCandidateID);
		}

		public static Production_Location Find(this ITable<Production_Location> table, short LocationID)
		{
			return table.FirstOrDefault(t =>
				t.LocationID == LocationID);
		}

		public static Person_Password Find(this ITable<Person_Password> table, int BusinessEntityID)
		{
			return table.FirstOrDefault(t =>
				t.BusinessEntityID == BusinessEntityID);
		}

		public static Person_Person Find(this ITable<Person_Person> table, int BusinessEntityID)
		{
			return table.FirstOrDefault(t =>
				t.BusinessEntityID == BusinessEntityID);
		}

		public static Sales_PersonCreditCard Find(this ITable<Sales_PersonCreditCard> table, int BusinessEntityID, int CreditCardID)
		{
			return table.FirstOrDefault(t =>
				t.BusinessEntityID == BusinessEntityID &&
				t.CreditCardID     == CreditCardID);
		}

		public static Person_PersonPhone Find(this ITable<Person_PersonPhone> table, int BusinessEntityID, string PhoneNumber, int PhoneNumberTypeID)
		{
			return table.FirstOrDefault(t =>
				t.BusinessEntityID  == BusinessEntityID &&
				t.PhoneNumber       == PhoneNumber      &&
				t.PhoneNumberTypeID == PhoneNumberTypeID);
		}

		public static Person_PhoneNumberType Find(this ITable<Person_PhoneNumberType> table, int PhoneNumberTypeID)
		{
			return table.FirstOrDefault(t =>
				t.PhoneNumberTypeID == PhoneNumberTypeID);
		}

		public static Production_Product Find(this ITable<Production_Product> table, int ProductID)
		{
			return table.FirstOrDefault(t =>
				t.ProductID == ProductID);
		}

		public static Production_ProductCategory Find(this ITable<Production_ProductCategory> table, int ProductCategoryID)
		{
			return table.FirstOrDefault(t =>
				t.ProductCategoryID == ProductCategoryID);
		}

		public static Production_ProductCostHistory Find(this ITable<Production_ProductCostHistory> table, int ProductID, DateTime StartDate)
		{
			return table.FirstOrDefault(t =>
				t.ProductID == ProductID &&
				t.StartDate == StartDate);
		}

		public static Production_ProductDescription Find(this ITable<Production_ProductDescription> table, int ProductDescriptionID)
		{
			return table.FirstOrDefault(t =>
				t.ProductDescriptionID == ProductDescriptionID);
		}

		public static Production_ProductDocument Find(this ITable<Production_ProductDocument> table, int ProductID, SqlHierarchyId DocumentNode)
		{
			return table.FirstOrDefault(t =>
				t.ProductID    == ProductID &&
				(bool)(t.DocumentNode == DocumentNode));
		}

		public static Production_ProductInventory Find(this ITable<Production_ProductInventory> table, int ProductID, short LocationID)
		{
			return table.FirstOrDefault(t =>
				t.ProductID  == ProductID &&
				t.LocationID == LocationID);
		}

		public static Production_ProductListPriceHistory Find(this ITable<Production_ProductListPriceHistory> table, int ProductID, DateTime StartDate)
		{
			return table.FirstOrDefault(t =>
				t.ProductID == ProductID &&
				t.StartDate == StartDate);
		}

		public static Production_ProductModel Find(this ITable<Production_ProductModel> table, int ProductModelID)
		{
			return table.FirstOrDefault(t =>
				t.ProductModelID == ProductModelID);
		}

		public static Production_ProductModelIllustration Find(this ITable<Production_ProductModelIllustration> table, int ProductModelID, int IllustrationID)
		{
			return table.FirstOrDefault(t =>
				t.ProductModelID == ProductModelID &&
				t.IllustrationID == IllustrationID);
		}

		public static Production_ProductModelProductDescriptionCulture Find(this ITable<Production_ProductModelProductDescriptionCulture> table, int ProductModelID, int ProductDescriptionID, string CultureID)
		{
			return table.FirstOrDefault(t =>
				t.ProductModelID       == ProductModelID       &&
				t.ProductDescriptionID == ProductDescriptionID &&
				t.CultureID            == CultureID);
		}

		public static Production_ProductPhoto Find(this ITable<Production_ProductPhoto> table, int ProductPhotoID)
		{
			return table.FirstOrDefault(t =>
				t.ProductPhotoID == ProductPhotoID);
		}

		public static Production_ProductProductPhoto Find(this ITable<Production_ProductProductPhoto> table, int ProductID, int ProductPhotoID)
		{
			return table.FirstOrDefault(t =>
				t.ProductID      == ProductID &&
				t.ProductPhotoID == ProductPhotoID);
		}

		public static Production_ProductReview Find(this ITable<Production_ProductReview> table, int ProductReviewID)
		{
			return table.FirstOrDefault(t =>
				t.ProductReviewID == ProductReviewID);
		}

		public static Production_ProductSubcategory Find(this ITable<Production_ProductSubcategory> table, int ProductSubcategoryID)
		{
			return table.FirstOrDefault(t =>
				t.ProductSubcategoryID == ProductSubcategoryID);
		}

		public static Purchasing_ProductVendor Find(this ITable<Purchasing_ProductVendor> table, int ProductID, int BusinessEntityID)
		{
			return table.FirstOrDefault(t =>
				t.ProductID        == ProductID &&
				t.BusinessEntityID == BusinessEntityID);
		}

		public static Purchasing_PurchaseOrderDetail Find(this ITable<Purchasing_PurchaseOrderDetail> table, int PurchaseOrderID, int PurchaseOrderDetailID)
		{
			return table.FirstOrDefault(t =>
				t.PurchaseOrderID       == PurchaseOrderID &&
				t.PurchaseOrderDetailID == PurchaseOrderDetailID);
		}

		public static Purchasing_PurchaseOrderHeader Find(this ITable<Purchasing_PurchaseOrderHeader> table, int PurchaseOrderID)
		{
			return table.FirstOrDefault(t =>
				t.PurchaseOrderID == PurchaseOrderID);
		}

		public static Sales_SalesOrderDetail Find(this ITable<Sales_SalesOrderDetail> table, int SalesOrderID, int SalesOrderDetailID)
		{
			return table.FirstOrDefault(t =>
				t.SalesOrderID       == SalesOrderID &&
				t.SalesOrderDetailID == SalesOrderDetailID);
		}

		public static Sales_SalesOrderHeader Find(this ITable<Sales_SalesOrderHeader> table, int SalesOrderID)
		{
			return table.FirstOrDefault(t =>
				t.SalesOrderID == SalesOrderID);
		}

		public static Sales_SalesOrderHeaderSalesReason Find(this ITable<Sales_SalesOrderHeaderSalesReason> table, int SalesOrderID, int SalesReasonID)
		{
			return table.FirstOrDefault(t =>
				t.SalesOrderID  == SalesOrderID &&
				t.SalesReasonID == SalesReasonID);
		}

		public static Sales_SalesPerson Find(this ITable<Sales_SalesPerson> table, int BusinessEntityID)
		{
			return table.FirstOrDefault(t =>
				t.BusinessEntityID == BusinessEntityID);
		}

		public static Sales_SalesPersonQuotaHistory Find(this ITable<Sales_SalesPersonQuotaHistory> table, int BusinessEntityID, DateTime QuotaDate)
		{
			return table.FirstOrDefault(t =>
				t.BusinessEntityID == BusinessEntityID &&
				t.QuotaDate        == QuotaDate);
		}

		public static Sales_SalesReason Find(this ITable<Sales_SalesReason> table, int SalesReasonID)
		{
			return table.FirstOrDefault(t =>
				t.SalesReasonID == SalesReasonID);
		}

		public static Sales_SalesTaxRate Find(this ITable<Sales_SalesTaxRate> table, int SalesTaxRateID)
		{
			return table.FirstOrDefault(t =>
				t.SalesTaxRateID == SalesTaxRateID);
		}

		public static Sales_SalesTerritory Find(this ITable<Sales_SalesTerritory> table, int TerritoryID)
		{
			return table.FirstOrDefault(t =>
				t.TerritoryID == TerritoryID);
		}

		public static Sales_SalesTerritoryHistory Find(this ITable<Sales_SalesTerritoryHistory> table, int BusinessEntityID, int TerritoryID, DateTime StartDate)
		{
			return table.FirstOrDefault(t =>
				t.BusinessEntityID == BusinessEntityID &&
				t.TerritoryID      == TerritoryID      &&
				t.StartDate        == StartDate);
		}

		public static Production_ScrapReason Find(this ITable<Production_ScrapReason> table, short ScrapReasonID)
		{
			return table.FirstOrDefault(t =>
				t.ScrapReasonID == ScrapReasonID);
		}

		public static HumanResources_Shift Find(this ITable<HumanResources_Shift> table, byte ShiftID)
		{
			return table.FirstOrDefault(t =>
				t.ShiftID == ShiftID);
		}

		public static Purchasing_ShipMethod Find(this ITable<Purchasing_ShipMethod> table, int ShipMethodID)
		{
			return table.FirstOrDefault(t =>
				t.ShipMethodID == ShipMethodID);
		}

		public static Sales_ShoppingCartItem Find(this ITable<Sales_ShoppingCartItem> table, int ShoppingCartItemID)
		{
			return table.FirstOrDefault(t =>
				t.ShoppingCartItemID == ShoppingCartItemID);
		}

		public static Sales_SpecialOffer Find(this ITable<Sales_SpecialOffer> table, int SpecialOfferID)
		{
			return table.FirstOrDefault(t =>
				t.SpecialOfferID == SpecialOfferID);
		}

		public static Sales_SpecialOfferProduct Find(this ITable<Sales_SpecialOfferProduct> table, int SpecialOfferID, int ProductID)
		{
			return table.FirstOrDefault(t =>
				t.SpecialOfferID == SpecialOfferID &&
				t.ProductID      == ProductID);
		}

		public static Person_StateProvince Find(this ITable<Person_StateProvince> table, int StateProvinceID)
		{
			return table.FirstOrDefault(t =>
				t.StateProvinceID == StateProvinceID);
		}

		public static Sales_Store Find(this ITable<Sales_Store> table, int BusinessEntityID)
		{
			return table.FirstOrDefault(t =>
				t.BusinessEntityID == BusinessEntityID);
		}

		public static Production_TransactionHistory Find(this ITable<Production_TransactionHistory> table, int TransactionID)
		{
			return table.FirstOrDefault(t =>
				t.TransactionID == TransactionID);
		}

		public static Production_TransactionHistoryArchive Find(this ITable<Production_TransactionHistoryArchive> table, int TransactionID)
		{
			return table.FirstOrDefault(t =>
				t.TransactionID == TransactionID);
		}

		public static Production_UnitMeasure Find(this ITable<Production_UnitMeasure> table, string UnitMeasureCode)
		{
			return table.FirstOrDefault(t =>
				t.UnitMeasureCode == UnitMeasureCode);
		}

		public static Purchasing_Vendor Find(this ITable<Purchasing_Vendor> table, int BusinessEntityID)
		{
			return table.FirstOrDefault(t =>
				t.BusinessEntityID == BusinessEntityID);
		}

		public static Production_WorkOrder Find(this ITable<Production_WorkOrder> table, int WorkOrderID)
		{
			return table.FirstOrDefault(t =>
				t.WorkOrderID == WorkOrderID);
		}

		public static Production_WorkOrderRouting Find(this ITable<Production_WorkOrderRouting> table, int WorkOrderID, int ProductID, short OperationSequence)
		{
			return table.FirstOrDefault(t =>
				t.WorkOrderID       == WorkOrderID &&
				t.ProductID         == ProductID   &&
				t.OperationSequence == OperationSequence);
		}
	}
}

#pragma warning restore 1591
